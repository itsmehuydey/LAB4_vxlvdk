
LAB4_EX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004840  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800494c  0800494c  0001494c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049d8  080049d8  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  080049d8  080049d8  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049d8  080049d8  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049d8  080049d8  000149d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049dc  080049dc  000149dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  080049e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200000d4  08004ab4  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08004ab4  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101d2  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002883  00000000  00000000  000302cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00032b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  00033918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ed0  00000000  00000000  000345a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b6d  00000000  00000000  0004d470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008908d  00000000  00000000  0005efdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e806a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a94  00000000  00000000  000e80c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d4 	.word	0x200000d4
 8000128:	00000000 	.word	0x00000000
 800012c:	08004934 	.word	0x08004934

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d8 	.word	0x200000d8
 8000148:	08004934 	.word	0x08004934

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <isButtonPressed>:

int TimeOutForKeyPress = 500;
int button_flag[N0_OF_BUTTONS] = {0};
int button_long_pressed[N0_OF_BUTTONS] = {0};

int isButtonPressed(int index){
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1)
 8000164:	4a06      	ldr	r2, [pc, #24]	; (8000180 <isButtonPressed+0x24>)
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800016c:	2b01      	cmp	r3, #1
 800016e:	d101      	bne.n	8000174 <isButtonPressed+0x18>
		return 1;
 8000170:	2301      	movs	r3, #1
 8000172:	e000      	b.n	8000176 <isButtonPressed+0x1a>
	return 0;
 8000174:	2300      	movs	r3, #0
}
 8000176:	4618      	mov	r0, r3
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	200000f0 	.word	0x200000f0

08000184 <getKeyInput>:
	if(button_long_pressed[index] == 1)
		return 1;
	return 0;
}

void getKeyInput(){
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
	static int longPressCounter[N0_OF_BUTTONS] = {0};
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 800018a:	2300      	movs	r3, #0
 800018c:	607b      	str	r3, [r7, #4]
 800018e:	e012      	b.n	80001b6 <getKeyInput+0x32>
		KeyReg2[i] = KeyReg1[i];
 8000190:	4a57      	ldr	r2, [pc, #348]	; (80002f0 <getKeyInput+0x16c>)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000198:	4956      	ldr	r1, [pc, #344]	; (80002f4 <getKeyInput+0x170>)
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80001a0:	4a55      	ldr	r2, [pc, #340]	; (80002f8 <getKeyInput+0x174>)
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a8:	4951      	ldr	r1, [pc, #324]	; (80002f0 <getKeyInput+0x16c>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	3301      	adds	r3, #1
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2b02      	cmp	r3, #2
 80001ba:	dde9      	ble.n	8000190 <getKeyInput+0xc>
	}
	KeyReg0[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 80001bc:	2140      	movs	r1, #64	; 0x40
 80001be:	484f      	ldr	r0, [pc, #316]	; (80002fc <getKeyInput+0x178>)
 80001c0:	f002 f8f4 	bl	80023ac <HAL_GPIO_ReadPin>
 80001c4:	4603      	mov	r3, r0
 80001c6:	461a      	mov	r2, r3
 80001c8:	4b4b      	ldr	r3, [pc, #300]	; (80002f8 <getKeyInput+0x174>)
 80001ca:	601a      	str	r2, [r3, #0]
	KeyReg0[1] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 80001cc:	2180      	movs	r1, #128	; 0x80
 80001ce:	484b      	ldr	r0, [pc, #300]	; (80002fc <getKeyInput+0x178>)
 80001d0:	f002 f8ec 	bl	80023ac <HAL_GPIO_ReadPin>
 80001d4:	4603      	mov	r3, r0
 80001d6:	461a      	mov	r2, r3
 80001d8:	4b47      	ldr	r3, [pc, #284]	; (80002f8 <getKeyInput+0x174>)
 80001da:	605a      	str	r2, [r3, #4]
	KeyReg0[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 80001dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001e0:	4846      	ldr	r0, [pc, #280]	; (80002fc <getKeyInput+0x178>)
 80001e2:	f002 f8e3 	bl	80023ac <HAL_GPIO_ReadPin>
 80001e6:	4603      	mov	r3, r0
 80001e8:	461a      	mov	r2, r3
 80001ea:	4b43      	ldr	r3, [pc, #268]	; (80002f8 <getKeyInput+0x174>)
 80001ec:	609a      	str	r2, [r3, #8]

	for(int i = 0; i < N0_OF_BUTTONS; i++){
 80001ee:	2300      	movs	r3, #0
 80001f0:	603b      	str	r3, [r7, #0]
 80001f2:	e075      	b.n	80002e0 <getKeyInput+0x15c>
		if((KeyReg1[i] == KeyReg0[i]) && (KeyReg2[i] == KeyReg1[i])){
 80001f4:	4a3e      	ldr	r2, [pc, #248]	; (80002f0 <getKeyInput+0x16c>)
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fc:	493e      	ldr	r1, [pc, #248]	; (80002f8 <getKeyInput+0x174>)
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000204:	429a      	cmp	r2, r3
 8000206:	d168      	bne.n	80002da <getKeyInput+0x156>
 8000208:	4a3a      	ldr	r2, [pc, #232]	; (80002f4 <getKeyInput+0x170>)
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000210:	4937      	ldr	r1, [pc, #220]	; (80002f0 <getKeyInput+0x16c>)
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000218:	429a      	cmp	r2, r3
 800021a:	d15e      	bne.n	80002da <getKeyInput+0x156>
			if(KeyReg2[i] != KeyReg3[i]){
 800021c:	4a35      	ldr	r2, [pc, #212]	; (80002f4 <getKeyInput+0x170>)
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000224:	4936      	ldr	r1, [pc, #216]	; (8000300 <getKeyInput+0x17c>)
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022c:	429a      	cmp	r2, r3
 800022e:	d017      	beq.n	8000260 <getKeyInput+0xdc>
				KeyReg3[i] = KeyReg2[i];
 8000230:	4a30      	ldr	r2, [pc, #192]	; (80002f4 <getKeyInput+0x170>)
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000238:	4931      	ldr	r1, [pc, #196]	; (8000300 <getKeyInput+0x17c>)
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if(KeyReg3[i] == PRESSED_STATE){
 8000240:	4a2f      	ldr	r2, [pc, #188]	; (8000300 <getKeyInput+0x17c>)
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d121      	bne.n	8000290 <getKeyInput+0x10c>
					TimeOutForKeyPress = 500;
 800024c:	4b2d      	ldr	r3, [pc, #180]	; (8000304 <getKeyInput+0x180>)
 800024e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000252:	601a      	str	r2, [r3, #0]
					button_flag[i] = 1;
 8000254:	4a2c      	ldr	r2, [pc, #176]	; (8000308 <getKeyInput+0x184>)
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	2101      	movs	r1, #1
 800025a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800025e:	e017      	b.n	8000290 <getKeyInput+0x10c>
				}
			}
			else{
				TimeOutForKeyPress--;
 8000260:	4b28      	ldr	r3, [pc, #160]	; (8000304 <getKeyInput+0x180>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	3b01      	subs	r3, #1
 8000266:	4a27      	ldr	r2, [pc, #156]	; (8000304 <getKeyInput+0x180>)
 8000268:	6013      	str	r3, [r2, #0]
				if(TimeOutForKeyPress == 0){
 800026a:	4b26      	ldr	r3, [pc, #152]	; (8000304 <getKeyInput+0x180>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d10e      	bne.n	8000290 <getKeyInput+0x10c>
					TimeOutForKeyPress = 500;
 8000272:	4b24      	ldr	r3, [pc, #144]	; (8000304 <getKeyInput+0x180>)
 8000274:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000278:	601a      	str	r2, [r3, #0]

					if(KeyReg3[i] == PRESSED_STATE){
 800027a:	4a21      	ldr	r2, [pc, #132]	; (8000300 <getKeyInput+0x17c>)
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d104      	bne.n	8000290 <getKeyInput+0x10c>
						button_flag[i] = 1;
 8000286:	4a20      	ldr	r2, [pc, #128]	; (8000308 <getKeyInput+0x184>)
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	2101      	movs	r1, #1
 800028c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					//else release
				}
			}
			if(KeyReg3[i] == PRESSED_STATE){
 8000290:	4a1b      	ldr	r2, [pc, #108]	; (8000300 <getKeyInput+0x17c>)
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d119      	bne.n	80002d0 <getKeyInput+0x14c>
			  	longPressCounter[i]++;
 800029c:	4a1b      	ldr	r2, [pc, #108]	; (800030c <getKeyInput+0x188>)
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a4:	1c5a      	adds	r2, r3, #1
 80002a6:	4919      	ldr	r1, [pc, #100]	; (800030c <getKeyInput+0x188>)
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  	if(longPressCounter[i] >= 200){
 80002ae:	4a17      	ldr	r2, [pc, #92]	; (800030c <getKeyInput+0x188>)
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b6:	2bc7      	cmp	r3, #199	; 0xc7
 80002b8:	dd0f      	ble.n	80002da <getKeyInput+0x156>
			  		button_flag[i] = 1;
 80002ba:	4a13      	ldr	r2, [pc, #76]	; (8000308 <getKeyInput+0x184>)
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	2101      	movs	r1, #1
 80002c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  		longPressCounter[i] = 190;
 80002c4:	4a11      	ldr	r2, [pc, #68]	; (800030c <getKeyInput+0x188>)
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	21be      	movs	r1, #190	; 0xbe
 80002ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002ce:	e004      	b.n	80002da <getKeyInput+0x156>
			  	}
			}
			else {
				longPressCounter[i] = 0;
 80002d0:	4a0e      	ldr	r2, [pc, #56]	; (800030c <getKeyInput+0x188>)
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	2100      	movs	r1, #0
 80002d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	3301      	adds	r3, #1
 80002de:	603b      	str	r3, [r7, #0]
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	2b02      	cmp	r3, #2
 80002e4:	dd86      	ble.n	80001f4 <getKeyInput+0x70>
			}
		}
	}
}
 80002e6:	bf00      	nop
 80002e8:	bf00      	nop
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	2000000c 	.word	0x2000000c
 80002f4:	20000018 	.word	0x20000018
 80002f8:	20000000 	.word	0x20000000
 80002fc:	40010800 	.word	0x40010800
 8000300:	20000024 	.word	0x20000024
 8000304:	20000030 	.word	0x20000030
 8000308:	200000f0 	.word	0x200000f0
 800030c:	200000fc 	.word	0x200000fc

08000310 <displayLED7SEG>:
#include "display7seg.h"

#define MODE 0
#define DUR 1

void displayLED7SEG(int number, int modify){
 8000310:	b580      	push	{r7, lr}
 8000312:	b08e      	sub	sp, #56	; 0x38
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]
	int div = number / 10;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a6a      	ldr	r2, [pc, #424]	; (80004c8 <displayLED7SEG+0x1b8>)
 800031e:	fb82 1203 	smull	r1, r2, r2, r3
 8000322:	1092      	asrs	r2, r2, #2
 8000324:	17db      	asrs	r3, r3, #31
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	637b      	str	r3, [r7, #52]	; 0x34
	int mod = number % 10;
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	4b66      	ldr	r3, [pc, #408]	; (80004c8 <displayLED7SEG+0x1b8>)
 800032e:	fb83 1302 	smull	r1, r3, r3, r2
 8000332:	1099      	asrs	r1, r3, #2
 8000334:	17d3      	asrs	r3, r2, #31
 8000336:	1ac9      	subs	r1, r1, r3
 8000338:	460b      	mov	r3, r1
 800033a:	009b      	lsls	r3, r3, #2
 800033c:	440b      	add	r3, r1
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	1ad3      	subs	r3, r2, r3
 8000342:	633b      	str	r3, [r7, #48]	; 0x30

	int arr1[4] = {0};
 8000344:	f107 031c 	add.w	r3, r7, #28
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	605a      	str	r2, [r3, #4]
 800034e:	609a      	str	r2, [r3, #8]
 8000350:	60da      	str	r2, [r3, #12]
	int arr2[4] = {0};
 8000352:	f107 030c 	add.w	r3, r7, #12
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]

	for(int i = 3; i >= 0; --i){
 8000360:	2303      	movs	r3, #3
 8000362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000364:	e028      	b.n	80003b8 <displayLED7SEG+0xa8>
		arr1[i] = div % 2;
 8000366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000368:	2b00      	cmp	r3, #0
 800036a:	f003 0301 	and.w	r3, r3, #1
 800036e:	bfb8      	it	lt
 8000370:	425b      	neglt	r3, r3
 8000372:	461a      	mov	r2, r3
 8000374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800037c:	440b      	add	r3, r1
 800037e:	f843 2c1c 	str.w	r2, [r3, #-28]
		div = div / 2;
 8000382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000384:	0fda      	lsrs	r2, r3, #31
 8000386:	4413      	add	r3, r2
 8000388:	105b      	asrs	r3, r3, #1
 800038a:	637b      	str	r3, [r7, #52]	; 0x34

		arr2[i] = mod % 2;
 800038c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800038e:	2b00      	cmp	r3, #0
 8000390:	f003 0301 	and.w	r3, r3, #1
 8000394:	bfb8      	it	lt
 8000396:	425b      	neglt	r3, r3
 8000398:	461a      	mov	r2, r3
 800039a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80003a2:	440b      	add	r3, r1
 80003a4:	f843 2c2c 	str.w	r2, [r3, #-44]
		mod = mod / 2;
 80003a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003aa:	0fda      	lsrs	r2, r3, #31
 80003ac:	4413      	add	r3, r2
 80003ae:	105b      	asrs	r3, r3, #1
 80003b0:	633b      	str	r3, [r7, #48]	; 0x30
	for(int i = 3; i >= 0; --i){
 80003b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003b4:	3b01      	subs	r3, #1
 80003b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80003b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	dad3      	bge.n	8000366 <displayLED7SEG+0x56>
	}

	if(modify == MODE){
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d13b      	bne.n	800043c <displayLED7SEG+0x12c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, arr1[3]);
 80003c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	461a      	mov	r2, r3
 80003ca:	2102      	movs	r1, #2
 80003cc:	483f      	ldr	r0, [pc, #252]	; (80004cc <displayLED7SEG+0x1bc>)
 80003ce:	f002 f804 	bl	80023da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, arr1[2]);
 80003d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	461a      	mov	r2, r3
 80003d8:	2104      	movs	r1, #4
 80003da:	483c      	ldr	r0, [pc, #240]	; (80004cc <displayLED7SEG+0x1bc>)
 80003dc:	f001 fffd 	bl	80023da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, arr1[1]);
 80003e0:	6a3b      	ldr	r3, [r7, #32]
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	461a      	mov	r2, r3
 80003e6:	2108      	movs	r1, #8
 80003e8:	4838      	ldr	r0, [pc, #224]	; (80004cc <displayLED7SEG+0x1bc>)
 80003ea:	f001 fff6 	bl	80023da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, arr1[0]);
 80003ee:	69fb      	ldr	r3, [r7, #28]
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	461a      	mov	r2, r3
 80003f4:	2110      	movs	r1, #16
 80003f6:	4835      	ldr	r0, [pc, #212]	; (80004cc <displayLED7SEG+0x1bc>)
 80003f8:	f001 ffef 	bl	80023da <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, arr2[3]);
 80003fc:	69bb      	ldr	r3, [r7, #24]
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	461a      	mov	r2, r3
 8000402:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000406:	4831      	ldr	r0, [pc, #196]	; (80004cc <displayLED7SEG+0x1bc>)
 8000408:	f001 ffe7 	bl	80023da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, arr2[2]);
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	b2db      	uxtb	r3, r3
 8000410:	461a      	mov	r2, r3
 8000412:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000416:	482d      	ldr	r0, [pc, #180]	; (80004cc <displayLED7SEG+0x1bc>)
 8000418:	f001 ffdf 	bl	80023da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, arr2[1]);
 800041c:	693b      	ldr	r3, [r7, #16]
 800041e:	b2db      	uxtb	r3, r3
 8000420:	461a      	mov	r2, r3
 8000422:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000426:	4829      	ldr	r0, [pc, #164]	; (80004cc <displayLED7SEG+0x1bc>)
 8000428:	f001 ffd7 	bl	80023da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, arr2[0]);
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	b2db      	uxtb	r3, r3
 8000430:	461a      	mov	r2, r3
 8000432:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000436:	4825      	ldr	r0, [pc, #148]	; (80004cc <displayLED7SEG+0x1bc>)
 8000438:	f001 ffcf 	bl	80023da <HAL_GPIO_WritePin>
	}
	if(modify == DUR){
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	2b01      	cmp	r3, #1
 8000440:	d13d      	bne.n	80004be <displayLED7SEG+0x1ae>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, arr1[3]);
 8000442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000444:	b2db      	uxtb	r3, r3
 8000446:	461a      	mov	r2, r3
 8000448:	2140      	movs	r1, #64	; 0x40
 800044a:	4821      	ldr	r0, [pc, #132]	; (80004d0 <displayLED7SEG+0x1c0>)
 800044c:	f001 ffc5 	bl	80023da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, arr1[2]);
 8000450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000452:	b2db      	uxtb	r3, r3
 8000454:	461a      	mov	r2, r3
 8000456:	2180      	movs	r1, #128	; 0x80
 8000458:	481d      	ldr	r0, [pc, #116]	; (80004d0 <displayLED7SEG+0x1c0>)
 800045a:	f001 ffbe 	bl	80023da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, arr1[1]);
 800045e:	6a3b      	ldr	r3, [r7, #32]
 8000460:	b2db      	uxtb	r3, r3
 8000462:	461a      	mov	r2, r3
 8000464:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000468:	4819      	ldr	r0, [pc, #100]	; (80004d0 <displayLED7SEG+0x1c0>)
 800046a:	f001 ffb6 	bl	80023da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, arr1[0]);
 800046e:	69fb      	ldr	r3, [r7, #28]
 8000470:	b2db      	uxtb	r3, r3
 8000472:	461a      	mov	r2, r3
 8000474:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000478:	4815      	ldr	r0, [pc, #84]	; (80004d0 <displayLED7SEG+0x1c0>)
 800047a:	f001 ffae 	bl	80023da <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, arr2[3]);
 800047e:	69bb      	ldr	r3, [r7, #24]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	461a      	mov	r2, r3
 8000484:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000488:	4811      	ldr	r0, [pc, #68]	; (80004d0 <displayLED7SEG+0x1c0>)
 800048a:	f001 ffa6 	bl	80023da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, arr2[2]);
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	b2db      	uxtb	r3, r3
 8000492:	461a      	mov	r2, r3
 8000494:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000498:	480d      	ldr	r0, [pc, #52]	; (80004d0 <displayLED7SEG+0x1c0>)
 800049a:	f001 ff9e 	bl	80023da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, arr2[1]);
 800049e:	693b      	ldr	r3, [r7, #16]
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	461a      	mov	r2, r3
 80004a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004a8:	4809      	ldr	r0, [pc, #36]	; (80004d0 <displayLED7SEG+0x1c0>)
 80004aa:	f001 ff96 	bl	80023da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, arr2[0]);
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	461a      	mov	r2, r3
 80004b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b8:	4805      	ldr	r0, [pc, #20]	; (80004d0 <displayLED7SEG+0x1c0>)
 80004ba:	f001 ff8e 	bl	80023da <HAL_GPIO_WritePin>
	}
}
 80004be:	bf00      	nop
 80004c0:	3738      	adds	r7, #56	; 0x38
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	66666667 	.word	0x66666667
 80004cc:	40010800 	.word	0x40010800
 80004d0:	40010c00 	.word	0x40010c00

080004d4 <fsm_automatic>:
	if(timer_flag[0]){
		blinkingLed(status);
		setTimer(0, 50);
	}
}
void fsm_automatic(){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
	int amber_dummy;
	int green_dummy;
		if(timer_flag[2] ==1){
 80004da:	4b8d      	ldr	r3, [pc, #564]	; (8000710 <fsm_automatic+0x23c>)
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d107      	bne.n	80004f2 <fsm_automatic+0x1e>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004e2:	2120      	movs	r1, #32
 80004e4:	488b      	ldr	r0, [pc, #556]	; (8000714 <fsm_automatic+0x240>)
 80004e6:	f001 ff90 	bl	800240a <HAL_GPIO_TogglePin>
			setTimer(2, 100);
 80004ea:	2164      	movs	r1, #100	; 0x64
 80004ec:	2002      	movs	r0, #2
 80004ee:	f001 fa95 	bl	8001a1c <setTimer>
		}
	switch(status){
 80004f2:	4b89      	ldr	r3, [pc, #548]	; (8000718 <fsm_automatic+0x244>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b08      	cmp	r3, #8
 80004f8:	f200 81ee 	bhi.w	80008d8 <fsm_automatic+0x404>
 80004fc:	a201      	add	r2, pc, #4	; (adr r2, 8000504 <fsm_automatic+0x30>)
 80004fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000502:	bf00      	nop
 8000504:	08000529 	.word	0x08000529
 8000508:	080008d9 	.word	0x080008d9
 800050c:	080008d9 	.word	0x080008d9
 8000510:	080008d9 	.word	0x080008d9
 8000514:	080008d9 	.word	0x080008d9
 8000518:	08000577 	.word	0x08000577
 800051c:	08000643 	.word	0x08000643
 8000520:	08000745 	.word	0x08000745
 8000524:	0800080f 	.word	0x0800080f
		case INIT:
			status = RED_GREEN;
 8000528:	4b7b      	ldr	r3, [pc, #492]	; (8000718 <fsm_automatic+0x244>)
 800052a:	2205      	movs	r2, #5
 800052c:	601a      	str	r2, [r3, #0]
			setTimer(1, 300);//300
 800052e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000532:	2001      	movs	r0, #1
 8000534:	f001 fa72 	bl	8001a1c <setTimer>
			setTimer(0, 0);//0
 8000538:	2100      	movs	r1, #0
 800053a:	2000      	movs	r0, #0
 800053c:	f001 fa6e 	bl	8001a1c <setTimer>
			clearAllLed();
 8000540:	f001 fab0 	bl	8001aa4 <clearAllLed>
			red = max_red;
 8000544:	4b75      	ldr	r3, [pc, #468]	; (800071c <fsm_automatic+0x248>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a75      	ldr	r2, [pc, #468]	; (8000720 <fsm_automatic+0x24c>)
 800054a:	6013      	str	r3, [r2, #0]
			amber = max_amber;
 800054c:	4b75      	ldr	r3, [pc, #468]	; (8000724 <fsm_automatic+0x250>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a75      	ldr	r2, [pc, #468]	; (8000728 <fsm_automatic+0x254>)
 8000552:	6013      	str	r3, [r2, #0]
			green = max_green;
 8000554:	4b75      	ldr	r3, [pc, #468]	; (800072c <fsm_automatic+0x258>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a75      	ldr	r2, [pc, #468]	; (8000730 <fsm_automatic+0x25c>)
 800055a:	6013      	str	r3, [r2, #0]
			temp_red = max_red;
 800055c:	4b6f      	ldr	r3, [pc, #444]	; (800071c <fsm_automatic+0x248>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a74      	ldr	r2, [pc, #464]	; (8000734 <fsm_automatic+0x260>)
 8000562:	6013      	str	r3, [r2, #0]
			temp_amber = max_amber;
 8000564:	4b6f      	ldr	r3, [pc, #444]	; (8000724 <fsm_automatic+0x250>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a73      	ldr	r2, [pc, #460]	; (8000738 <fsm_automatic+0x264>)
 800056a:	6013      	str	r3, [r2, #0]
			temp_green = max_green;
 800056c:	4b6f      	ldr	r3, [pc, #444]	; (800072c <fsm_automatic+0x258>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a72      	ldr	r2, [pc, #456]	; (800073c <fsm_automatic+0x268>)
 8000572:	6013      	str	r3, [r2, #0]
			break;
 8000574:	e1b9      	b.n	80008ea <fsm_automatic+0x416>
		case RED_GREEN:
			led_red_green();
 8000576:	f001 fab9 	bl	8001aec <led_red_green>
			if(timer_flag[0]){
 800057a:	4b65      	ldr	r3, [pc, #404]	; (8000710 <fsm_automatic+0x23c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d01b      	beq.n	80005ba <fsm_automatic+0xe6>
				--red;
 8000582:	4b67      	ldr	r3, [pc, #412]	; (8000720 <fsm_automatic+0x24c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	3b01      	subs	r3, #1
 8000588:	4a65      	ldr	r2, [pc, #404]	; (8000720 <fsm_automatic+0x24c>)
 800058a:	6013      	str	r3, [r2, #0]
				--green;
 800058c:	4b68      	ldr	r3, [pc, #416]	; (8000730 <fsm_automatic+0x25c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	3b01      	subs	r3, #1
 8000592:	4a67      	ldr	r2, [pc, #412]	; (8000730 <fsm_automatic+0x25c>)
 8000594:	6013      	str	r3, [r2, #0]
				displayLED7SEG(red, 0);
 8000596:	4b62      	ldr	r3, [pc, #392]	; (8000720 <fsm_automatic+0x24c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff feb7 	bl	8000310 <displayLED7SEG>
				displayLED7SEG(green, 1);
 80005a2:	4b63      	ldr	r3, [pc, #396]	; (8000730 <fsm_automatic+0x25c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2101      	movs	r1, #1
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff feb1 	bl	8000310 <displayLED7SEG>
				controlTime_led();
 80005ae:	f001 fadd 	bl	8001b6c <controlTime_led>
				setTimer(0, 100);
 80005b2:	2164      	movs	r1, #100	; 0x64
 80005b4:	2000      	movs	r0, #0
 80005b6:	f001 fa31 	bl	8001a1c <setTimer>
			}
			if(timer_flag[1]){
 80005ba:	4b55      	ldr	r3, [pc, #340]	; (8000710 <fsm_automatic+0x23c>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d00e      	beq.n	80005e0 <fsm_automatic+0x10c>
				status = RED_AMBER;
 80005c2:	4b55      	ldr	r3, [pc, #340]	; (8000718 <fsm_automatic+0x244>)
 80005c4:	2206      	movs	r2, #6
 80005c6:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80005c8:	f001 fa6c 	bl	8001aa4 <clearAllLed>
				amber_dummy = amber*100;
 80005cc:	4b56      	ldr	r3, [pc, #344]	; (8000728 <fsm_automatic+0x254>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2264      	movs	r2, #100	; 0x64
 80005d2:	fb02 f303 	mul.w	r3, r2, r3
 80005d6:	603b      	str	r3, [r7, #0]
				setTimer(1, amber_dummy);
 80005d8:	6839      	ldr	r1, [r7, #0]
 80005da:	2001      	movs	r0, #1
 80005dc:	f001 fa1e 	bl	8001a1c <setTimer>
			}
			if(isButtonPressed(1)){
 80005e0:	2001      	movs	r0, #1
 80005e2:	f7ff fdbb 	bl	800015c <isButtonPressed>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d016      	beq.n	800061a <fsm_automatic+0x146>
				status = MAN_RED_GREEN;
 80005ec:	4b4a      	ldr	r3, [pc, #296]	; (8000718 <fsm_automatic+0x244>)
 80005ee:	2209      	movs	r2, #9
 80005f0:	601a      	str	r2, [r3, #0]
				setTimer(1, 1000);
 80005f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005f6:	2001      	movs	r0, #1
 80005f8:	f001 fa10 	bl	8001a1c <setTimer>
				clearAllLed();
 80005fc:	f001 fa52 	bl	8001aa4 <clearAllLed>
				red = 10;
 8000600:	4b47      	ldr	r3, [pc, #284]	; (8000720 <fsm_automatic+0x24c>)
 8000602:	220a      	movs	r2, #10
 8000604:	601a      	str	r2, [r3, #0]
				green = 10;
 8000606:	4b4a      	ldr	r3, [pc, #296]	; (8000730 <fsm_automatic+0x25c>)
 8000608:	220a      	movs	r2, #10
 800060a:	601a      	str	r2, [r3, #0]
				button_flag[1] = 0;
 800060c:	4b4c      	ldr	r3, [pc, #304]	; (8000740 <fsm_automatic+0x26c>)
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
				setTimer(0, 1);
 8000612:	2101      	movs	r1, #1
 8000614:	2000      	movs	r0, #0
 8000616:	f001 fa01 	bl	8001a1c <setTimer>
			}
			if(isButtonPressed(0)){
 800061a:	2000      	movs	r0, #0
 800061c:	f7ff fd9e 	bl	800015c <isButtonPressed>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	f000 815a 	beq.w	80008dc <fsm_automatic+0x408>
				status = MODE_2;
 8000628:	4b3b      	ldr	r3, [pc, #236]	; (8000718 <fsm_automatic+0x244>)
 800062a:	2202      	movs	r2, #2
 800062c:	601a      	str	r2, [r3, #0]
				clearAllLed();
 800062e:	f001 fa39 	bl	8001aa4 <clearAllLed>
				setTimer(0, 1);
 8000632:	2101      	movs	r1, #1
 8000634:	2000      	movs	r0, #0
 8000636:	f001 f9f1 	bl	8001a1c <setTimer>
				button_flag[0] = 0;
 800063a:	4b41      	ldr	r3, [pc, #260]	; (8000740 <fsm_automatic+0x26c>)
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000640:	e14c      	b.n	80008dc <fsm_automatic+0x408>
		case RED_AMBER:
			led_red_amber();
 8000642:	f001 fa63 	bl	8001b0c <led_red_amber>
			if(timer_flag[0]){
 8000646:	4b32      	ldr	r3, [pc, #200]	; (8000710 <fsm_automatic+0x23c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d01b      	beq.n	8000686 <fsm_automatic+0x1b2>
				--red;
 800064e:	4b34      	ldr	r3, [pc, #208]	; (8000720 <fsm_automatic+0x24c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	3b01      	subs	r3, #1
 8000654:	4a32      	ldr	r2, [pc, #200]	; (8000720 <fsm_automatic+0x24c>)
 8000656:	6013      	str	r3, [r2, #0]
				--amber;
 8000658:	4b33      	ldr	r3, [pc, #204]	; (8000728 <fsm_automatic+0x254>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	3b01      	subs	r3, #1
 800065e:	4a32      	ldr	r2, [pc, #200]	; (8000728 <fsm_automatic+0x254>)
 8000660:	6013      	str	r3, [r2, #0]
				displayLED7SEG(red, 0);
 8000662:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <fsm_automatic+0x24c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff fe51 	bl	8000310 <displayLED7SEG>
				displayLED7SEG(amber, 1);
 800066e:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <fsm_automatic+0x254>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2101      	movs	r1, #1
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff fe4b 	bl	8000310 <displayLED7SEG>


				controlTime_led();
 800067a:	f001 fa77 	bl	8001b6c <controlTime_led>

				setTimer(0, 100);
 800067e:	2164      	movs	r1, #100	; 0x64
 8000680:	2000      	movs	r0, #0
 8000682:	f001 f9cb 	bl	8001a1c <setTimer>
			}
			if(timer_flag[1]){
 8000686:	4b22      	ldr	r3, [pc, #136]	; (8000710 <fsm_automatic+0x23c>)
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d00e      	beq.n	80006ac <fsm_automatic+0x1d8>
				status = GREEN_RED;
 800068e:	4b22      	ldr	r3, [pc, #136]	; (8000718 <fsm_automatic+0x244>)
 8000690:	2207      	movs	r2, #7
 8000692:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000694:	f001 fa06 	bl	8001aa4 <clearAllLed>
				green_dummy = green*100;
 8000698:	4b25      	ldr	r3, [pc, #148]	; (8000730 <fsm_automatic+0x25c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2264      	movs	r2, #100	; 0x64
 800069e:	fb02 f303 	mul.w	r3, r2, r3
 80006a2:	607b      	str	r3, [r7, #4]
				setTimer(1, green_dummy);
 80006a4:	6879      	ldr	r1, [r7, #4]
 80006a6:	2001      	movs	r0, #1
 80006a8:	f001 f9b8 	bl	8001a1c <setTimer>
			}
			if(isButtonPressed(1)){
 80006ac:	2001      	movs	r0, #1
 80006ae:	f7ff fd55 	bl	800015c <isButtonPressed>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d016      	beq.n	80006e6 <fsm_automatic+0x212>
				status = MAN_RED_AMBER;
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <fsm_automatic+0x244>)
 80006ba:	220a      	movs	r2, #10
 80006bc:	601a      	str	r2, [r3, #0]
				setTimer(1, 1000);
 80006be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006c2:	2001      	movs	r0, #1
 80006c4:	f001 f9aa 	bl	8001a1c <setTimer>
				clearAllLed();
 80006c8:	f001 f9ec 	bl	8001aa4 <clearAllLed>
				red = 10;
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <fsm_automatic+0x24c>)
 80006ce:	220a      	movs	r2, #10
 80006d0:	601a      	str	r2, [r3, #0]
				amber = 10;
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <fsm_automatic+0x254>)
 80006d4:	220a      	movs	r2, #10
 80006d6:	601a      	str	r2, [r3, #0]
				button_flag[1] = 0;
 80006d8:	4b19      	ldr	r3, [pc, #100]	; (8000740 <fsm_automatic+0x26c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
				setTimer(0, 1);
 80006de:	2101      	movs	r1, #1
 80006e0:	2000      	movs	r0, #0
 80006e2:	f001 f99b 	bl	8001a1c <setTimer>
			}
			if(isButtonPressed(0)){
 80006e6:	2000      	movs	r0, #0
 80006e8:	f7ff fd38 	bl	800015c <isButtonPressed>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	f000 80f6 	beq.w	80008e0 <fsm_automatic+0x40c>
				status = MODE_2;
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <fsm_automatic+0x244>)
 80006f6:	2202      	movs	r2, #2
 80006f8:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80006fa:	f001 f9d3 	bl	8001aa4 <clearAllLed>
				setTimer(0, 1);
 80006fe:	2101      	movs	r1, #1
 8000700:	2000      	movs	r0, #0
 8000702:	f001 f98b 	bl	8001a1c <setTimer>
				button_flag[0] = 0;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <fsm_automatic+0x26c>)
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
			}
			break;
 800070c:	e0e8      	b.n	80008e0 <fsm_automatic+0x40c>
 800070e:	bf00      	nop
 8000710:	2000011c 	.word	0x2000011c
 8000714:	40010800 	.word	0x40010800
 8000718:	20000108 	.word	0x20000108
 800071c:	2000004c 	.word	0x2000004c
 8000720:	20000034 	.word	0x20000034
 8000724:	20000050 	.word	0x20000050
 8000728:	20000038 	.word	0x20000038
 800072c:	20000054 	.word	0x20000054
 8000730:	2000003c 	.word	0x2000003c
 8000734:	20000040 	.word	0x20000040
 8000738:	20000044 	.word	0x20000044
 800073c:	20000048 	.word	0x20000048
 8000740:	200000f0 	.word	0x200000f0
		case GREEN_RED:
			led_green_red();
 8000744:	f001 f9f2 	bl	8001b2c <led_green_red>
			if(timer_flag[0]){
 8000748:	4b6a      	ldr	r3, [pc, #424]	; (80008f4 <fsm_automatic+0x420>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d01b      	beq.n	8000788 <fsm_automatic+0x2b4>
				--red;
 8000750:	4b69      	ldr	r3, [pc, #420]	; (80008f8 <fsm_automatic+0x424>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	3b01      	subs	r3, #1
 8000756:	4a68      	ldr	r2, [pc, #416]	; (80008f8 <fsm_automatic+0x424>)
 8000758:	6013      	str	r3, [r2, #0]
				--green;
 800075a:	4b68      	ldr	r3, [pc, #416]	; (80008fc <fsm_automatic+0x428>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	3b01      	subs	r3, #1
 8000760:	4a66      	ldr	r2, [pc, #408]	; (80008fc <fsm_automatic+0x428>)
 8000762:	6013      	str	r3, [r2, #0]
				displayLED7SEG(green, 0);
 8000764:	4b65      	ldr	r3, [pc, #404]	; (80008fc <fsm_automatic+0x428>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fdd0 	bl	8000310 <displayLED7SEG>
				displayLED7SEG(red, 1);
 8000770:	4b61      	ldr	r3, [pc, #388]	; (80008f8 <fsm_automatic+0x424>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2101      	movs	r1, #1
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fdca 	bl	8000310 <displayLED7SEG>
				controlTime_led();
 800077c:	f001 f9f6 	bl	8001b6c <controlTime_led>
				setTimer(0, 100);
 8000780:	2164      	movs	r1, #100	; 0x64
 8000782:	2000      	movs	r0, #0
 8000784:	f001 f94a 	bl	8001a1c <setTimer>
			}
			if(timer_flag[1]){
 8000788:	4b5a      	ldr	r3, [pc, #360]	; (80008f4 <fsm_automatic+0x420>)
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00e      	beq.n	80007ae <fsm_automatic+0x2da>
				status = AMBER_RED;
 8000790:	4b5b      	ldr	r3, [pc, #364]	; (8000900 <fsm_automatic+0x42c>)
 8000792:	2208      	movs	r2, #8
 8000794:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000796:	f001 f985 	bl	8001aa4 <clearAllLed>
				amber_dummy = amber*100;
 800079a:	4b5a      	ldr	r3, [pc, #360]	; (8000904 <fsm_automatic+0x430>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2264      	movs	r2, #100	; 0x64
 80007a0:	fb02 f303 	mul.w	r3, r2, r3
 80007a4:	603b      	str	r3, [r7, #0]
				setTimer(1, amber_dummy);
 80007a6:	6839      	ldr	r1, [r7, #0]
 80007a8:	2001      	movs	r0, #1
 80007aa:	f001 f937 	bl	8001a1c <setTimer>
			}
			if(isButtonPressed(1)){
 80007ae:	2001      	movs	r0, #1
 80007b0:	f7ff fcd4 	bl	800015c <isButtonPressed>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d016      	beq.n	80007e8 <fsm_automatic+0x314>
				status = MAN_GREEN_RED;
 80007ba:	4b51      	ldr	r3, [pc, #324]	; (8000900 <fsm_automatic+0x42c>)
 80007bc:	220b      	movs	r2, #11
 80007be:	601a      	str	r2, [r3, #0]
				red = 10;
 80007c0:	4b4d      	ldr	r3, [pc, #308]	; (80008f8 <fsm_automatic+0x424>)
 80007c2:	220a      	movs	r2, #10
 80007c4:	601a      	str	r2, [r3, #0]
				green = 10;
 80007c6:	4b4d      	ldr	r3, [pc, #308]	; (80008fc <fsm_automatic+0x428>)
 80007c8:	220a      	movs	r2, #10
 80007ca:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80007cc:	f001 f96a 	bl	8001aa4 <clearAllLed>
				setTimer(1, 1000);
 80007d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007d4:	2001      	movs	r0, #1
 80007d6:	f001 f921 	bl	8001a1c <setTimer>
				button_flag[1] = 0;
 80007da:	4b4b      	ldr	r3, [pc, #300]	; (8000908 <fsm_automatic+0x434>)
 80007dc:	2200      	movs	r2, #0
 80007de:	605a      	str	r2, [r3, #4]
				setTimer(0, 1);
 80007e0:	2101      	movs	r1, #1
 80007e2:	2000      	movs	r0, #0
 80007e4:	f001 f91a 	bl	8001a1c <setTimer>
			}
			if(isButtonPressed(0)){
 80007e8:	2000      	movs	r0, #0
 80007ea:	f7ff fcb7 	bl	800015c <isButtonPressed>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d077      	beq.n	80008e4 <fsm_automatic+0x410>
				status = MODE_2;
 80007f4:	4b42      	ldr	r3, [pc, #264]	; (8000900 <fsm_automatic+0x42c>)
 80007f6:	2202      	movs	r2, #2
 80007f8:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80007fa:	f001 f953 	bl	8001aa4 <clearAllLed>
				setTimer(0, 1);
 80007fe:	2101      	movs	r1, #1
 8000800:	2000      	movs	r0, #0
 8000802:	f001 f90b 	bl	8001a1c <setTimer>
				button_flag[0] = 0;
 8000806:	4b40      	ldr	r3, [pc, #256]	; (8000908 <fsm_automatic+0x434>)
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
			}
			break;
 800080c:	e06a      	b.n	80008e4 <fsm_automatic+0x410>
		case AMBER_RED:
			led_amber_red();
 800080e:	f001 f99d 	bl	8001b4c <led_amber_red>
			if(timer_flag[0]){
 8000812:	4b38      	ldr	r3, [pc, #224]	; (80008f4 <fsm_automatic+0x420>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d01b      	beq.n	8000852 <fsm_automatic+0x37e>
				--red;
 800081a:	4b37      	ldr	r3, [pc, #220]	; (80008f8 <fsm_automatic+0x424>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	3b01      	subs	r3, #1
 8000820:	4a35      	ldr	r2, [pc, #212]	; (80008f8 <fsm_automatic+0x424>)
 8000822:	6013      	str	r3, [r2, #0]
				--amber;
 8000824:	4b37      	ldr	r3, [pc, #220]	; (8000904 <fsm_automatic+0x430>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	3b01      	subs	r3, #1
 800082a:	4a36      	ldr	r2, [pc, #216]	; (8000904 <fsm_automatic+0x430>)
 800082c:	6013      	str	r3, [r2, #0]
				displayLED7SEG(amber, 0);
 800082e:	4b35      	ldr	r3, [pc, #212]	; (8000904 <fsm_automatic+0x430>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fd6b 	bl	8000310 <displayLED7SEG>
				displayLED7SEG(red, 1);
 800083a:	4b2f      	ldr	r3, [pc, #188]	; (80008f8 <fsm_automatic+0x424>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2101      	movs	r1, #1
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fd65 	bl	8000310 <displayLED7SEG>
				controlTime_led();
 8000846:	f001 f991 	bl	8001b6c <controlTime_led>
				setTimer(0, 100);
 800084a:	2164      	movs	r1, #100	; 0x64
 800084c:	2000      	movs	r0, #0
 800084e:	f001 f8e5 	bl	8001a1c <setTimer>
			}
			if(timer_flag[1]){
 8000852:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <fsm_automatic+0x420>)
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d00e      	beq.n	8000878 <fsm_automatic+0x3a4>
				status = RED_GREEN;
 800085a:	4b29      	ldr	r3, [pc, #164]	; (8000900 <fsm_automatic+0x42c>)
 800085c:	2205      	movs	r2, #5
 800085e:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000860:	f001 f920 	bl	8001aa4 <clearAllLed>
				green_dummy = green*100;
 8000864:	4b25      	ldr	r3, [pc, #148]	; (80008fc <fsm_automatic+0x428>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2264      	movs	r2, #100	; 0x64
 800086a:	fb02 f303 	mul.w	r3, r2, r3
 800086e:	607b      	str	r3, [r7, #4]
				setTimer(1, green_dummy);
 8000870:	6879      	ldr	r1, [r7, #4]
 8000872:	2001      	movs	r0, #1
 8000874:	f001 f8d2 	bl	8001a1c <setTimer>
			}
			if(isButtonPressed(1)){
 8000878:	2001      	movs	r0, #1
 800087a:	f7ff fc6f 	bl	800015c <isButtonPressed>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d016      	beq.n	80008b2 <fsm_automatic+0x3de>
				status = MAN_AMBER_RED;
 8000884:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <fsm_automatic+0x42c>)
 8000886:	220c      	movs	r2, #12
 8000888:	601a      	str	r2, [r3, #0]
				red = 10;
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <fsm_automatic+0x424>)
 800088c:	220a      	movs	r2, #10
 800088e:	601a      	str	r2, [r3, #0]
				amber = 10;
 8000890:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <fsm_automatic+0x430>)
 8000892:	220a      	movs	r2, #10
 8000894:	601a      	str	r2, [r3, #0]
				setTimer(1, 1000);
 8000896:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800089a:	2001      	movs	r0, #1
 800089c:	f001 f8be 	bl	8001a1c <setTimer>
				clearAllLed();
 80008a0:	f001 f900 	bl	8001aa4 <clearAllLed>
				button_flag[1] = 0;
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <fsm_automatic+0x434>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
				setTimer(0, 1);
 80008aa:	2101      	movs	r1, #1
 80008ac:	2000      	movs	r0, #0
 80008ae:	f001 f8b5 	bl	8001a1c <setTimer>
			}
			if(isButtonPressed(0)){
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff fc52 	bl	800015c <isButtonPressed>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d014      	beq.n	80008e8 <fsm_automatic+0x414>
				status = MODE_2;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <fsm_automatic+0x42c>)
 80008c0:	2202      	movs	r2, #2
 80008c2:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80008c4:	f001 f8ee 	bl	8001aa4 <clearAllLed>
				setTimer(0, 1);
 80008c8:	2101      	movs	r1, #1
 80008ca:	2000      	movs	r0, #0
 80008cc:	f001 f8a6 	bl	8001a1c <setTimer>
				button_flag[0] = 0;
 80008d0:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <fsm_automatic+0x434>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
			}
			break;
 80008d6:	e007      	b.n	80008e8 <fsm_automatic+0x414>
		default: break;
 80008d8:	bf00      	nop
 80008da:	e006      	b.n	80008ea <fsm_automatic+0x416>
			break;
 80008dc:	bf00      	nop
 80008de:	e004      	b.n	80008ea <fsm_automatic+0x416>
			break;
 80008e0:	bf00      	nop
 80008e2:	e002      	b.n	80008ea <fsm_automatic+0x416>
			break;
 80008e4:	bf00      	nop
 80008e6:	e000      	b.n	80008ea <fsm_automatic+0x416>
			break;
 80008e8:	bf00      	nop
	}
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000011c 	.word	0x2000011c
 80008f8:	20000034 	.word	0x20000034
 80008fc:	2000003c 	.word	0x2000003c
 8000900:	20000108 	.word	0x20000108
 8000904:	20000038 	.word	0x20000038
 8000908:	200000f0 	.word	0x200000f0

0800090c <fsm_manual>:
 *  Created on: Nov 27, 2024
 *      Author: pc
 */
#include "fsm_manual.h"

void fsm_manual(){
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	switch(status){
 8000910:	4ba8      	ldr	r3, [pc, #672]	; (8000bb4 <fsm_manual+0x2a8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	3b09      	subs	r3, #9
 8000916:	2b03      	cmp	r3, #3
 8000918:	f200 81c9 	bhi.w	8000cae <fsm_manual+0x3a2>
 800091c:	a201      	add	r2, pc, #4	; (adr r2, 8000924 <fsm_manual+0x18>)
 800091e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000922:	bf00      	nop
 8000924:	08000935 	.word	0x08000935
 8000928:	08000a0b 	.word	0x08000a0b
 800092c:	08000adf 	.word	0x08000adf
 8000930:	08000bd9 	.word	0x08000bd9
		case MAN_RED_GREEN:
			led_red_green();
 8000934:	f001 f8da 	bl	8001aec <led_red_green>
			if(timer_flag[1]){
 8000938:	4b9f      	ldr	r3, [pc, #636]	; (8000bb8 <fsm_manual+0x2ac>)
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d019      	beq.n	8000974 <fsm_manual+0x68>
				status = RED_GREEN;
 8000940:	4b9c      	ldr	r3, [pc, #624]	; (8000bb4 <fsm_manual+0x2a8>)
 8000942:	2205      	movs	r2, #5
 8000944:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000946:	f001 f8ad 	bl	8001aa4 <clearAllLed>
				red = temp_red;
 800094a:	4b9c      	ldr	r3, [pc, #624]	; (8000bbc <fsm_manual+0x2b0>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a9c      	ldr	r2, [pc, #624]	; (8000bc0 <fsm_manual+0x2b4>)
 8000950:	6013      	str	r3, [r2, #0]
				green = temp_green;
 8000952:	4b9c      	ldr	r3, [pc, #624]	; (8000bc4 <fsm_manual+0x2b8>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a9c      	ldr	r2, [pc, #624]	; (8000bc8 <fsm_manual+0x2bc>)
 8000958:	6013      	str	r3, [r2, #0]
				amber = temp_amber;
 800095a:	4b9c      	ldr	r3, [pc, #624]	; (8000bcc <fsm_manual+0x2c0>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a9c      	ldr	r2, [pc, #624]	; (8000bd0 <fsm_manual+0x2c4>)
 8000960:	6013      	str	r3, [r2, #0]
				setTimer(1, green*100);
 8000962:	4b99      	ldr	r3, [pc, #612]	; (8000bc8 <fsm_manual+0x2bc>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2264      	movs	r2, #100	; 0x64
 8000968:	fb02 f303 	mul.w	r3, r2, r3
 800096c:	4619      	mov	r1, r3
 800096e:	2001      	movs	r0, #1
 8000970:	f001 f854 	bl	8001a1c <setTimer>
			}
			if(isButtonPressed(1)){
 8000974:	2001      	movs	r0, #1
 8000976:	f7ff fbf1 	bl	800015c <isButtonPressed>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d012      	beq.n	80009a6 <fsm_manual+0x9a>
				status = MAN_RED_AMBER;
 8000980:	4b8c      	ldr	r3, [pc, #560]	; (8000bb4 <fsm_manual+0x2a8>)
 8000982:	220a      	movs	r2, #10
 8000984:	601a      	str	r2, [r3, #0]
				red = 10;
 8000986:	4b8e      	ldr	r3, [pc, #568]	; (8000bc0 <fsm_manual+0x2b4>)
 8000988:	220a      	movs	r2, #10
 800098a:	601a      	str	r2, [r3, #0]
				amber = 10;
 800098c:	4b90      	ldr	r3, [pc, #576]	; (8000bd0 <fsm_manual+0x2c4>)
 800098e:	220a      	movs	r2, #10
 8000990:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000992:	f001 f887 	bl	8001aa4 <clearAllLed>
				setTimer(1, 1000);
 8000996:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800099a:	2001      	movs	r0, #1
 800099c:	f001 f83e 	bl	8001a1c <setTimer>
				button_flag[1] = 0;
 80009a0:	4b8c      	ldr	r3, [pc, #560]	; (8000bd4 <fsm_manual+0x2c8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	605a      	str	r2, [r3, #4]
			}
			if(isButtonPressed(0)){
 80009a6:	2000      	movs	r0, #0
 80009a8:	f7ff fbd8 	bl	800015c <isButtonPressed>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d00b      	beq.n	80009ca <fsm_manual+0xbe>
				status = MODE_2;
 80009b2:	4b80      	ldr	r3, [pc, #512]	; (8000bb4 <fsm_manual+0x2a8>)
 80009b4:	2202      	movs	r2, #2
 80009b6:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80009b8:	f001 f874 	bl	8001aa4 <clearAllLed>
				setTimer(0, 1);
 80009bc:	2101      	movs	r1, #1
 80009be:	2000      	movs	r0, #0
 80009c0:	f001 f82c 	bl	8001a1c <setTimer>
				button_flag[0] = 0;
 80009c4:	4b83      	ldr	r3, [pc, #524]	; (8000bd4 <fsm_manual+0x2c8>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
			}
			if(timer_flag[0]){
 80009ca:	4b7b      	ldr	r3, [pc, #492]	; (8000bb8 <fsm_manual+0x2ac>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	f000 816f 	beq.w	8000cb2 <fsm_manual+0x3a6>
				--red;
 80009d4:	4b7a      	ldr	r3, [pc, #488]	; (8000bc0 <fsm_manual+0x2b4>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	3b01      	subs	r3, #1
 80009da:	4a79      	ldr	r2, [pc, #484]	; (8000bc0 <fsm_manual+0x2b4>)
 80009dc:	6013      	str	r3, [r2, #0]
				--green;
 80009de:	4b7a      	ldr	r3, [pc, #488]	; (8000bc8 <fsm_manual+0x2bc>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	4a78      	ldr	r2, [pc, #480]	; (8000bc8 <fsm_manual+0x2bc>)
 80009e6:	6013      	str	r3, [r2, #0]
				displayLED7SEG(red, 0);
 80009e8:	4b75      	ldr	r3, [pc, #468]	; (8000bc0 <fsm_manual+0x2b4>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fc8e 	bl	8000310 <displayLED7SEG>
				displayLED7SEG(green, 1);
 80009f4:	4b74      	ldr	r3, [pc, #464]	; (8000bc8 <fsm_manual+0x2bc>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2101      	movs	r1, #1
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fc88 	bl	8000310 <displayLED7SEG>
				setTimer(0, 100);
 8000a00:	2164      	movs	r1, #100	; 0x64
 8000a02:	2000      	movs	r0, #0
 8000a04:	f001 f80a 	bl	8001a1c <setTimer>
			}
			break;
 8000a08:	e153      	b.n	8000cb2 <fsm_manual+0x3a6>
		case MAN_RED_AMBER:
			led_red_amber();
 8000a0a:	f001 f87f 	bl	8001b0c <led_red_amber>
			if(timer_flag[1]){
 8000a0e:	4b6a      	ldr	r3, [pc, #424]	; (8000bb8 <fsm_manual+0x2ac>)
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d019      	beq.n	8000a4a <fsm_manual+0x13e>
				status = RED_GREEN;
 8000a16:	4b67      	ldr	r3, [pc, #412]	; (8000bb4 <fsm_manual+0x2a8>)
 8000a18:	2205      	movs	r2, #5
 8000a1a:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000a1c:	f001 f842 	bl	8001aa4 <clearAllLed>
				red = temp_red;
 8000a20:	4b66      	ldr	r3, [pc, #408]	; (8000bbc <fsm_manual+0x2b0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a66      	ldr	r2, [pc, #408]	; (8000bc0 <fsm_manual+0x2b4>)
 8000a26:	6013      	str	r3, [r2, #0]
				green = temp_green;
 8000a28:	4b66      	ldr	r3, [pc, #408]	; (8000bc4 <fsm_manual+0x2b8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a66      	ldr	r2, [pc, #408]	; (8000bc8 <fsm_manual+0x2bc>)
 8000a2e:	6013      	str	r3, [r2, #0]
				amber = temp_amber;
 8000a30:	4b66      	ldr	r3, [pc, #408]	; (8000bcc <fsm_manual+0x2c0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a66      	ldr	r2, [pc, #408]	; (8000bd0 <fsm_manual+0x2c4>)
 8000a36:	6013      	str	r3, [r2, #0]
				setTimer(1, green*100);
 8000a38:	4b63      	ldr	r3, [pc, #396]	; (8000bc8 <fsm_manual+0x2bc>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2264      	movs	r2, #100	; 0x64
 8000a3e:	fb02 f303 	mul.w	r3, r2, r3
 8000a42:	4619      	mov	r1, r3
 8000a44:	2001      	movs	r0, #1
 8000a46:	f000 ffe9 	bl	8001a1c <setTimer>
			}
			if(timer_flag[0]){
 8000a4a:	4b5b      	ldr	r3, [pc, #364]	; (8000bb8 <fsm_manual+0x2ac>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d019      	beq.n	8000a86 <fsm_manual+0x17a>
				--red;
 8000a52:	4b5b      	ldr	r3, [pc, #364]	; (8000bc0 <fsm_manual+0x2b4>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	4a59      	ldr	r2, [pc, #356]	; (8000bc0 <fsm_manual+0x2b4>)
 8000a5a:	6013      	str	r3, [r2, #0]
				--amber;
 8000a5c:	4b5c      	ldr	r3, [pc, #368]	; (8000bd0 <fsm_manual+0x2c4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	3b01      	subs	r3, #1
 8000a62:	4a5b      	ldr	r2, [pc, #364]	; (8000bd0 <fsm_manual+0x2c4>)
 8000a64:	6013      	str	r3, [r2, #0]

				displayLED7SEG(red, 0);
 8000a66:	4b56      	ldr	r3, [pc, #344]	; (8000bc0 <fsm_manual+0x2b4>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fc4f 	bl	8000310 <displayLED7SEG>
				displayLED7SEG(amber, 1);
 8000a72:	4b57      	ldr	r3, [pc, #348]	; (8000bd0 <fsm_manual+0x2c4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2101      	movs	r1, #1
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fc49 	bl	8000310 <displayLED7SEG>


				setTimer(0, 100);
 8000a7e:	2164      	movs	r1, #100	; 0x64
 8000a80:	2000      	movs	r0, #0
 8000a82:	f000 ffcb 	bl	8001a1c <setTimer>
			}
			if(isButtonPressed(1)){
 8000a86:	2001      	movs	r0, #1
 8000a88:	f7ff fb68 	bl	800015c <isButtonPressed>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d011      	beq.n	8000ab6 <fsm_manual+0x1aa>
				status = MAN_GREEN_RED;
 8000a92:	4b48      	ldr	r3, [pc, #288]	; (8000bb4 <fsm_manual+0x2a8>)
 8000a94:	220b      	movs	r2, #11
 8000a96:	601a      	str	r2, [r3, #0]
				setTimer(1, 100);
 8000a98:	2164      	movs	r1, #100	; 0x64
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f000 ffbe 	bl	8001a1c <setTimer>
				clearAllLed();
 8000aa0:	f001 f800 	bl	8001aa4 <clearAllLed>
				red = 10;
 8000aa4:	4b46      	ldr	r3, [pc, #280]	; (8000bc0 <fsm_manual+0x2b4>)
 8000aa6:	220a      	movs	r2, #10
 8000aa8:	601a      	str	r2, [r3, #0]
				green = 10;
 8000aaa:	4b47      	ldr	r3, [pc, #284]	; (8000bc8 <fsm_manual+0x2bc>)
 8000aac:	220a      	movs	r2, #10
 8000aae:	601a      	str	r2, [r3, #0]
				button_flag[1] = 0;
 8000ab0:	4b48      	ldr	r3, [pc, #288]	; (8000bd4 <fsm_manual+0x2c8>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	605a      	str	r2, [r3, #4]
			}
			if(isButtonPressed(0)){
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff fb50 	bl	800015c <isButtonPressed>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f000 80f9 	beq.w	8000cb6 <fsm_manual+0x3aa>
				status = MODE_2;
 8000ac4:	4b3b      	ldr	r3, [pc, #236]	; (8000bb4 <fsm_manual+0x2a8>)
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000aca:	f000 ffeb 	bl	8001aa4 <clearAllLed>
				setTimer(0, 1);
 8000ace:	2101      	movs	r1, #1
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f000 ffa3 	bl	8001a1c <setTimer>
				button_flag[0] = 0;
 8000ad6:	4b3f      	ldr	r3, [pc, #252]	; (8000bd4 <fsm_manual+0x2c8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
			}
			break;
 8000adc:	e0eb      	b.n	8000cb6 <fsm_manual+0x3aa>
		case MAN_GREEN_RED:
			led_green_red();
 8000ade:	f001 f825 	bl	8001b2c <led_green_red>
			if(timer_flag[0]){
 8000ae2:	4b35      	ldr	r3, [pc, #212]	; (8000bb8 <fsm_manual+0x2ac>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d019      	beq.n	8000b1e <fsm_manual+0x212>
				--red;
 8000aea:	4b35      	ldr	r3, [pc, #212]	; (8000bc0 <fsm_manual+0x2b4>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	4a33      	ldr	r2, [pc, #204]	; (8000bc0 <fsm_manual+0x2b4>)
 8000af2:	6013      	str	r3, [r2, #0]
				--green;
 8000af4:	4b34      	ldr	r3, [pc, #208]	; (8000bc8 <fsm_manual+0x2bc>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	4a33      	ldr	r2, [pc, #204]	; (8000bc8 <fsm_manual+0x2bc>)
 8000afc:	6013      	str	r3, [r2, #0]
				displayLED7SEG(green, 0);
 8000afe:	4b32      	ldr	r3, [pc, #200]	; (8000bc8 <fsm_manual+0x2bc>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fc03 	bl	8000310 <displayLED7SEG>
				displayLED7SEG(red, 1);
 8000b0a:	4b2d      	ldr	r3, [pc, #180]	; (8000bc0 <fsm_manual+0x2b4>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2101      	movs	r1, #1
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fbfd 	bl	8000310 <displayLED7SEG>
				setTimer(0, 100);
 8000b16:	2164      	movs	r1, #100	; 0x64
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f000 ff7f 	bl	8001a1c <setTimer>
			}
			if(timer_flag[1]){
 8000b1e:	4b26      	ldr	r3, [pc, #152]	; (8000bb8 <fsm_manual+0x2ac>)
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d019      	beq.n	8000b5a <fsm_manual+0x24e>
				status = RED_GREEN;
 8000b26:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <fsm_manual+0x2a8>)
 8000b28:	2205      	movs	r2, #5
 8000b2a:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000b2c:	f000 ffba 	bl	8001aa4 <clearAllLed>
				red = temp_red;
 8000b30:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <fsm_manual+0x2b0>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a22      	ldr	r2, [pc, #136]	; (8000bc0 <fsm_manual+0x2b4>)
 8000b36:	6013      	str	r3, [r2, #0]
				green = temp_green;
 8000b38:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <fsm_manual+0x2b8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a22      	ldr	r2, [pc, #136]	; (8000bc8 <fsm_manual+0x2bc>)
 8000b3e:	6013      	str	r3, [r2, #0]
				amber = temp_amber;
 8000b40:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <fsm_manual+0x2c0>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a22      	ldr	r2, [pc, #136]	; (8000bd0 <fsm_manual+0x2c4>)
 8000b46:	6013      	str	r3, [r2, #0]
				setTimer(1, green*100);
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <fsm_manual+0x2bc>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2264      	movs	r2, #100	; 0x64
 8000b4e:	fb02 f303 	mul.w	r3, r2, r3
 8000b52:	4619      	mov	r1, r3
 8000b54:	2001      	movs	r0, #1
 8000b56:	f000 ff61 	bl	8001a1c <setTimer>
			}
			if(isButtonPressed(1)){
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f7ff fafe 	bl	800015c <isButtonPressed>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d011      	beq.n	8000b8a <fsm_manual+0x27e>
				status = MAN_AMBER_RED;
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <fsm_manual+0x2a8>)
 8000b68:	220c      	movs	r2, #12
 8000b6a:	601a      	str	r2, [r3, #0]
				red = 10;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <fsm_manual+0x2b4>)
 8000b6e:	220a      	movs	r2, #10
 8000b70:	601a      	str	r2, [r3, #0]
				amber = 10;
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <fsm_manual+0x2c4>)
 8000b74:	220a      	movs	r2, #10
 8000b76:	601a      	str	r2, [r3, #0]
				setTimer(1, 100);
 8000b78:	2164      	movs	r1, #100	; 0x64
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f000 ff4e 	bl	8001a1c <setTimer>
				clearAllLed();
 8000b80:	f000 ff90 	bl	8001aa4 <clearAllLed>
				button_flag[1] = 0;
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <fsm_manual+0x2c8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	605a      	str	r2, [r3, #4]
			}
			if(isButtonPressed(0)){
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f7ff fae6 	bl	800015c <isButtonPressed>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f000 8091 	beq.w	8000cba <fsm_manual+0x3ae>
				status = MODE_2;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <fsm_manual+0x2a8>)
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000b9e:	f000 ff81 	bl	8001aa4 <clearAllLed>
				setTimer(0, 1);
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f000 ff39 	bl	8001a1c <setTimer>
				button_flag[0] = 0;
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <fsm_manual+0x2c8>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
			}
			break;
 8000bb0:	e083      	b.n	8000cba <fsm_manual+0x3ae>
 8000bb2:	bf00      	nop
 8000bb4:	20000108 	.word	0x20000108
 8000bb8:	2000011c 	.word	0x2000011c
 8000bbc:	20000040 	.word	0x20000040
 8000bc0:	20000034 	.word	0x20000034
 8000bc4:	20000048 	.word	0x20000048
 8000bc8:	2000003c 	.word	0x2000003c
 8000bcc:	20000044 	.word	0x20000044
 8000bd0:	20000038 	.word	0x20000038
 8000bd4:	200000f0 	.word	0x200000f0
		case MAN_AMBER_RED:
			led_amber_red();
 8000bd8:	f000 ffb8 	bl	8001b4c <led_amber_red>
			if(timer_flag[1]){
 8000bdc:	4b39      	ldr	r3, [pc, #228]	; (8000cc4 <fsm_manual+0x3b8>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d019      	beq.n	8000c18 <fsm_manual+0x30c>
				status = RED_GREEN;
 8000be4:	4b38      	ldr	r3, [pc, #224]	; (8000cc8 <fsm_manual+0x3bc>)
 8000be6:	2205      	movs	r2, #5
 8000be8:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000bea:	f000 ff5b 	bl	8001aa4 <clearAllLed>
				red = temp_red;
 8000bee:	4b37      	ldr	r3, [pc, #220]	; (8000ccc <fsm_manual+0x3c0>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a37      	ldr	r2, [pc, #220]	; (8000cd0 <fsm_manual+0x3c4>)
 8000bf4:	6013      	str	r3, [r2, #0]
				green = temp_green;
 8000bf6:	4b37      	ldr	r3, [pc, #220]	; (8000cd4 <fsm_manual+0x3c8>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a37      	ldr	r2, [pc, #220]	; (8000cd8 <fsm_manual+0x3cc>)
 8000bfc:	6013      	str	r3, [r2, #0]
				amber = temp_amber;
 8000bfe:	4b37      	ldr	r3, [pc, #220]	; (8000cdc <fsm_manual+0x3d0>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a37      	ldr	r2, [pc, #220]	; (8000ce0 <fsm_manual+0x3d4>)
 8000c04:	6013      	str	r3, [r2, #0]
				setTimer(1, green*100);
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <fsm_manual+0x3cc>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2264      	movs	r2, #100	; 0x64
 8000c0c:	fb02 f303 	mul.w	r3, r2, r3
 8000c10:	4619      	mov	r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	f000 ff02 	bl	8001a1c <setTimer>
			}
			if(timer_flag[0]){
 8000c18:	4b2a      	ldr	r3, [pc, #168]	; (8000cc4 <fsm_manual+0x3b8>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d01b      	beq.n	8000c58 <fsm_manual+0x34c>
				--red;
 8000c20:	4b2b      	ldr	r3, [pc, #172]	; (8000cd0 <fsm_manual+0x3c4>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	3b01      	subs	r3, #1
 8000c26:	4a2a      	ldr	r2, [pc, #168]	; (8000cd0 <fsm_manual+0x3c4>)
 8000c28:	6013      	str	r3, [r2, #0]
				--amber;
 8000c2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ce0 <fsm_manual+0x3d4>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	4a2b      	ldr	r2, [pc, #172]	; (8000ce0 <fsm_manual+0x3d4>)
 8000c32:	6013      	str	r3, [r2, #0]
				displayLED7SEG(amber, 0);
 8000c34:	4b2a      	ldr	r3, [pc, #168]	; (8000ce0 <fsm_manual+0x3d4>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fb68 	bl	8000310 <displayLED7SEG>
				displayLED7SEG(red, 1);
 8000c40:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <fsm_manual+0x3c4>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2101      	movs	r1, #1
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fb62 	bl	8000310 <displayLED7SEG>
				controlTime_led();
 8000c4c:	f000 ff8e 	bl	8001b6c <controlTime_led>
				setTimer(0, 100);
 8000c50:	2164      	movs	r1, #100	; 0x64
 8000c52:	2000      	movs	r0, #0
 8000c54:	f000 fee2 	bl	8001a1c <setTimer>
			}
			if(isButtonPressed(1)){
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f7ff fa7f 	bl	800015c <isButtonPressed>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d011      	beq.n	8000c88 <fsm_manual+0x37c>
				status = MAN_RED_GREEN;
 8000c64:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <fsm_manual+0x3bc>)
 8000c66:	2209      	movs	r2, #9
 8000c68:	601a      	str	r2, [r3, #0]
				setTimer(1, 100);
 8000c6a:	2164      	movs	r1, #100	; 0x64
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f000 fed5 	bl	8001a1c <setTimer>
				clearAllLed();
 8000c72:	f000 ff17 	bl	8001aa4 <clearAllLed>
				red = 10;
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <fsm_manual+0x3c4>)
 8000c78:	220a      	movs	r2, #10
 8000c7a:	601a      	str	r2, [r3, #0]
				green = 10;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <fsm_manual+0x3cc>)
 8000c7e:	220a      	movs	r2, #10
 8000c80:	601a      	str	r2, [r3, #0]
				button_flag[1] = 0;
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <fsm_manual+0x3d8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	605a      	str	r2, [r3, #4]
			}
			if(isButtonPressed(0)){
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f7ff fa67 	bl	800015c <isButtonPressed>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d014      	beq.n	8000cbe <fsm_manual+0x3b2>
				status = MODE_2;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <fsm_manual+0x3bc>)
 8000c96:	2202      	movs	r2, #2
 8000c98:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000c9a:	f000 ff03 	bl	8001aa4 <clearAllLed>
				setTimer(0, 1);
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f000 febb 	bl	8001a1c <setTimer>
				button_flag[0] = 0;
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <fsm_manual+0x3d8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
			}
			break;
 8000cac:	e007      	b.n	8000cbe <fsm_manual+0x3b2>
		default: break;
 8000cae:	bf00      	nop
 8000cb0:	e006      	b.n	8000cc0 <fsm_manual+0x3b4>
			break;
 8000cb2:	bf00      	nop
 8000cb4:	e004      	b.n	8000cc0 <fsm_manual+0x3b4>
			break;
 8000cb6:	bf00      	nop
 8000cb8:	e002      	b.n	8000cc0 <fsm_manual+0x3b4>
			break;
 8000cba:	bf00      	nop
 8000cbc:	e000      	b.n	8000cc0 <fsm_manual+0x3b4>
			break;
 8000cbe:	bf00      	nop
	}
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	2000011c 	.word	0x2000011c
 8000cc8:	20000108 	.word	0x20000108
 8000ccc:	20000040 	.word	0x20000040
 8000cd0:	20000034 	.word	0x20000034
 8000cd4:	20000048 	.word	0x20000048
 8000cd8:	2000003c 	.word	0x2000003c
 8000cdc:	20000044 	.word	0x20000044
 8000ce0:	20000038 	.word	0x20000038
 8000ce4:	200000f0 	.word	0x200000f0

08000ce8 <fsm_setting>:
 *      Author: pc
 */

#include "fsm_setting.h"

void fsm_setting(){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	switch(status){
 8000cec:	4b9a      	ldr	r3, [pc, #616]	; (8000f58 <fsm_setting+0x270>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	f200 81f0 	bhi.w	80010d8 <fsm_setting+0x3f0>
 8000cf8:	a201      	add	r2, pc, #4	; (adr r2, 8000d00 <fsm_setting+0x18>)
 8000cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfe:	bf00      	nop
 8000d00:	08000d11 	.word	0x08000d11
 8000d04:	08000d19 	.word	0x08000d19
 8000d08:	08000e63 	.word	0x08000e63
 8000d0c:	08000fbb 	.word	0x08000fbb
		case MODE_1:
			status = INIT;
 8000d10:	4b91      	ldr	r3, [pc, #580]	; (8000f58 <fsm_setting+0x270>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
			break;
 8000d16:	e1e6      	b.n	80010e6 <fsm_setting+0x3fe>
		case MODE_2:
			displayLED7SEG(status, 1);
 8000d18:	4b8f      	ldr	r3, [pc, #572]	; (8000f58 <fsm_setting+0x270>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff faf6 	bl	8000310 <displayLED7SEG>
			displayLED7SEG(adj_red, 0);
 8000d24:	4b8d      	ldr	r3, [pc, #564]	; (8000f5c <fsm_setting+0x274>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff faf0 	bl	8000310 <displayLED7SEG>
			if(timer_flag[0]){
 8000d30:	4b8b      	ldr	r3, [pc, #556]	; (8000f60 <fsm_setting+0x278>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d008      	beq.n	8000d4a <fsm_setting+0x62>
				blinkingLed(status);
 8000d38:	4b87      	ldr	r3, [pc, #540]	; (8000f58 <fsm_setting+0x270>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 ff3f 	bl	8001bc0 <blinkingLed>
				setTimer(0, 50);
 8000d42:	2132      	movs	r1, #50	; 0x32
 8000d44:	2000      	movs	r0, #0
 8000d46:	f000 fe69 	bl	8001a1c <setTimer>
			}
			if(isButtonPressed(0)){
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff fa06 	bl	800015c <isButtonPressed>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d007      	beq.n	8000d66 <fsm_setting+0x7e>
				status = MODE_3;
 8000d56:	4b80      	ldr	r3, [pc, #512]	; (8000f58 <fsm_setting+0x270>)
 8000d58:	2203      	movs	r2, #3
 8000d5a:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000d5c:	f000 fea2 	bl	8001aa4 <clearAllLed>
				button_flag[0] = 0;
 8000d60:	4b80      	ldr	r3, [pc, #512]	; (8000f64 <fsm_setting+0x27c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(1)){
 8000d66:	2001      	movs	r0, #1
 8000d68:	f7ff f9f8 	bl	800015c <isButtonPressed>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d014      	beq.n	8000d9c <fsm_setting+0xb4>
				button_flag[1] = 0;
 8000d72:	4b7c      	ldr	r3, [pc, #496]	; (8000f64 <fsm_setting+0x27c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	605a      	str	r2, [r3, #4]
				adj_red++;
 8000d78:	4b78      	ldr	r3, [pc, #480]	; (8000f5c <fsm_setting+0x274>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	4a77      	ldr	r2, [pc, #476]	; (8000f5c <fsm_setting+0x274>)
 8000d80:	6013      	str	r3, [r2, #0]
				if(adj_red == 100)
 8000d82:	4b76      	ldr	r3, [pc, #472]	; (8000f5c <fsm_setting+0x274>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b64      	cmp	r3, #100	; 0x64
 8000d88:	d102      	bne.n	8000d90 <fsm_setting+0xa8>
					adj_red = 1;
 8000d8a:	4b74      	ldr	r3, [pc, #464]	; (8000f5c <fsm_setting+0x274>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]
				displayLED7SEG(adj_red, 0);
 8000d90:	4b72      	ldr	r3, [pc, #456]	; (8000f5c <fsm_setting+0x274>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff faba 	bl	8000310 <displayLED7SEG>
			}
			if(isButtonPressed(2)){
 8000d9c:	2002      	movs	r0, #2
 8000d9e:	f7ff f9dd 	bl	800015c <isButtonPressed>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f000 8199 	beq.w	80010dc <fsm_setting+0x3f4>
				button_flag[2] = 0;
 8000daa:	4b6e      	ldr	r3, [pc, #440]	; (8000f64 <fsm_setting+0x27c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
				if(adj_red > 2 && adj_red < 98){
 8000db0:	4b6a      	ldr	r3, [pc, #424]	; (8000f5c <fsm_setting+0x274>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	dd35      	ble.n	8000e24 <fsm_setting+0x13c>
 8000db8:	4b68      	ldr	r3, [pc, #416]	; (8000f5c <fsm_setting+0x274>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b61      	cmp	r3, #97	; 0x61
 8000dbe:	dc31      	bgt.n	8000e24 <fsm_setting+0x13c>
					amber = ((temp_green < adj_red) ? (adj_red - temp_green) : temp_amber);
 8000dc0:	4b69      	ldr	r3, [pc, #420]	; (8000f68 <fsm_setting+0x280>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b65      	ldr	r3, [pc, #404]	; (8000f5c <fsm_setting+0x274>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	da05      	bge.n	8000dd8 <fsm_setting+0xf0>
 8000dcc:	4b63      	ldr	r3, [pc, #396]	; (8000f5c <fsm_setting+0x274>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b65      	ldr	r3, [pc, #404]	; (8000f68 <fsm_setting+0x280>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	e001      	b.n	8000ddc <fsm_setting+0xf4>
 8000dd8:	4b64      	ldr	r3, [pc, #400]	; (8000f6c <fsm_setting+0x284>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a64      	ldr	r2, [pc, #400]	; (8000f70 <fsm_setting+0x288>)
 8000dde:	6013      	str	r3, [r2, #0]

					if(green + amber < 100){
 8000de0:	4b64      	ldr	r3, [pc, #400]	; (8000f74 <fsm_setting+0x28c>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b62      	ldr	r3, [pc, #392]	; (8000f70 <fsm_setting+0x288>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4413      	add	r3, r2
 8000dea:	2b63      	cmp	r3, #99	; 0x63
 8000dec:	dc17      	bgt.n	8000e1e <fsm_setting+0x136>
						green = adj_red - amber;
 8000dee:	4b5b      	ldr	r3, [pc, #364]	; (8000f5c <fsm_setting+0x274>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4b5f      	ldr	r3, [pc, #380]	; (8000f70 <fsm_setting+0x288>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	4a5e      	ldr	r2, [pc, #376]	; (8000f74 <fsm_setting+0x28c>)
 8000dfa:	6013      	str	r3, [r2, #0]
						red = adj_red;
 8000dfc:	4b57      	ldr	r3, [pc, #348]	; (8000f5c <fsm_setting+0x274>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a5d      	ldr	r2, [pc, #372]	; (8000f78 <fsm_setting+0x290>)
 8000e02:	6013      	str	r3, [r2, #0]

						temp_red = red;
 8000e04:	4b5c      	ldr	r3, [pc, #368]	; (8000f78 <fsm_setting+0x290>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a5c      	ldr	r2, [pc, #368]	; (8000f7c <fsm_setting+0x294>)
 8000e0a:	6013      	str	r3, [r2, #0]
						temp_amber = amber;
 8000e0c:	4b58      	ldr	r3, [pc, #352]	; (8000f70 <fsm_setting+0x288>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a56      	ldr	r2, [pc, #344]	; (8000f6c <fsm_setting+0x284>)
 8000e12:	6013      	str	r3, [r2, #0]
						temp_green = green;
 8000e14:	4b57      	ldr	r3, [pc, #348]	; (8000f74 <fsm_setting+0x28c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a53      	ldr	r2, [pc, #332]	; (8000f68 <fsm_setting+0x280>)
 8000e1a:	6013      	str	r3, [r2, #0]
					if(green + amber < 100){
 8000e1c:	e00e      	b.n	8000e3c <fsm_setting+0x154>
					}
					else{
						reTime();
 8000e1e:	f000 f979 	bl	8001114 <reTime>
					if(green + amber < 100){
 8000e22:	e00b      	b.n	8000e3c <fsm_setting+0x154>
					}
				}
				else{
					red = max_red;
 8000e24:	4b56      	ldr	r3, [pc, #344]	; (8000f80 <fsm_setting+0x298>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a53      	ldr	r2, [pc, #332]	; (8000f78 <fsm_setting+0x290>)
 8000e2a:	6013      	str	r3, [r2, #0]
					amber = max_amber;
 8000e2c:	4b55      	ldr	r3, [pc, #340]	; (8000f84 <fsm_setting+0x29c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a4f      	ldr	r2, [pc, #316]	; (8000f70 <fsm_setting+0x288>)
 8000e32:	6013      	str	r3, [r2, #0]
					green = max_green;
 8000e34:	4b54      	ldr	r3, [pc, #336]	; (8000f88 <fsm_setting+0x2a0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a4e      	ldr	r2, [pc, #312]	; (8000f74 <fsm_setting+0x28c>)
 8000e3a:	6013      	str	r3, [r2, #0]
				}
				clearAllLed();
 8000e3c:	f000 fe32 	bl	8001aa4 <clearAllLed>
				status = RED_GREEN;
 8000e40:	4b45      	ldr	r3, [pc, #276]	; (8000f58 <fsm_setting+0x270>)
 8000e42:	2205      	movs	r2, #5
 8000e44:	601a      	str	r2, [r3, #0]
				setTimer(1, green*100);
 8000e46:	4b4b      	ldr	r3, [pc, #300]	; (8000f74 <fsm_setting+0x28c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2264      	movs	r2, #100	; 0x64
 8000e4c:	fb02 f303 	mul.w	r3, r2, r3
 8000e50:	4619      	mov	r1, r3
 8000e52:	2001      	movs	r0, #1
 8000e54:	f000 fde2 	bl	8001a1c <setTimer>
				setTimer(0, 1);
 8000e58:	2101      	movs	r1, #1
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f000 fdde 	bl	8001a1c <setTimer>
			}
			break;
 8000e60:	e13c      	b.n	80010dc <fsm_setting+0x3f4>
		case MODE_3:
			displayLED7SEG(status, 1);
 8000e62:	4b3d      	ldr	r3, [pc, #244]	; (8000f58 <fsm_setting+0x270>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2101      	movs	r1, #1
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fa51 	bl	8000310 <displayLED7SEG>
			displayLED7SEG(adj_amber, 0);
 8000e6e:	4b47      	ldr	r3, [pc, #284]	; (8000f8c <fsm_setting+0x2a4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fa4b 	bl	8000310 <displayLED7SEG>
			if(timer_flag[0]){
 8000e7a:	4b39      	ldr	r3, [pc, #228]	; (8000f60 <fsm_setting+0x278>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d008      	beq.n	8000e94 <fsm_setting+0x1ac>
				blinkingLed(status);
 8000e82:	4b35      	ldr	r3, [pc, #212]	; (8000f58 <fsm_setting+0x270>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 fe9a 	bl	8001bc0 <blinkingLed>
				setTimer(0, 50);
 8000e8c:	2132      	movs	r1, #50	; 0x32
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f000 fdc4 	bl	8001a1c <setTimer>
			}
			if(isButtonPressed(0)){
 8000e94:	2000      	movs	r0, #0
 8000e96:	f7ff f961 	bl	800015c <isButtonPressed>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d007      	beq.n	8000eb0 <fsm_setting+0x1c8>
				status = MODE_4;
 8000ea0:	4b2d      	ldr	r3, [pc, #180]	; (8000f58 <fsm_setting+0x270>)
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000ea6:	f000 fdfd 	bl	8001aa4 <clearAllLed>
				button_flag[0] = 0;
 8000eaa:	4b2e      	ldr	r3, [pc, #184]	; (8000f64 <fsm_setting+0x27c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(1)){
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f7ff f953 	bl	800015c <isButtonPressed>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d014      	beq.n	8000ee6 <fsm_setting+0x1fe>
				button_flag[1] = 0;
 8000ebc:	4b29      	ldr	r3, [pc, #164]	; (8000f64 <fsm_setting+0x27c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	605a      	str	r2, [r3, #4]
				adj_amber++;
 8000ec2:	4b32      	ldr	r3, [pc, #200]	; (8000f8c <fsm_setting+0x2a4>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	4a30      	ldr	r2, [pc, #192]	; (8000f8c <fsm_setting+0x2a4>)
 8000eca:	6013      	str	r3, [r2, #0]
				if(adj_amber == 100)
 8000ecc:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <fsm_setting+0x2a4>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b64      	cmp	r3, #100	; 0x64
 8000ed2:	d102      	bne.n	8000eda <fsm_setting+0x1f2>
					adj_amber = 1;
 8000ed4:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <fsm_setting+0x2a4>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	601a      	str	r2, [r3, #0]
				displayLED7SEG(adj_amber, 0);
 8000eda:	4b2c      	ldr	r3, [pc, #176]	; (8000f8c <fsm_setting+0x2a4>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fa15 	bl	8000310 <displayLED7SEG>
			}
			if(isButtonPressed(2)){
 8000ee6:	2002      	movs	r0, #2
 8000ee8:	f7ff f938 	bl	800015c <isButtonPressed>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f000 80f6 	beq.w	80010e0 <fsm_setting+0x3f8>
				button_flag[2] = 0;
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <fsm_setting+0x27c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
				green = ((adj_amber < temp_red) ? (temp_red - adj_amber) : temp_green);
 8000efa:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <fsm_setting+0x2a4>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <fsm_setting+0x294>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	da05      	bge.n	8000f12 <fsm_setting+0x22a>
 8000f06:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <fsm_setting+0x294>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <fsm_setting+0x2a4>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	e001      	b.n	8000f16 <fsm_setting+0x22e>
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <fsm_setting+0x280>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a17      	ldr	r2, [pc, #92]	; (8000f74 <fsm_setting+0x28c>)
 8000f18:	6013      	str	r3, [r2, #0]


				if((green + adj_amber) < 100){
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <fsm_setting+0x28c>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <fsm_setting+0x2a4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	2b63      	cmp	r3, #99	; 0x63
 8000f26:	dc33      	bgt.n	8000f90 <fsm_setting+0x2a8>
					red = green + adj_amber;
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <fsm_setting+0x28c>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <fsm_setting+0x2a4>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4413      	add	r3, r2
 8000f32:	4a11      	ldr	r2, [pc, #68]	; (8000f78 <fsm_setting+0x290>)
 8000f34:	6013      	str	r3, [r2, #0]
					amber = adj_amber;
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <fsm_setting+0x2a4>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a0d      	ldr	r2, [pc, #52]	; (8000f70 <fsm_setting+0x288>)
 8000f3c:	6013      	str	r3, [r2, #0]
					temp_red = red;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <fsm_setting+0x290>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <fsm_setting+0x294>)
 8000f44:	6013      	str	r3, [r2, #0]
					temp_amber = amber;
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <fsm_setting+0x288>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <fsm_setting+0x284>)
 8000f4c:	6013      	str	r3, [r2, #0]
					temp_green = green;
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <fsm_setting+0x28c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <fsm_setting+0x280>)
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	e01d      	b.n	8000f94 <fsm_setting+0x2ac>
 8000f58:	20000108 	.word	0x20000108
 8000f5c:	20000058 	.word	0x20000058
 8000f60:	2000011c 	.word	0x2000011c
 8000f64:	200000f0 	.word	0x200000f0
 8000f68:	20000048 	.word	0x20000048
 8000f6c:	20000044 	.word	0x20000044
 8000f70:	20000038 	.word	0x20000038
 8000f74:	2000003c 	.word	0x2000003c
 8000f78:	20000034 	.word	0x20000034
 8000f7c:	20000040 	.word	0x20000040
 8000f80:	2000004c 	.word	0x2000004c
 8000f84:	20000050 	.word	0x20000050
 8000f88:	20000054 	.word	0x20000054
 8000f8c:	2000005c 	.word	0x2000005c
				}
				else{
					reTime();
 8000f90:	f000 f8c0 	bl	8001114 <reTime>
				}
				clearAllLed();
 8000f94:	f000 fd86 	bl	8001aa4 <clearAllLed>
				status = RED_GREEN;
 8000f98:	4b54      	ldr	r3, [pc, #336]	; (80010ec <fsm_setting+0x404>)
 8000f9a:	2205      	movs	r2, #5
 8000f9c:	601a      	str	r2, [r3, #0]
				setTimer(1, green*100);
 8000f9e:	4b54      	ldr	r3, [pc, #336]	; (80010f0 <fsm_setting+0x408>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2264      	movs	r2, #100	; 0x64
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	4619      	mov	r1, r3
 8000faa:	2001      	movs	r0, #1
 8000fac:	f000 fd36 	bl	8001a1c <setTimer>
				setTimer(0, 1);
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f000 fd32 	bl	8001a1c <setTimer>
			}
			break;
 8000fb8:	e092      	b.n	80010e0 <fsm_setting+0x3f8>
		case MODE_4:
			displayLED7SEG(status, 1);
 8000fba:	4b4c      	ldr	r3, [pc, #304]	; (80010ec <fsm_setting+0x404>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff f9a5 	bl	8000310 <displayLED7SEG>
			displayLED7SEG(adj_green, 0);
 8000fc6:	4b4b      	ldr	r3, [pc, #300]	; (80010f4 <fsm_setting+0x40c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff f99f 	bl	8000310 <displayLED7SEG>
			if(timer_flag[0]){
 8000fd2:	4b49      	ldr	r3, [pc, #292]	; (80010f8 <fsm_setting+0x410>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d008      	beq.n	8000fec <fsm_setting+0x304>
				blinkingLed(status);
 8000fda:	4b44      	ldr	r3, [pc, #272]	; (80010ec <fsm_setting+0x404>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fdee 	bl	8001bc0 <blinkingLed>
				setTimer(0, 50);
 8000fe4:	2132      	movs	r1, #50	; 0x32
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 fd18 	bl	8001a1c <setTimer>
			}
			if(isButtonPressed(0)){
 8000fec:	2000      	movs	r0, #0
 8000fee:	f7ff f8b5 	bl	800015c <isButtonPressed>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d007      	beq.n	8001008 <fsm_setting+0x320>
				status = MODE_1;
 8000ff8:	4b3c      	ldr	r3, [pc, #240]	; (80010ec <fsm_setting+0x404>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000ffe:	f000 fd51 	bl	8001aa4 <clearAllLed>
				button_flag[0] = 0;
 8001002:	4b3e      	ldr	r3, [pc, #248]	; (80010fc <fsm_setting+0x414>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(1)){
 8001008:	2001      	movs	r0, #1
 800100a:	f7ff f8a7 	bl	800015c <isButtonPressed>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d014      	beq.n	800103e <fsm_setting+0x356>
				button_flag[1] = 0;
 8001014:	4b39      	ldr	r3, [pc, #228]	; (80010fc <fsm_setting+0x414>)
 8001016:	2200      	movs	r2, #0
 8001018:	605a      	str	r2, [r3, #4]
				adj_green++;
 800101a:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <fsm_setting+0x40c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	3301      	adds	r3, #1
 8001020:	4a34      	ldr	r2, [pc, #208]	; (80010f4 <fsm_setting+0x40c>)
 8001022:	6013      	str	r3, [r2, #0]
				if(adj_green == 100)
 8001024:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <fsm_setting+0x40c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b64      	cmp	r3, #100	; 0x64
 800102a:	d102      	bne.n	8001032 <fsm_setting+0x34a>
					adj_green = 1;
 800102c:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <fsm_setting+0x40c>)
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]
				displayLED7SEG(adj_green, 0);
 8001032:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <fsm_setting+0x40c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff f969 	bl	8000310 <displayLED7SEG>
			}
			if(isButtonPressed(2)){
 800103e:	2002      	movs	r0, #2
 8001040:	f7ff f88c 	bl	800015c <isButtonPressed>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d04c      	beq.n	80010e4 <fsm_setting+0x3fc>
				button_flag[2] = 0;
 800104a:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <fsm_setting+0x414>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
				amber = ((adj_green < temp_red) ? (temp_red - adj_green) : temp_amber);
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <fsm_setting+0x40c>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <fsm_setting+0x418>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	429a      	cmp	r2, r3
 800105a:	da05      	bge.n	8001068 <fsm_setting+0x380>
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <fsm_setting+0x418>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <fsm_setting+0x40c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	e001      	b.n	800106c <fsm_setting+0x384>
 8001068:	4b26      	ldr	r3, [pc, #152]	; (8001104 <fsm_setting+0x41c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a26      	ldr	r2, [pc, #152]	; (8001108 <fsm_setting+0x420>)
 800106e:	6013      	str	r3, [r2, #0]

				if(adj_green + amber < 100){
 8001070:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <fsm_setting+0x40c>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <fsm_setting+0x420>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4413      	add	r3, r2
 800107a:	2b63      	cmp	r3, #99	; 0x63
 800107c:	dc17      	bgt.n	80010ae <fsm_setting+0x3c6>
					red = adj_green + amber;
 800107e:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <fsm_setting+0x40c>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <fsm_setting+0x420>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4413      	add	r3, r2
 8001088:	4a20      	ldr	r2, [pc, #128]	; (800110c <fsm_setting+0x424>)
 800108a:	6013      	str	r3, [r2, #0]
					green = adj_green;
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <fsm_setting+0x40c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a17      	ldr	r2, [pc, #92]	; (80010f0 <fsm_setting+0x408>)
 8001092:	6013      	str	r3, [r2, #0]
					temp_red = red;
 8001094:	4b1d      	ldr	r3, [pc, #116]	; (800110c <fsm_setting+0x424>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a19      	ldr	r2, [pc, #100]	; (8001100 <fsm_setting+0x418>)
 800109a:	6013      	str	r3, [r2, #0]
					temp_amber = amber;
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <fsm_setting+0x420>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a18      	ldr	r2, [pc, #96]	; (8001104 <fsm_setting+0x41c>)
 80010a2:	6013      	str	r3, [r2, #0]
					temp_green = green;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <fsm_setting+0x408>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a19      	ldr	r2, [pc, #100]	; (8001110 <fsm_setting+0x428>)
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	e001      	b.n	80010b2 <fsm_setting+0x3ca>
				}
				else{
					reTime();
 80010ae:	f000 f831 	bl	8001114 <reTime>
				}
				clearAllLed();
 80010b2:	f000 fcf7 	bl	8001aa4 <clearAllLed>
				status = RED_GREEN;
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <fsm_setting+0x404>)
 80010b8:	2205      	movs	r2, #5
 80010ba:	601a      	str	r2, [r3, #0]
				setTimer(1, green*100);
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <fsm_setting+0x408>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2264      	movs	r2, #100	; 0x64
 80010c2:	fb02 f303 	mul.w	r3, r2, r3
 80010c6:	4619      	mov	r1, r3
 80010c8:	2001      	movs	r0, #1
 80010ca:	f000 fca7 	bl	8001a1c <setTimer>
				setTimer(0, 1);
 80010ce:	2101      	movs	r1, #1
 80010d0:	2000      	movs	r0, #0
 80010d2:	f000 fca3 	bl	8001a1c <setTimer>
			}
			break;
 80010d6:	e005      	b.n	80010e4 <fsm_setting+0x3fc>
		default:
			break;
 80010d8:	bf00      	nop
 80010da:	e004      	b.n	80010e6 <fsm_setting+0x3fe>
			break;
 80010dc:	bf00      	nop
 80010de:	e002      	b.n	80010e6 <fsm_setting+0x3fe>
			break;
 80010e0:	bf00      	nop
 80010e2:	e000      	b.n	80010e6 <fsm_setting+0x3fe>
			break;
 80010e4:	bf00      	nop
	}
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000108 	.word	0x20000108
 80010f0:	2000003c 	.word	0x2000003c
 80010f4:	20000060 	.word	0x20000060
 80010f8:	2000011c 	.word	0x2000011c
 80010fc:	200000f0 	.word	0x200000f0
 8001100:	20000040 	.word	0x20000040
 8001104:	20000044 	.word	0x20000044
 8001108:	20000038 	.word	0x20000038
 800110c:	20000034 	.word	0x20000034
 8001110:	20000048 	.word	0x20000048

08001114 <reTime>:
int max_green = 3;
int adj_red = 1;
int adj_amber = 1;
int adj_green = 1;

void reTime(){
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
red = max_red;
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <reTime+0x3c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <reTime+0x40>)
 800111e:	6013      	str	r3, [r2, #0]
amber = max_amber;
 8001120:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <reTime+0x44>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0d      	ldr	r2, [pc, #52]	; (800115c <reTime+0x48>)
 8001126:	6013      	str	r3, [r2, #0]
green = max_green;
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <reTime+0x4c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <reTime+0x50>)
 800112e:	6013      	str	r3, [r2, #0]
temp_red = red;
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <reTime+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0c      	ldr	r2, [pc, #48]	; (8001168 <reTime+0x54>)
 8001136:	6013      	str	r3, [r2, #0]
temp_amber = amber;
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <reTime+0x48>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0b      	ldr	r2, [pc, #44]	; (800116c <reTime+0x58>)
 800113e:	6013      	str	r3, [r2, #0]
temp_green = green;
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <reTime+0x50>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <reTime+0x5c>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	2000004c 	.word	0x2000004c
 8001154:	20000034 	.word	0x20000034
 8001158:	20000050 	.word	0x20000050
 800115c:	20000038 	.word	0x20000038
 8001160:	20000054 	.word	0x20000054
 8001164:	2000003c 	.word	0x2000003c
 8001168:	20000040 	.word	0x20000040
 800116c:	20000044 	.word	0x20000044
 8001170:	20000048 	.word	0x20000048

08001174 <writeMessage>:
//void toggleLedPurple(){
//	HAL_GPIO_TogglePin(LED_PURPLE_GPIO_Port, LED_PURPLE_Pin);
//}

// write to uart for debugging as well as print time stamp
void writeMessage(char * str){
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1 , (void *)str, strlen(str), 10);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7fe ffe5 	bl	800014c <strlen>
 8001182:	4603      	mov	r3, r0
 8001184:	b29a      	uxth	r2, r3
 8001186:	230a      	movs	r3, #10
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	4803      	ldr	r0, [pc, #12]	; (8001198 <writeMessage+0x24>)
 800118c:	f002 f990 	bl	80034b0 <HAL_UART_Transmit>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000174 	.word	0x20000174

0800119c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a0:	f000 fd68 	bl	8001c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a4:	f000 f826 	bl	80011f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80011a8:	f000 f860 	bl	800126c <MX_TIM2_Init>
  MX_GPIO_Init();
 80011ac:	f000 f8d4 	bl	8001358 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011b0:	f000 f8a8 	bl	8001304 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80011b4:	480b      	ldr	r0, [pc, #44]	; (80011e4 <main+0x48>)
 80011b6:	f001 fd9f 	bl	8002cf8 <HAL_TIM_Base_Start_IT>
    schedulerInit();
 80011ba:	f000 f945 	bl	8001448 <schedulerInit>
//    schedulerAddTask(toggleLedYellow, 51, 100); // 1 second period task
//    schedulerAddTask(toggleLedGreen, 52, 150);	// 1.5 second period task
//    schedulerAddTask(toggleLedBlue, 53, 200); // 2 second per3.iod task
//    schedulerAddTask(toggleLedWhite, 54, 250); // 2.5 second period task

    	schedulerAddTask(fsm_manual, 50, 1);      // 50 * 10 ms = 500 ms period
 80011be:	2201      	movs	r2, #1
 80011c0:	2132      	movs	r1, #50	; 0x32
 80011c2:	4809      	ldr	r0, [pc, #36]	; (80011e8 <main+0x4c>)
 80011c4:	f000 fa84 	bl	80016d0 <schedulerAddTask>
        schedulerAddTask(fsm_setting, 51, 1);     // 1 second period task
 80011c8:	2201      	movs	r2, #1
 80011ca:	2133      	movs	r1, #51	; 0x33
 80011cc:	4807      	ldr	r0, [pc, #28]	; (80011ec <main+0x50>)
 80011ce:	f000 fa7f 	bl	80016d0 <schedulerAddTask>
        schedulerAddTask(fsm_automatic, 52, 1);   // 1.5 second period task
 80011d2:	2201      	movs	r2, #1
 80011d4:	2134      	movs	r1, #52	; 0x34
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <main+0x54>)
 80011d8:	f000 fa7a 	bl	80016d0 <schedulerAddTask>
  /* USER CODE BEGIN WHILE */
// co
  while (1)
  {
    /* USER CODE END WHILE */
  schedulerDispatcher();
 80011dc:	f000 fab0 	bl	8001740 <schedulerDispatcher>
 80011e0:	e7fc      	b.n	80011dc <main+0x40>
 80011e2:	bf00      	nop
 80011e4:	200001bc 	.word	0x200001bc
 80011e8:	0800090d 	.word	0x0800090d
 80011ec:	08000ce9 	.word	0x08000ce9
 80011f0:	080004d5 	.word	0x080004d5

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b090      	sub	sp, #64	; 0x40
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0318 	add.w	r3, r7, #24
 80011fe:	2228      	movs	r2, #40	; 0x28
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f002 ff54 	bl	80040b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001216:	2302      	movs	r3, #2
 8001218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800121a:	2301      	movs	r3, #1
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800121e:	2310      	movs	r3, #16
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001222:	2300      	movs	r3, #0
 8001224:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001226:	f107 0318 	add.w	r3, r7, #24
 800122a:	4618      	mov	r0, r3
 800122c:	f001 f906 	bl	800243c <HAL_RCC_OscConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001236:	f000 f901 	bl	800143c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123a:	230f      	movs	r3, #15
 800123c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f001 fb72 	bl	800293c <HAL_RCC_ClockConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800125e:	f000 f8ed 	bl	800143c <Error_Handler>
  }
}
 8001262:	bf00      	nop
 8001264:	3740      	adds	r7, #64	; 0x40
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	463b      	mov	r3, r7
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001288:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <MX_TIM2_Init+0x94>)
 800128a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800128e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <MX_TIM2_Init+0x94>)
 8001292:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001296:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <MX_TIM2_Init+0x94>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_TIM2_Init+0x94>)
 80012a0:	2209      	movs	r2, #9
 80012a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <MX_TIM2_Init+0x94>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <MX_TIM2_Init+0x94>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012b0:	4813      	ldr	r0, [pc, #76]	; (8001300 <MX_TIM2_Init+0x94>)
 80012b2:	f001 fcd1 	bl	8002c58 <HAL_TIM_Base_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012bc:	f000 f8be 	bl	800143c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	4619      	mov	r1, r3
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <MX_TIM2_Init+0x94>)
 80012ce:	f001 fe4f 	bl	8002f70 <HAL_TIM_ConfigClockSource>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012d8:	f000 f8b0 	bl	800143c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_TIM2_Init+0x94>)
 80012ea:	f002 f827 	bl	800333c <HAL_TIMEx_MasterConfigSynchronization>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012f4:	f000 f8a2 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200001bc 	.word	0x200001bc

08001304 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 800130a:	4a12      	ldr	r2, [pc, #72]	; (8001354 <MX_USART1_UART_Init+0x50>)
 800130c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001310:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001314:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 800133c:	f002 f868 	bl	8003410 <HAL_UART_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001346:	f000 f879 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000174 	.word	0x20000174
 8001354:	40013800 	.word	0x40013800

08001358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136c:	4b29      	ldr	r3, [pc, #164]	; (8001414 <MX_GPIO_Init+0xbc>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	4a28      	ldr	r2, [pc, #160]	; (8001414 <MX_GPIO_Init+0xbc>)
 8001372:	f043 0304 	orr.w	r3, r3, #4
 8001376:	6193      	str	r3, [r2, #24]
 8001378:	4b26      	ldr	r3, [pc, #152]	; (8001414 <MX_GPIO_Init+0xbc>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001384:	4b23      	ldr	r3, [pc, #140]	; (8001414 <MX_GPIO_Init+0xbc>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a22      	ldr	r2, [pc, #136]	; (8001414 <MX_GPIO_Init+0xbc>)
 800138a:	f043 0308 	orr.w	r3, r3, #8
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b20      	ldr	r3, [pc, #128]	; (8001414 <MX_GPIO_Init+0xbc>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	603b      	str	r3, [r7, #0]
 800139a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800139c:	2200      	movs	r2, #0
 800139e:	f647 013e 	movw	r1, #30782	; 0x783e
 80013a2:	481d      	ldr	r0, [pc, #116]	; (8001418 <MX_GPIO_Init+0xc0>)
 80013a4:	f001 f819 	bl	80023da <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80013a8:	2200      	movs	r2, #0
 80013aa:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80013ae:	481b      	ldr	r0, [pc, #108]	; (800141c <MX_GPIO_Init+0xc4>)
 80013b0:	f001 f813 	bl	80023da <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA11 PA12 PA13
                           PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80013b4:	f647 033e 	movw	r3, #30782	; 0x783e
 80013b8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ba:	2301      	movs	r3, #1
 80013bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2302      	movs	r3, #2
 80013c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	4619      	mov	r1, r3
 80013cc:	4812      	ldr	r0, [pc, #72]	; (8001418 <MX_GPIO_Init+0xc0>)
 80013ce:	f000 fe73 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80013d2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80013d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 0308 	add.w	r3, r7, #8
 80013e4:	4619      	mov	r1, r3
 80013e6:	480c      	ldr	r0, [pc, #48]	; (8001418 <MX_GPIO_Init+0xc0>)
 80013e8:	f000 fe66 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80013ec:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80013f0:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2302      	movs	r3, #2
 80013fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fe:	f107 0308 	add.w	r3, r7, #8
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_GPIO_Init+0xc4>)
 8001406:	f000 fe57 	bl	80020b8 <HAL_GPIO_Init>

}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000
 8001418:	40010800 	.word	0x40010800
 800141c:	40010c00 	.word	0x40010c00

08001420 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	timerRun();
 8001428:	f000 fb10 	bl	8001a4c <timerRun>
	schedulerUpdate();
 800142c:	f000 f82e 	bl	800148c <schedulerUpdate>
	getKeyInput();
 8001430:	f7fe fea8 	bl	8000184 <getKeyInput>
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001440:	b672      	cpsid	i
}
 8001442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001444:	e7fe      	b.n	8001444 <Error_Handler+0x8>
	...

08001448 <schedulerInit>:
ERROR_CODE ErrorCode = NO_ERROR;
ERROR_CODE LastErrorCode = NO_ERROR;

char str[50];

void schedulerInit() {
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
    TaskList.head = NULL;	//Node head = 0;
 800144c:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <schedulerInit+0x30>)
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
    TaskList.size = 0;        //Asign size = 0
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <schedulerInit+0x30>)
 8001454:	2200      	movs	r2, #0
 8001456:	605a      	str	r2, [r3, #4]
    TaskIDCounter = 0;        // Reset task ID counter
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <schedulerInit+0x34>)
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
    timestamp = 0;            // Reset timestamp
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <schedulerInit+0x38>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
    ErrorCode = NO_ERROR;      // Clear any existing errors
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <schedulerInit+0x3c>)
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
    LastErrorCode = NO_ERROR;  // Clear last error code
 800146a:	4b07      	ldr	r3, [pc, #28]	; (8001488 <schedulerInit+0x40>)
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	20000204 	.word	0x20000204
 800147c:	2000010c 	.word	0x2000010c
 8001480:	20000110 	.word	0x20000110
 8001484:	20000114 	.word	0x20000114
 8001488:	20000115 	.word	0x20000115

0800148c <schedulerUpdate>:

void schedulerUpdate() {
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
    timestamp += 10; // Cập nhật tổng thời gian
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <schedulerUpdate+0x64>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	330a      	adds	r3, #10
 8001498:	4a15      	ldr	r2, [pc, #84]	; (80014f0 <schedulerUpdate+0x64>)
 800149a:	6013      	str	r3, [r2, #0]
    Node *current = TaskList.head;
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <schedulerUpdate+0x68>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	607b      	str	r3, [r7, #4]

    // Duyệt qua danh sách các tác vụ
    while (current != NULL) {
 80014a2:	e01c      	b.n	80014de <schedulerUpdate+0x52>
        if (current->Delay > 0) {
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d004      	beq.n	80014b6 <schedulerUpdate+0x2a>
            current->Delay--; // Giảm thời gian chờ
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	1e5a      	subs	r2, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	609a      	str	r2, [r3, #8]
        }

        if (current->Delay == 0) {
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10c      	bne.n	80014d8 <schedulerUpdate+0x4c>
            current->RunMe++; // Đánh dấu sẵn sàng thực thi
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	611a      	str	r2, [r3, #16]

            // Lên lịch lại nếu là tác vụ định kỳ
            if (current->Period > 0) {
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <schedulerUpdate+0x4c>
                current->Delay = current->Period;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	609a      	str	r2, [r3, #8]
            }
        }

        // Tiếp tục duyệt sang tác vụ kế tiếp
        current = current->NextTask;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	607b      	str	r3, [r7, #4]
    while (current != NULL) {
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1df      	bne.n	80014a4 <schedulerUpdate+0x18>
    }
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	20000110 	.word	0x20000110
 80014f4:	20000204 	.word	0x20000204

080014f8 <deleteTask>:


int deleteTask(uint32_t ID){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
    if(TaskList.size == 0)
 8001500:	4b3d      	ldr	r3, [pc, #244]	; (80015f8 <deleteTask+0x100>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <deleteTask+0x14>
        return 1;
 8001508:	2301      	movs	r3, #1
 800150a:	e070      	b.n	80015ee <deleteTask+0xf6>

    Node * curr = TaskList.head;
 800150c:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <deleteTask+0x100>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60fb      	str	r3, [r7, #12]
    Node * prev = NULL;
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]

    while(curr != NULL){
 8001516:	e066      	b.n	80015e6 <deleteTask+0xee>
        if(ID == curr -> TaskID){
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	429a      	cmp	r2, r3
 8001520:	d15c      	bne.n	80015dc <deleteTask+0xe4>
            if(prev == NULL && curr -> NextTask == NULL){
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d111      	bne.n	800154c <deleteTask+0x54>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d10d      	bne.n	800154c <deleteTask+0x54>
                free(curr);
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f002 fdb5 	bl	80040a0 <free>
                TaskList.head = NULL;
 8001536:	4b30      	ldr	r3, [pc, #192]	; (80015f8 <deleteTask+0x100>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
                TaskList.size--;
 800153c:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <deleteTask+0x100>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	3b01      	subs	r3, #1
 8001542:	4a2d      	ldr	r2, [pc, #180]	; (80015f8 <deleteTask+0x100>)
 8001544:	6053      	str	r3, [r2, #4]
				curr = NULL;
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	e04c      	b.n	80015e6 <deleteTask+0xee>
            } else if (prev == NULL){
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d117      	bne.n	8001582 <deleteTask+0x8a>
                curr -> NextTask -> Delay += curr -> Delay;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	6899      	ldr	r1, [r3, #8]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	440a      	add	r2, r1
 8001562:	609a      	str	r2, [r3, #8]
                TaskList.head = curr -> NextTask;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	4a23      	ldr	r2, [pc, #140]	; (80015f8 <deleteTask+0x100>)
 800156a:	6013      	str	r3, [r2, #0]
                free(curr);
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f002 fd97 	bl	80040a0 <free>
                TaskList.size--;
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <deleteTask+0x100>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	3b01      	subs	r3, #1
 8001578:	4a1f      	ldr	r2, [pc, #124]	; (80015f8 <deleteTask+0x100>)
 800157a:	6053      	str	r3, [r2, #4]
				curr = NULL;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	e031      	b.n	80015e6 <deleteTask+0xee>
            } else if (curr -> NextTask == NULL){
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10d      	bne.n	80015a6 <deleteTask+0xae>
                free(curr);
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f002 fd88 	bl	80040a0 <free>
                prev -> NextTask = NULL;
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	2200      	movs	r2, #0
 8001594:	615a      	str	r2, [r3, #20]
                TaskList.size--;
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <deleteTask+0x100>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	3b01      	subs	r3, #1
 800159c:	4a16      	ldr	r2, [pc, #88]	; (80015f8 <deleteTask+0x100>)
 800159e:	6053      	str	r3, [r2, #4]
				curr = NULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	e01f      	b.n	80015e6 <deleteTask+0xee>
            } else {
                curr -> NextTask -> Delay += curr -> Delay;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	6899      	ldr	r1, [r3, #8]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	440a      	add	r2, r1
 80015b6:	609a      	str	r2, [r3, #8]
                prev -> NextTask = curr -> NextTask;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	695a      	ldr	r2, [r3, #20]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	615a      	str	r2, [r3, #20]
                curr -> NextTask = NULL;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2200      	movs	r2, #0
 80015c4:	615a      	str	r2, [r3, #20]
                free(curr);
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f002 fd6a 	bl	80040a0 <free>
                TaskList.size--;
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <deleteTask+0x100>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	3b01      	subs	r3, #1
 80015d2:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <deleteTask+0x100>)
 80015d4:	6053      	str	r3, [r2, #4]
				curr = NULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	e004      	b.n	80015e6 <deleteTask+0xee>
            }

        } else {
            prev = curr;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	60bb      	str	r3, [r7, #8]
            curr = curr -> NextTask;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	60fb      	str	r3, [r7, #12]
    while(curr != NULL){
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d195      	bne.n	8001518 <deleteTask+0x20>
        }
    }
    return 0;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000204 	.word	0x20000204

080015fc <schedulerDeleteTask>:

RETURN_CODE schedulerDeleteTask(const unsigned char TaskID){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
	RETURN_CODE returnCode;
	if(deleteTask(TaskID))
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff75 	bl	80014f8 <deleteTask>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d002      	beq.n	800161a <schedulerDeleteTask+0x1e>
		returnCode = ERROR_SCH_CANNOT_DELETE_TASK;
 8001614:	2302      	movs	r3, #2
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e001      	b.n	800161e <schedulerDeleteTask+0x22>
	else
		returnCode = NO_ERROR;
 800161a:	2300      	movs	r3, #0
 800161c:	73fb      	strb	r3, [r7, #15]
	return returnCode;
 800161e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <addTask>:

int addTask(Node *task) {
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
    if (TaskList.size >= SCH_MAX_TASKS) {
 8001630:	4b26      	ldr	r3, [pc, #152]	; (80016cc <addTask+0xa4>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b1f      	cmp	r3, #31
 8001636:	dd01      	ble.n	800163c <addTask+0x14>
        return 1; // Quá số lượng tác vụ cho phép
 8001638:	2301      	movs	r3, #1
 800163a:	e042      	b.n	80016c2 <addTask+0x9a>
    }

    task->RunMe = 0; // Đảm bảo cờ được đặt về 0
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
    if (TaskList.size == 0) {
 8001642:	4b22      	ldr	r3, [pc, #136]	; (80016cc <addTask+0xa4>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d103      	bne.n	8001652 <addTask+0x2a>
        TaskList.head = task;
 800164a:	4a20      	ldr	r2, [pc, #128]	; (80016cc <addTask+0xa4>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	e031      	b.n	80016b6 <addTask+0x8e>
    } else {
        Node *curr = TaskList.head;
 8001652:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <addTask+0xa4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	60fb      	str	r3, [r7, #12]
        Node *prev = NULL;
 8001658:	2300      	movs	r3, #0
 800165a:	60bb      	str	r3, [r7, #8]

        while (curr && task->Delay >= curr->Delay) {
 800165c:	e00b      	b.n	8001676 <addTask+0x4e>
            task->Delay -= curr->Delay;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	1ad2      	subs	r2, r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	609a      	str	r2, [r3, #8]
            prev = curr;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	60bb      	str	r3, [r7, #8]
            curr = curr->NextTask;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	60fb      	str	r3, [r7, #12]
        while (curr && task->Delay >= curr->Delay) {
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <addTask+0x60>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	429a      	cmp	r2, r3
 8001686:	d2ea      	bcs.n	800165e <addTask+0x36>
        }

        task->NextTask = curr;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	615a      	str	r2, [r3, #20]
        if (prev) {
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <addTask+0x74>
            prev->NextTask = task;
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	615a      	str	r2, [r3, #20]
 800169a:	e002      	b.n	80016a2 <addTask+0x7a>
        } else {
            TaskList.head = task;
 800169c:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <addTask+0xa4>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
        }

        if (curr) {
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d006      	beq.n	80016b6 <addTask+0x8e>
            curr->Delay -= task->Delay;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	1ad2      	subs	r2, r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	609a      	str	r2, [r3, #8]
        }
    }

    TaskList.size++;
 80016b6:	4b05      	ldr	r3, [pc, #20]	; (80016cc <addTask+0xa4>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	3301      	adds	r3, #1
 80016bc:	4a03      	ldr	r2, [pc, #12]	; (80016cc <addTask+0xa4>)
 80016be:	6053      	str	r3, [r2, #4]
    return 0;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	20000204 	.word	0x20000204

080016d0 <schedulerAddTask>:


unsigned char schedulerAddTask(void (*functionPointer)(), unsigned int DELAY, unsigned int PERIOD){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
	Node * task = (Node *)malloc(sizeof(Node));
 80016dc:	2018      	movs	r0, #24
 80016de:	f002 fcd7 	bl	8004090 <malloc>
 80016e2:	4603      	mov	r3, r0
 80016e4:	617b      	str	r3, [r7, #20]
	task -> Delay 		= DELAY;
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	609a      	str	r2, [r3, #8]
	task -> Period 		= PERIOD;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	60da      	str	r2, [r3, #12]
	task -> TaskID 		= (++TaskIDCounter)%256;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <schedulerAddTask+0x5c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	3301      	adds	r3, #1
 80016f8:	4a0c      	ldr	r2, [pc, #48]	; (800172c <schedulerAddTask+0x5c>)
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <schedulerAddTask+0x5c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	605a      	str	r2, [r3, #4]
	task -> TaskPointer = functionPointer;
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	601a      	str	r2, [r3, #0]
	task -> NextTask 	= NULL;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	2200      	movs	r2, #0
 8001710:	615a      	str	r2, [r3, #20]
	task -> RunMe 		= 0;
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
	addTask(task);
 8001718:	6978      	ldr	r0, [r7, #20]
 800171a:	f7ff ff85 	bl	8001628 <addTask>
	return task -> TaskID;
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	b2db      	uxtb	r3, r3
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	2000010c 	.word	0x2000010c

08001730 <schedulerSleep>:

void schedulerSleep(){
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
	// Enter idle or low-power mode
	    __WFI();  // Wait For Interrupt: puts the MCU in idle mode until an interrupt occurs
 8001734:	bf30      	wfi
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
	...

08001740 <schedulerDispatcher>:

void schedulerDispatcher() {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
    while (TaskList.size != 0) {
 8001746:	e02e      	b.n	80017a6 <schedulerDispatcher+0x66>
        Node *current = TaskList.head;
 8001748:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <schedulerDispatcher+0x7c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	607b      	str	r3, [r7, #4]

        // Duyệt qua tất cả các tác vụ
        while (current != NULL) {
 800174e:	e025      	b.n	800179c <schedulerDispatcher+0x5c>
            if (current->RunMe > 0) {
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d01e      	beq.n	8001796 <schedulerDispatcher+0x56>
                current->RunMe--; // Đánh dấu là đã thực thi
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	1e5a      	subs	r2, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	611a      	str	r2, [r3, #16]

                // Báo cáo và thực thi tác vụ
                uint32_t time_point = timestamp;
 8001762:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <schedulerDispatcher+0x80>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	603b      	str	r3, [r7, #0]
                sprintf(str, "TaskID: %ld timeout at timestamp: %ld ms\r\n", current->TaskID, time_point);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	4915      	ldr	r1, [pc, #84]	; (80017c4 <schedulerDispatcher+0x84>)
 8001770:	4815      	ldr	r0, [pc, #84]	; (80017c8 <schedulerDispatcher+0x88>)
 8001772:	f002 fd5b 	bl	800422c <siprintf>
                writeMessage(str);
 8001776:	4814      	ldr	r0, [pc, #80]	; (80017c8 <schedulerDispatcher+0x88>)
 8001778:	f7ff fcfc 	bl	8001174 <writeMessage>

                // Thực thi tác vụ
                current->TaskPointer();
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4798      	blx	r3

                // Nếu là tác vụ định kỳ, không xóa
                if (current->Period == 0) {
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d105      	bne.n	8001796 <schedulerDispatcher+0x56>
                    schedulerDeleteTask(current->TaskID);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff33 	bl	80015fc <schedulerDeleteTask>
                }
            }

            // Tiếp tục với tác vụ kế tiếp
            current = current->NextTask;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	607b      	str	r3, [r7, #4]
        while (current != NULL) {
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1d6      	bne.n	8001750 <schedulerDispatcher+0x10>
        }

        schedulerSleep(); // Đưa hệ thống về chế độ tiết kiệm năng lượng
 80017a2:	f7ff ffc5 	bl	8001730 <schedulerSleep>
    while (TaskList.size != 0) {
 80017a6:	4b05      	ldr	r3, [pc, #20]	; (80017bc <schedulerDispatcher+0x7c>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1cc      	bne.n	8001748 <schedulerDispatcher+0x8>
    }

    schedulerReportStatus();
 80017ae:	f000 f80d 	bl	80017cc <schedulerReportStatus>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000204 	.word	0x20000204
 80017c0:	20000110 	.word	0x20000110
 80017c4:	0800494c 	.word	0x0800494c
 80017c8:	2000020c 	.word	0x2000020c

080017cc <schedulerReportStatus>:


int ErrorTickCount = 0;
void schedulerReportStatus(){
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
				ErrorCode = 0; //reset error code
			}
		}
	}
#endif
};
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <HAL_MspInit+0x5c>)
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	4a14      	ldr	r2, [pc, #80]	; (8001834 <HAL_MspInit+0x5c>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6193      	str	r3, [r2, #24]
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_MspInit+0x5c>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <HAL_MspInit+0x5c>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <HAL_MspInit+0x5c>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	61d3      	str	r3, [r2, #28]
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <HAL_MspInit+0x5c>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_MspInit+0x60>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	4a04      	ldr	r2, [pc, #16]	; (8001838 <HAL_MspInit+0x60>)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182a:	bf00      	nop
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	40021000 	.word	0x40021000
 8001838:	40010000 	.word	0x40010000

0800183c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800184c:	d113      	bne.n	8001876 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <HAL_TIM_Base_MspInit+0x44>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	4a0b      	ldr	r2, [pc, #44]	; (8001880 <HAL_TIM_Base_MspInit+0x44>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	61d3      	str	r3, [r2, #28]
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_TIM_Base_MspInit+0x44>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	201c      	movs	r0, #28
 800186c:	f000 fb3b 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001870:	201c      	movs	r0, #28
 8001872:	f000 fb54 	bl	8001f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000

08001884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a20      	ldr	r2, [pc, #128]	; (8001920 <HAL_UART_MspInit+0x9c>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d139      	bne.n	8001918 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018a4:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <HAL_UART_MspInit+0xa0>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a1e      	ldr	r2, [pc, #120]	; (8001924 <HAL_UART_MspInit+0xa0>)
 80018aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <HAL_UART_MspInit+0xa0>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_UART_MspInit+0xa0>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	4a18      	ldr	r2, [pc, #96]	; (8001924 <HAL_UART_MspInit+0xa0>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	6193      	str	r3, [r2, #24]
 80018c8:	4b16      	ldr	r3, [pc, #88]	; (8001924 <HAL_UART_MspInit+0xa0>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018de:	2303      	movs	r3, #3
 80018e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 0310 	add.w	r3, r7, #16
 80018e6:	4619      	mov	r1, r3
 80018e8:	480f      	ldr	r0, [pc, #60]	; (8001928 <HAL_UART_MspInit+0xa4>)
 80018ea:	f000 fbe5 	bl	80020b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	4619      	mov	r1, r3
 8001902:	4809      	ldr	r0, [pc, #36]	; (8001928 <HAL_UART_MspInit+0xa4>)
 8001904:	f000 fbd8 	bl	80020b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001908:	2200      	movs	r2, #0
 800190a:	2100      	movs	r1, #0
 800190c:	2025      	movs	r0, #37	; 0x25
 800190e:	f000 faea 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001912:	2025      	movs	r0, #37	; 0x25
 8001914:	f000 fb03 	bl	8001f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001918:	bf00      	nop
 800191a:	3720      	adds	r7, #32
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40013800 	.word	0x40013800
 8001924:	40021000 	.word	0x40021000
 8001928:	40010800 	.word	0x40010800

0800192c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <NMI_Handler+0x4>

08001932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <HardFault_Handler+0x4>

08001938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <MemManage_Handler+0x4>

0800193e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <BusFault_Handler+0x4>

08001944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <UsageFault_Handler+0x4>

0800194a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr

08001956 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr

08001962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr

0800196e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001972:	f000 f9c5 	bl	8001d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <TIM2_IRQHandler+0x10>)
 8001982:	f001 fa05 	bl	8002d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200001bc 	.word	0x200001bc

08001990 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <USART1_IRQHandler+0x10>)
 8001996:	f001 fe17 	bl	80035c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000174 	.word	0x20000174

080019a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ac:	4a14      	ldr	r2, [pc, #80]	; (8001a00 <_sbrk+0x5c>)
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <_sbrk+0x60>)
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d102      	bne.n	80019c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <_sbrk+0x64>)
 80019c2:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <_sbrk+0x68>)
 80019c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d207      	bcs.n	80019e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d4:	f002 fb32 	bl	800403c <__errno>
 80019d8:	4603      	mov	r3, r0
 80019da:	220c      	movs	r2, #12
 80019dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
 80019e2:	e009      	b.n	80019f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <_sbrk+0x64>)
 80019f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20002800 	.word	0x20002800
 8001a04:	00000400 	.word	0x00000400
 8001a08:	20000118 	.word	0x20000118
 8001a0c:	20000258 	.word	0x20000258

08001a10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <setTimer>:
//}

int timer_flag[MAXTM] = {0};
int timer_counter[MAXTM]= {0};

void setTimer(int index, int counter){
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 8001a26:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <setTimer+0x28>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter;
 8001a30:	4905      	ldr	r1, [pc, #20]	; (8001a48 <setTimer+0x2c>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	2000011c 	.word	0x2000011c
 8001a48:	20000144 	.word	0x20000144

08001a4c <timerRun>:
void timerRun(){
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAXTM; i++){
 8001a52:	2300      	movs	r3, #0
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	e017      	b.n	8001a88 <timerRun+0x3c>
		if(timer_counter[i] > 0){
 8001a58:	4a10      	ldr	r2, [pc, #64]	; (8001a9c <timerRun+0x50>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	dd09      	ble.n	8001a78 <timerRun+0x2c>
			timer_counter[i]--;
 8001a64:	4a0d      	ldr	r2, [pc, #52]	; (8001a9c <timerRun+0x50>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6c:	1e5a      	subs	r2, r3, #1
 8001a6e:	490b      	ldr	r1, [pc, #44]	; (8001a9c <timerRun+0x50>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001a76:	e004      	b.n	8001a82 <timerRun+0x36>
			if(timer_counter <= 0){
				timer_flag[i] = 1;
			}
		}
		else{
			timer_flag[i] = 1;
 8001a78:	4a09      	ldr	r2, [pc, #36]	; (8001aa0 <timerRun+0x54>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MAXTM; i++){
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3301      	adds	r3, #1
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b09      	cmp	r3, #9
 8001a8c:	dde4      	ble.n	8001a58 <timerRun+0xc>
		}
	}
}
 8001a8e:	bf00      	nop
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000144 	.word	0x20000144
 8001aa0:	2000011c 	.word	0x2000011c

08001aa4 <clearAllLed>:
#include "traffic_light.h"


void clearAllLed(){
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);//RED1
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2101      	movs	r1, #1
 8001aac:	480e      	ldr	r0, [pc, #56]	; (8001ae8 <clearAllLed+0x44>)
 8001aae:	f000 fc94 	bl	80023da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);//RED2
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2102      	movs	r1, #2
 8001ab6:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <clearAllLed+0x44>)
 8001ab8:	f000 fc8f 	bl	80023da <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);//YEL1
 8001abc:	2200      	movs	r2, #0
 8001abe:	2104      	movs	r1, #4
 8001ac0:	4809      	ldr	r0, [pc, #36]	; (8001ae8 <clearAllLed+0x44>)
 8001ac2:	f000 fc8a 	bl	80023da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);//YEL2
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2108      	movs	r1, #8
 8001aca:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <clearAllLed+0x44>)
 8001acc:	f000 fc85 	bl	80023da <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);//GREEN1
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2110      	movs	r1, #16
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <clearAllLed+0x44>)
 8001ad6:	f000 fc80 	bl	80023da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);//GREEN2
 8001ada:	2200      	movs	r2, #0
 8001adc:	2120      	movs	r1, #32
 8001ade:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <clearAllLed+0x44>)
 8001ae0:	f000 fc7b 	bl	80023da <HAL_GPIO_WritePin>
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40010c00 	.word	0x40010c00

08001aec <led_red_green>:
void led_red_green(){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);//RED1
 8001af0:	2201      	movs	r2, #1
 8001af2:	2101      	movs	r1, #1
 8001af4:	4804      	ldr	r0, [pc, #16]	; (8001b08 <led_red_green+0x1c>)
 8001af6:	f000 fc70 	bl	80023da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);//GREEN2
 8001afa:	2201      	movs	r2, #1
 8001afc:	2120      	movs	r1, #32
 8001afe:	4802      	ldr	r0, [pc, #8]	; (8001b08 <led_red_green+0x1c>)
 8001b00:	f000 fc6b 	bl	80023da <HAL_GPIO_WritePin>
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40010c00 	.word	0x40010c00

08001b0c <led_red_amber>:
void led_red_amber(){
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);//RED1
 8001b10:	2201      	movs	r2, #1
 8001b12:	2101      	movs	r1, #1
 8001b14:	4804      	ldr	r0, [pc, #16]	; (8001b28 <led_red_amber+0x1c>)
 8001b16:	f000 fc60 	bl	80023da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);//YEL2
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	2108      	movs	r1, #8
 8001b1e:	4802      	ldr	r0, [pc, #8]	; (8001b28 <led_red_amber+0x1c>)
 8001b20:	f000 fc5b 	bl	80023da <HAL_GPIO_WritePin>
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40010c00 	.word	0x40010c00

08001b2c <led_green_red>:
void led_green_red(){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);//RED2
 8001b30:	2201      	movs	r2, #1
 8001b32:	2102      	movs	r1, #2
 8001b34:	4804      	ldr	r0, [pc, #16]	; (8001b48 <led_green_red+0x1c>)
 8001b36:	f000 fc50 	bl	80023da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);//GREEN1
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	2110      	movs	r1, #16
 8001b3e:	4802      	ldr	r0, [pc, #8]	; (8001b48 <led_green_red+0x1c>)
 8001b40:	f000 fc4b 	bl	80023da <HAL_GPIO_WritePin>
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40010c00 	.word	0x40010c00

08001b4c <led_amber_red>:
void led_amber_red(){
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);//RED2
 8001b50:	2201      	movs	r2, #1
 8001b52:	2102      	movs	r1, #2
 8001b54:	4804      	ldr	r0, [pc, #16]	; (8001b68 <led_amber_red+0x1c>)
 8001b56:	f000 fc40 	bl	80023da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);//YEL1
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	2104      	movs	r1, #4
 8001b5e:	4802      	ldr	r0, [pc, #8]	; (8001b68 <led_amber_red+0x1c>)
 8001b60:	f000 fc3b 	bl	80023da <HAL_GPIO_WritePin>
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40010c00 	.word	0x40010c00

08001b6c <controlTime_led>:

	clearAllLed();
	led_red_green();
	led_red_amber();
}
void controlTime_led(){
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
	if(red <= 0)
 8001b70:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <controlTime_led+0x3c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	dc03      	bgt.n	8001b80 <controlTime_led+0x14>
		red = temp_red;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <controlTime_led+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <controlTime_led+0x3c>)
 8001b7e:	6013      	str	r3, [r2, #0]
	if(green <= 0)
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <controlTime_led+0x44>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	dc03      	bgt.n	8001b90 <controlTime_led+0x24>
		green = temp_green;
 8001b88:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <controlTime_led+0x48>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a08      	ldr	r2, [pc, #32]	; (8001bb0 <controlTime_led+0x44>)
 8001b8e:	6013      	str	r3, [r2, #0]
	if(amber <= 0)
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <controlTime_led+0x4c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	dc03      	bgt.n	8001ba0 <controlTime_led+0x34>
		amber = temp_amber;
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <controlTime_led+0x50>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <controlTime_led+0x4c>)
 8001b9e:	6013      	str	r3, [r2, #0]
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	20000034 	.word	0x20000034
 8001bac:	20000040 	.word	0x20000040
 8001bb0:	2000003c 	.word	0x2000003c
 8001bb4:	20000048 	.word	0x20000048
 8001bb8:	20000038 	.word	0x20000038
 8001bbc:	20000044 	.word	0x20000044

08001bc0 <blinkingLed>:
void blinkingLed(int mode){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	switch(mode){
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d01b      	beq.n	8001c06 <blinkingLed+0x46>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	dc21      	bgt.n	8001c18 <blinkingLed+0x58>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d003      	beq.n	8001be2 <blinkingLed+0x22>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	d009      	beq.n	8001bf4 <blinkingLed+0x34>
			break;
		case MODE_4:
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);//GREEN1
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);//GREEN2
			break;
		default: break;
 8001be0:	e01a      	b.n	8001c18 <blinkingLed+0x58>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);//RED1
 8001be2:	2101      	movs	r1, #1
 8001be4:	480f      	ldr	r0, [pc, #60]	; (8001c24 <blinkingLed+0x64>)
 8001be6:	f000 fc10 	bl	800240a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);//RED2
 8001bea:	2102      	movs	r1, #2
 8001bec:	480d      	ldr	r0, [pc, #52]	; (8001c24 <blinkingLed+0x64>)
 8001bee:	f000 fc0c 	bl	800240a <HAL_GPIO_TogglePin>
			break;
 8001bf2:	e012      	b.n	8001c1a <blinkingLed+0x5a>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);//YEL1
 8001bf4:	2104      	movs	r1, #4
 8001bf6:	480b      	ldr	r0, [pc, #44]	; (8001c24 <blinkingLed+0x64>)
 8001bf8:	f000 fc07 	bl	800240a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);//YEL2
 8001bfc:	2108      	movs	r1, #8
 8001bfe:	4809      	ldr	r0, [pc, #36]	; (8001c24 <blinkingLed+0x64>)
 8001c00:	f000 fc03 	bl	800240a <HAL_GPIO_TogglePin>
			break;
 8001c04:	e009      	b.n	8001c1a <blinkingLed+0x5a>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);//GREEN1
 8001c06:	2110      	movs	r1, #16
 8001c08:	4806      	ldr	r0, [pc, #24]	; (8001c24 <blinkingLed+0x64>)
 8001c0a:	f000 fbfe 	bl	800240a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);//GREEN2
 8001c0e:	2120      	movs	r1, #32
 8001c10:	4804      	ldr	r0, [pc, #16]	; (8001c24 <blinkingLed+0x64>)
 8001c12:	f000 fbfa 	bl	800240a <HAL_GPIO_TogglePin>
			break;
 8001c16:	e000      	b.n	8001c1a <blinkingLed+0x5a>
		default: break;
 8001c18:	bf00      	nop
	}
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40010c00 	.word	0x40010c00

08001c28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c28:	f7ff fef2 	bl	8001a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c2c:	480b      	ldr	r0, [pc, #44]	; (8001c5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c2e:	490c      	ldr	r1, [pc, #48]	; (8001c60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c30:	4a0c      	ldr	r2, [pc, #48]	; (8001c64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c34:	e002      	b.n	8001c3c <LoopCopyDataInit>

08001c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3a:	3304      	adds	r3, #4

08001c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c40:	d3f9      	bcc.n	8001c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c42:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c44:	4c09      	ldr	r4, [pc, #36]	; (8001c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c48:	e001      	b.n	8001c4e <LoopFillZerobss>

08001c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c4c:	3204      	adds	r2, #4

08001c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c50:	d3fb      	bcc.n	8001c4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c52:	f002 f9f9 	bl	8004048 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c56:	f7ff faa1 	bl	800119c <main>
  bx lr
 8001c5a:	4770      	bx	lr
  ldr r0, =_sdata
 8001c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c60:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8001c64:	080049e0 	.word	0x080049e0
  ldr r2, =_sbss
 8001c68:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8001c6c:	20000254 	.word	0x20000254

08001c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c70:	e7fe      	b.n	8001c70 <ADC1_2_IRQHandler>
	...

08001c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_Init+0x28>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <HAL_Init+0x28>)
 8001c7e:	f043 0310 	orr.w	r3, r3, #16
 8001c82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c84:	2003      	movs	r0, #3
 8001c86:	f000 f923 	bl	8001ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c8a:	200f      	movs	r0, #15
 8001c8c:	f000 f808 	bl	8001ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c90:	f7ff fda2 	bl	80017d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40022000 	.word	0x40022000

08001ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_InitTick+0x54>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_InitTick+0x58>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f93b 	bl	8001f3a <HAL_SYSTICK_Config>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e00e      	b.n	8001cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b0f      	cmp	r3, #15
 8001cd2:	d80a      	bhi.n	8001cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cdc:	f000 f903 	bl	8001ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce0:	4a06      	ldr	r2, [pc, #24]	; (8001cfc <HAL_InitTick+0x5c>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e000      	b.n	8001cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000064 	.word	0x20000064
 8001cf8:	2000006c 	.word	0x2000006c
 8001cfc:	20000068 	.word	0x20000068

08001d00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_IncTick+0x1c>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_IncTick+0x20>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a03      	ldr	r2, [pc, #12]	; (8001d20 <HAL_IncTick+0x20>)
 8001d12:	6013      	str	r3, [r2, #0]
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	2000006c 	.word	0x2000006c
 8001d20:	20000240 	.word	0x20000240

08001d24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return uwTick;
 8001d28:	4b02      	ldr	r3, [pc, #8]	; (8001d34 <HAL_GetTick+0x10>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr
 8001d34:	20000240 	.word	0x20000240

08001d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d54:	4013      	ands	r3, r2
 8001d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6a:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	60d3      	str	r3, [r2, #12]
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <__NVIC_GetPriorityGrouping+0x18>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	0a1b      	lsrs	r3, r3, #8
 8001d8a:	f003 0307 	and.w	r3, r3, #7
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	db0b      	blt.n	8001dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	f003 021f 	and.w	r2, r3, #31
 8001db4:	4906      	ldr	r1, [pc, #24]	; (8001dd0 <__NVIC_EnableIRQ+0x34>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	e000e100 	.word	0xe000e100

08001dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	6039      	str	r1, [r7, #0]
 8001dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	db0a      	blt.n	8001dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	490c      	ldr	r1, [pc, #48]	; (8001e20 <__NVIC_SetPriority+0x4c>)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	0112      	lsls	r2, r2, #4
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	440b      	add	r3, r1
 8001df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dfc:	e00a      	b.n	8001e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4908      	ldr	r1, [pc, #32]	; (8001e24 <__NVIC_SetPriority+0x50>)
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	3b04      	subs	r3, #4
 8001e0c:	0112      	lsls	r2, r2, #4
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	440b      	add	r3, r1
 8001e12:	761a      	strb	r2, [r3, #24]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000e100 	.word	0xe000e100
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b089      	sub	sp, #36	; 0x24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f1c3 0307 	rsb	r3, r3, #7
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	bf28      	it	cs
 8001e46:	2304      	movcs	r3, #4
 8001e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	2b06      	cmp	r3, #6
 8001e50:	d902      	bls.n	8001e58 <NVIC_EncodePriority+0x30>
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3b03      	subs	r3, #3
 8001e56:	e000      	b.n	8001e5a <NVIC_EncodePriority+0x32>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43da      	mvns	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e70:	f04f 31ff 	mov.w	r1, #4294967295
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7a:	43d9      	mvns	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e80:	4313      	orrs	r3, r2
         );
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3724      	adds	r7, #36	; 0x24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e9c:	d301      	bcc.n	8001ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00f      	b.n	8001ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <SysTick_Config+0x40>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eaa:	210f      	movs	r1, #15
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f7ff ff90 	bl	8001dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <SysTick_Config+0x40>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eba:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <SysTick_Config+0x40>)
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	e000e010 	.word	0xe000e010

08001ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff2d 	bl	8001d38 <__NVIC_SetPriorityGrouping>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b086      	sub	sp, #24
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
 8001ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef8:	f7ff ff42 	bl	8001d80 <__NVIC_GetPriorityGrouping>
 8001efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	6978      	ldr	r0, [r7, #20]
 8001f04:	f7ff ff90 	bl	8001e28 <NVIC_EncodePriority>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff5f 	bl	8001dd4 <__NVIC_SetPriority>
}
 8001f16:	bf00      	nop
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff35 	bl	8001d9c <__NVIC_EnableIRQ>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ffa2 	bl	8001e8c <SysTick_Config>
 8001f48:	4603      	mov	r3, r0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b085      	sub	sp, #20
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d008      	beq.n	8001f7c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e020      	b.n	8001fbe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 020e 	bic.w	r2, r2, #14
 8001f8a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0201 	bic.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001faa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d005      	beq.n	8001fec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2204      	movs	r2, #4
 8001fe4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	73fb      	strb	r3, [r7, #15]
 8001fea:	e051      	b.n	8002090 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 020e 	bic.w	r2, r2, #14
 8001ffa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0201 	bic.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a22      	ldr	r2, [pc, #136]	; (800209c <HAL_DMA_Abort_IT+0xd4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d029      	beq.n	800206a <HAL_DMA_Abort_IT+0xa2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a21      	ldr	r2, [pc, #132]	; (80020a0 <HAL_DMA_Abort_IT+0xd8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d022      	beq.n	8002066 <HAL_DMA_Abort_IT+0x9e>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a1f      	ldr	r2, [pc, #124]	; (80020a4 <HAL_DMA_Abort_IT+0xdc>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01a      	beq.n	8002060 <HAL_DMA_Abort_IT+0x98>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a1e      	ldr	r2, [pc, #120]	; (80020a8 <HAL_DMA_Abort_IT+0xe0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d012      	beq.n	800205a <HAL_DMA_Abort_IT+0x92>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a1c      	ldr	r2, [pc, #112]	; (80020ac <HAL_DMA_Abort_IT+0xe4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00a      	beq.n	8002054 <HAL_DMA_Abort_IT+0x8c>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1b      	ldr	r2, [pc, #108]	; (80020b0 <HAL_DMA_Abort_IT+0xe8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d102      	bne.n	800204e <HAL_DMA_Abort_IT+0x86>
 8002048:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800204c:	e00e      	b.n	800206c <HAL_DMA_Abort_IT+0xa4>
 800204e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002052:	e00b      	b.n	800206c <HAL_DMA_Abort_IT+0xa4>
 8002054:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002058:	e008      	b.n	800206c <HAL_DMA_Abort_IT+0xa4>
 800205a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800205e:	e005      	b.n	800206c <HAL_DMA_Abort_IT+0xa4>
 8002060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002064:	e002      	b.n	800206c <HAL_DMA_Abort_IT+0xa4>
 8002066:	2310      	movs	r3, #16
 8002068:	e000      	b.n	800206c <HAL_DMA_Abort_IT+0xa4>
 800206a:	2301      	movs	r3, #1
 800206c:	4a11      	ldr	r2, [pc, #68]	; (80020b4 <HAL_DMA_Abort_IT+0xec>)
 800206e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	4798      	blx	r3
    } 
  }
  return status;
 8002090:	7bfb      	ldrb	r3, [r7, #15]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40020008 	.word	0x40020008
 80020a0:	4002001c 	.word	0x4002001c
 80020a4:	40020030 	.word	0x40020030
 80020a8:	40020044 	.word	0x40020044
 80020ac:	40020058 	.word	0x40020058
 80020b0:	4002006c 	.word	0x4002006c
 80020b4:	40020000 	.word	0x40020000

080020b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b08b      	sub	sp, #44	; 0x2c
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ca:	e148      	b.n	800235e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020cc:	2201      	movs	r2, #1
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	f040 8137 	bne.w	8002358 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4aa3      	ldr	r2, [pc, #652]	; (800237c <HAL_GPIO_Init+0x2c4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d05e      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 80020f4:	4aa1      	ldr	r2, [pc, #644]	; (800237c <HAL_GPIO_Init+0x2c4>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d875      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 80020fa:	4aa1      	ldr	r2, [pc, #644]	; (8002380 <HAL_GPIO_Init+0x2c8>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d058      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 8002100:	4a9f      	ldr	r2, [pc, #636]	; (8002380 <HAL_GPIO_Init+0x2c8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d86f      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 8002106:	4a9f      	ldr	r2, [pc, #636]	; (8002384 <HAL_GPIO_Init+0x2cc>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d052      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 800210c:	4a9d      	ldr	r2, [pc, #628]	; (8002384 <HAL_GPIO_Init+0x2cc>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d869      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 8002112:	4a9d      	ldr	r2, [pc, #628]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d04c      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 8002118:	4a9b      	ldr	r2, [pc, #620]	; (8002388 <HAL_GPIO_Init+0x2d0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d863      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 800211e:	4a9b      	ldr	r2, [pc, #620]	; (800238c <HAL_GPIO_Init+0x2d4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d046      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 8002124:	4a99      	ldr	r2, [pc, #612]	; (800238c <HAL_GPIO_Init+0x2d4>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d85d      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 800212a:	2b12      	cmp	r3, #18
 800212c:	d82a      	bhi.n	8002184 <HAL_GPIO_Init+0xcc>
 800212e:	2b12      	cmp	r3, #18
 8002130:	d859      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 8002132:	a201      	add	r2, pc, #4	; (adr r2, 8002138 <HAL_GPIO_Init+0x80>)
 8002134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002138:	080021b3 	.word	0x080021b3
 800213c:	0800218d 	.word	0x0800218d
 8002140:	0800219f 	.word	0x0800219f
 8002144:	080021e1 	.word	0x080021e1
 8002148:	080021e7 	.word	0x080021e7
 800214c:	080021e7 	.word	0x080021e7
 8002150:	080021e7 	.word	0x080021e7
 8002154:	080021e7 	.word	0x080021e7
 8002158:	080021e7 	.word	0x080021e7
 800215c:	080021e7 	.word	0x080021e7
 8002160:	080021e7 	.word	0x080021e7
 8002164:	080021e7 	.word	0x080021e7
 8002168:	080021e7 	.word	0x080021e7
 800216c:	080021e7 	.word	0x080021e7
 8002170:	080021e7 	.word	0x080021e7
 8002174:	080021e7 	.word	0x080021e7
 8002178:	080021e7 	.word	0x080021e7
 800217c:	08002195 	.word	0x08002195
 8002180:	080021a9 	.word	0x080021a9
 8002184:	4a82      	ldr	r2, [pc, #520]	; (8002390 <HAL_GPIO_Init+0x2d8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800218a:	e02c      	b.n	80021e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	623b      	str	r3, [r7, #32]
          break;
 8002192:	e029      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	3304      	adds	r3, #4
 800219a:	623b      	str	r3, [r7, #32]
          break;
 800219c:	e024      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	3308      	adds	r3, #8
 80021a4:	623b      	str	r3, [r7, #32]
          break;
 80021a6:	e01f      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	330c      	adds	r3, #12
 80021ae:	623b      	str	r3, [r7, #32]
          break;
 80021b0:	e01a      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d102      	bne.n	80021c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021ba:	2304      	movs	r3, #4
 80021bc:	623b      	str	r3, [r7, #32]
          break;
 80021be:	e013      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d105      	bne.n	80021d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021c8:	2308      	movs	r3, #8
 80021ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	611a      	str	r2, [r3, #16]
          break;
 80021d2:	e009      	b.n	80021e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021d4:	2308      	movs	r3, #8
 80021d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69fa      	ldr	r2, [r7, #28]
 80021dc:	615a      	str	r2, [r3, #20]
          break;
 80021de:	e003      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021e0:	2300      	movs	r3, #0
 80021e2:	623b      	str	r3, [r7, #32]
          break;
 80021e4:	e000      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          break;
 80021e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2bff      	cmp	r3, #255	; 0xff
 80021ec:	d801      	bhi.n	80021f2 <HAL_GPIO_Init+0x13a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	e001      	b.n	80021f6 <HAL_GPIO_Init+0x13e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3304      	adds	r3, #4
 80021f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	2bff      	cmp	r3, #255	; 0xff
 80021fc:	d802      	bhi.n	8002204 <HAL_GPIO_Init+0x14c>
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	e002      	b.n	800220a <HAL_GPIO_Init+0x152>
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	3b08      	subs	r3, #8
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	210f      	movs	r1, #15
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	fa01 f303 	lsl.w	r3, r1, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	401a      	ands	r2, r3
 800221c:	6a39      	ldr	r1, [r7, #32]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	fa01 f303 	lsl.w	r3, r1, r3
 8002224:	431a      	orrs	r2, r3
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8090 	beq.w	8002358 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002238:	4b56      	ldr	r3, [pc, #344]	; (8002394 <HAL_GPIO_Init+0x2dc>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	4a55      	ldr	r2, [pc, #340]	; (8002394 <HAL_GPIO_Init+0x2dc>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	6193      	str	r3, [r2, #24]
 8002244:	4b53      	ldr	r3, [pc, #332]	; (8002394 <HAL_GPIO_Init+0x2dc>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002250:	4a51      	ldr	r2, [pc, #324]	; (8002398 <HAL_GPIO_Init+0x2e0>)
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	3302      	adds	r3, #2
 8002258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	220f      	movs	r2, #15
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	4013      	ands	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a49      	ldr	r2, [pc, #292]	; (800239c <HAL_GPIO_Init+0x2e4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00d      	beq.n	8002298 <HAL_GPIO_Init+0x1e0>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a48      	ldr	r2, [pc, #288]	; (80023a0 <HAL_GPIO_Init+0x2e8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d007      	beq.n	8002294 <HAL_GPIO_Init+0x1dc>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a47      	ldr	r2, [pc, #284]	; (80023a4 <HAL_GPIO_Init+0x2ec>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d101      	bne.n	8002290 <HAL_GPIO_Init+0x1d8>
 800228c:	2302      	movs	r3, #2
 800228e:	e004      	b.n	800229a <HAL_GPIO_Init+0x1e2>
 8002290:	2303      	movs	r3, #3
 8002292:	e002      	b.n	800229a <HAL_GPIO_Init+0x1e2>
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <HAL_GPIO_Init+0x1e2>
 8002298:	2300      	movs	r3, #0
 800229a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229c:	f002 0203 	and.w	r2, r2, #3
 80022a0:	0092      	lsls	r2, r2, #2
 80022a2:	4093      	lsls	r3, r2
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022aa:	493b      	ldr	r1, [pc, #236]	; (8002398 <HAL_GPIO_Init+0x2e0>)
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	089b      	lsrs	r3, r3, #2
 80022b0:	3302      	adds	r3, #2
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d006      	beq.n	80022d2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022c4:	4b38      	ldr	r3, [pc, #224]	; (80023a8 <HAL_GPIO_Init+0x2f0>)
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	4937      	ldr	r1, [pc, #220]	; (80023a8 <HAL_GPIO_Init+0x2f0>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	608b      	str	r3, [r1, #8]
 80022d0:	e006      	b.n	80022e0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022d2:	4b35      	ldr	r3, [pc, #212]	; (80023a8 <HAL_GPIO_Init+0x2f0>)
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	43db      	mvns	r3, r3
 80022da:	4933      	ldr	r1, [pc, #204]	; (80023a8 <HAL_GPIO_Init+0x2f0>)
 80022dc:	4013      	ands	r3, r2
 80022de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d006      	beq.n	80022fa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022ec:	4b2e      	ldr	r3, [pc, #184]	; (80023a8 <HAL_GPIO_Init+0x2f0>)
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	492d      	ldr	r1, [pc, #180]	; (80023a8 <HAL_GPIO_Init+0x2f0>)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	60cb      	str	r3, [r1, #12]
 80022f8:	e006      	b.n	8002308 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022fa:	4b2b      	ldr	r3, [pc, #172]	; (80023a8 <HAL_GPIO_Init+0x2f0>)
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	43db      	mvns	r3, r3
 8002302:	4929      	ldr	r1, [pc, #164]	; (80023a8 <HAL_GPIO_Init+0x2f0>)
 8002304:	4013      	ands	r3, r2
 8002306:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d006      	beq.n	8002322 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002314:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <HAL_GPIO_Init+0x2f0>)
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	4923      	ldr	r1, [pc, #140]	; (80023a8 <HAL_GPIO_Init+0x2f0>)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]
 8002320:	e006      	b.n	8002330 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002322:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <HAL_GPIO_Init+0x2f0>)
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	43db      	mvns	r3, r3
 800232a:	491f      	ldr	r1, [pc, #124]	; (80023a8 <HAL_GPIO_Init+0x2f0>)
 800232c:	4013      	ands	r3, r2
 800232e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d006      	beq.n	800234a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800233c:	4b1a      	ldr	r3, [pc, #104]	; (80023a8 <HAL_GPIO_Init+0x2f0>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4919      	ldr	r1, [pc, #100]	; (80023a8 <HAL_GPIO_Init+0x2f0>)
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	4313      	orrs	r3, r2
 8002346:	600b      	str	r3, [r1, #0]
 8002348:	e006      	b.n	8002358 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800234a:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <HAL_GPIO_Init+0x2f0>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	43db      	mvns	r3, r3
 8002352:	4915      	ldr	r1, [pc, #84]	; (80023a8 <HAL_GPIO_Init+0x2f0>)
 8002354:	4013      	ands	r3, r2
 8002356:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	3301      	adds	r3, #1
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	fa22 f303 	lsr.w	r3, r2, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	f47f aeaf 	bne.w	80020cc <HAL_GPIO_Init+0x14>
  }
}
 800236e:	bf00      	nop
 8002370:	bf00      	nop
 8002372:	372c      	adds	r7, #44	; 0x2c
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	10320000 	.word	0x10320000
 8002380:	10310000 	.word	0x10310000
 8002384:	10220000 	.word	0x10220000
 8002388:	10210000 	.word	0x10210000
 800238c:	10120000 	.word	0x10120000
 8002390:	10110000 	.word	0x10110000
 8002394:	40021000 	.word	0x40021000
 8002398:	40010000 	.word	0x40010000
 800239c:	40010800 	.word	0x40010800
 80023a0:	40010c00 	.word	0x40010c00
 80023a4:	40011000 	.word	0x40011000
 80023a8:	40010400 	.word	0x40010400

080023ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	887b      	ldrh	r3, [r7, #2]
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
 80023c8:	e001      	b.n	80023ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023ca:	2300      	movs	r3, #0
 80023cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr

080023da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	460b      	mov	r3, r1
 80023e4:	807b      	strh	r3, [r7, #2]
 80023e6:	4613      	mov	r3, r2
 80023e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023ea:	787b      	ldrb	r3, [r7, #1]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023f0:	887a      	ldrh	r2, [r7, #2]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023f6:	e003      	b.n	8002400 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023f8:	887b      	ldrh	r3, [r7, #2]
 80023fa:	041a      	lsls	r2, r3, #16
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	611a      	str	r2, [r3, #16]
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr

0800240a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800240a:	b480      	push	{r7}
 800240c:	b085      	sub	sp, #20
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	460b      	mov	r3, r1
 8002414:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800241c:	887a      	ldrh	r2, [r7, #2]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4013      	ands	r3, r2
 8002422:	041a      	lsls	r2, r3, #16
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	43d9      	mvns	r1, r3
 8002428:	887b      	ldrh	r3, [r7, #2]
 800242a:	400b      	ands	r3, r1
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	611a      	str	r2, [r3, #16]
}
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr

0800243c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e26c      	b.n	8002928 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 8087 	beq.w	800256a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800245c:	4b92      	ldr	r3, [pc, #584]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 030c 	and.w	r3, r3, #12
 8002464:	2b04      	cmp	r3, #4
 8002466:	d00c      	beq.n	8002482 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002468:	4b8f      	ldr	r3, [pc, #572]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 030c 	and.w	r3, r3, #12
 8002470:	2b08      	cmp	r3, #8
 8002472:	d112      	bne.n	800249a <HAL_RCC_OscConfig+0x5e>
 8002474:	4b8c      	ldr	r3, [pc, #560]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002480:	d10b      	bne.n	800249a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002482:	4b89      	ldr	r3, [pc, #548]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d06c      	beq.n	8002568 <HAL_RCC_OscConfig+0x12c>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d168      	bne.n	8002568 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e246      	b.n	8002928 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a2:	d106      	bne.n	80024b2 <HAL_RCC_OscConfig+0x76>
 80024a4:	4b80      	ldr	r3, [pc, #512]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a7f      	ldr	r2, [pc, #508]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80024aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	e02e      	b.n	8002510 <HAL_RCC_OscConfig+0xd4>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10c      	bne.n	80024d4 <HAL_RCC_OscConfig+0x98>
 80024ba:	4b7b      	ldr	r3, [pc, #492]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a7a      	ldr	r2, [pc, #488]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	4b78      	ldr	r3, [pc, #480]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a77      	ldr	r2, [pc, #476]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	e01d      	b.n	8002510 <HAL_RCC_OscConfig+0xd4>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCC_OscConfig+0xbc>
 80024de:	4b72      	ldr	r3, [pc, #456]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a71      	ldr	r2, [pc, #452]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	4b6f      	ldr	r3, [pc, #444]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a6e      	ldr	r2, [pc, #440]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80024f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e00b      	b.n	8002510 <HAL_RCC_OscConfig+0xd4>
 80024f8:	4b6b      	ldr	r3, [pc, #428]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a6a      	ldr	r2, [pc, #424]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80024fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	4b68      	ldr	r3, [pc, #416]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a67      	ldr	r2, [pc, #412]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 800250a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800250e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d013      	beq.n	8002540 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7ff fc04 	bl	8001d24 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002520:	f7ff fc00 	bl	8001d24 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e1fa      	b.n	8002928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002532:	4b5d      	ldr	r3, [pc, #372]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0xe4>
 800253e:	e014      	b.n	800256a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7ff fbf0 	bl	8001d24 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002548:	f7ff fbec 	bl	8001d24 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b64      	cmp	r3, #100	; 0x64
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e1e6      	b.n	8002928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255a:	4b53      	ldr	r3, [pc, #332]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x10c>
 8002566:	e000      	b.n	800256a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d063      	beq.n	800263e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002576:	4b4c      	ldr	r3, [pc, #304]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00b      	beq.n	800259a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002582:	4b49      	ldr	r3, [pc, #292]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b08      	cmp	r3, #8
 800258c:	d11c      	bne.n	80025c8 <HAL_RCC_OscConfig+0x18c>
 800258e:	4b46      	ldr	r3, [pc, #280]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d116      	bne.n	80025c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259a:	4b43      	ldr	r3, [pc, #268]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d005      	beq.n	80025b2 <HAL_RCC_OscConfig+0x176>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d001      	beq.n	80025b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e1ba      	b.n	8002928 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b2:	4b3d      	ldr	r3, [pc, #244]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4939      	ldr	r1, [pc, #228]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c6:	e03a      	b.n	800263e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d020      	beq.n	8002612 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d0:	4b36      	ldr	r3, [pc, #216]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d6:	f7ff fba5 	bl	8001d24 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025de:	f7ff fba1 	bl	8001d24 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e19b      	b.n	8002928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f0:	4b2d      	ldr	r3, [pc, #180]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0f0      	beq.n	80025de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fc:	4b2a      	ldr	r3, [pc, #168]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4927      	ldr	r1, [pc, #156]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 800260c:	4313      	orrs	r3, r2
 800260e:	600b      	str	r3, [r1, #0]
 8002610:	e015      	b.n	800263e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002612:	4b26      	ldr	r3, [pc, #152]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7ff fb84 	bl	8001d24 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002620:	f7ff fb80 	bl	8001d24 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e17a      	b.n	8002928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002632:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d03a      	beq.n	80026c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d019      	beq.n	8002686 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002652:	4b17      	ldr	r3, [pc, #92]	; (80026b0 <HAL_RCC_OscConfig+0x274>)
 8002654:	2201      	movs	r2, #1
 8002656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002658:	f7ff fb64 	bl	8001d24 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002660:	f7ff fb60 	bl	8001d24 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e15a      	b.n	8002928 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002672:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <HAL_RCC_OscConfig+0x26c>)
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f0      	beq.n	8002660 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800267e:	2001      	movs	r0, #1
 8002680:	f000 facc 	bl	8002c1c <RCC_Delay>
 8002684:	e01c      	b.n	80026c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002686:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <HAL_RCC_OscConfig+0x274>)
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268c:	f7ff fb4a 	bl	8001d24 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002692:	e00f      	b.n	80026b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002694:	f7ff fb46 	bl	8001d24 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d908      	bls.n	80026b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e140      	b.n	8002928 <HAL_RCC_OscConfig+0x4ec>
 80026a6:	bf00      	nop
 80026a8:	40021000 	.word	0x40021000
 80026ac:	42420000 	.word	0x42420000
 80026b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b4:	4b9e      	ldr	r3, [pc, #632]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1e9      	bne.n	8002694 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 80a6 	beq.w	800281a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ce:	2300      	movs	r3, #0
 80026d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d2:	4b97      	ldr	r3, [pc, #604]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10d      	bne.n	80026fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	4b94      	ldr	r3, [pc, #592]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	4a93      	ldr	r2, [pc, #588]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 80026e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e8:	61d3      	str	r3, [r2, #28]
 80026ea:	4b91      	ldr	r3, [pc, #580]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f6:	2301      	movs	r3, #1
 80026f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fa:	4b8e      	ldr	r3, [pc, #568]	; (8002934 <HAL_RCC_OscConfig+0x4f8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002702:	2b00      	cmp	r3, #0
 8002704:	d118      	bne.n	8002738 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002706:	4b8b      	ldr	r3, [pc, #556]	; (8002934 <HAL_RCC_OscConfig+0x4f8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a8a      	ldr	r2, [pc, #552]	; (8002934 <HAL_RCC_OscConfig+0x4f8>)
 800270c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002712:	f7ff fb07 	bl	8001d24 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271a:	f7ff fb03 	bl	8001d24 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b64      	cmp	r3, #100	; 0x64
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e0fd      	b.n	8002928 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272c:	4b81      	ldr	r3, [pc, #516]	; (8002934 <HAL_RCC_OscConfig+0x4f8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d106      	bne.n	800274e <HAL_RCC_OscConfig+0x312>
 8002740:	4b7b      	ldr	r3, [pc, #492]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	4a7a      	ldr	r2, [pc, #488]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6213      	str	r3, [r2, #32]
 800274c:	e02d      	b.n	80027aa <HAL_RCC_OscConfig+0x36e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10c      	bne.n	8002770 <HAL_RCC_OscConfig+0x334>
 8002756:	4b76      	ldr	r3, [pc, #472]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	4a75      	ldr	r2, [pc, #468]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	6213      	str	r3, [r2, #32]
 8002762:	4b73      	ldr	r3, [pc, #460]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	4a72      	ldr	r2, [pc, #456]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 8002768:	f023 0304 	bic.w	r3, r3, #4
 800276c:	6213      	str	r3, [r2, #32]
 800276e:	e01c      	b.n	80027aa <HAL_RCC_OscConfig+0x36e>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b05      	cmp	r3, #5
 8002776:	d10c      	bne.n	8002792 <HAL_RCC_OscConfig+0x356>
 8002778:	4b6d      	ldr	r3, [pc, #436]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	4a6c      	ldr	r2, [pc, #432]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 800277e:	f043 0304 	orr.w	r3, r3, #4
 8002782:	6213      	str	r3, [r2, #32]
 8002784:	4b6a      	ldr	r3, [pc, #424]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	4a69      	ldr	r2, [pc, #420]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6213      	str	r3, [r2, #32]
 8002790:	e00b      	b.n	80027aa <HAL_RCC_OscConfig+0x36e>
 8002792:	4b67      	ldr	r3, [pc, #412]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	4a66      	ldr	r2, [pc, #408]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 8002798:	f023 0301 	bic.w	r3, r3, #1
 800279c:	6213      	str	r3, [r2, #32]
 800279e:	4b64      	ldr	r3, [pc, #400]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	4a63      	ldr	r2, [pc, #396]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 80027a4:	f023 0304 	bic.w	r3, r3, #4
 80027a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d015      	beq.n	80027de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b2:	f7ff fab7 	bl	8001d24 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b8:	e00a      	b.n	80027d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ba:	f7ff fab3 	bl	8001d24 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e0ab      	b.n	8002928 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d0:	4b57      	ldr	r3, [pc, #348]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0ee      	beq.n	80027ba <HAL_RCC_OscConfig+0x37e>
 80027dc:	e014      	b.n	8002808 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027de:	f7ff faa1 	bl	8001d24 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e4:	e00a      	b.n	80027fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e6:	f7ff fa9d 	bl	8001d24 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e095      	b.n	8002928 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fc:	4b4c      	ldr	r3, [pc, #304]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1ee      	bne.n	80027e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002808:	7dfb      	ldrb	r3, [r7, #23]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d105      	bne.n	800281a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280e:	4b48      	ldr	r3, [pc, #288]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	4a47      	ldr	r2, [pc, #284]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 8002814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002818:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 8081 	beq.w	8002926 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002824:	4b42      	ldr	r3, [pc, #264]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b08      	cmp	r3, #8
 800282e:	d061      	beq.n	80028f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d146      	bne.n	80028c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002838:	4b3f      	ldr	r3, [pc, #252]	; (8002938 <HAL_RCC_OscConfig+0x4fc>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283e:	f7ff fa71 	bl	8001d24 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002846:	f7ff fa6d 	bl	8001d24 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e067      	b.n	8002928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002858:	4b35      	ldr	r3, [pc, #212]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f0      	bne.n	8002846 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286c:	d108      	bne.n	8002880 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800286e:	4b30      	ldr	r3, [pc, #192]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	492d      	ldr	r1, [pc, #180]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002880:	4b2b      	ldr	r3, [pc, #172]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a19      	ldr	r1, [r3, #32]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	430b      	orrs	r3, r1
 8002892:	4927      	ldr	r1, [pc, #156]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 8002894:	4313      	orrs	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002898:	4b27      	ldr	r3, [pc, #156]	; (8002938 <HAL_RCC_OscConfig+0x4fc>)
 800289a:	2201      	movs	r2, #1
 800289c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289e:	f7ff fa41 	bl	8001d24 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a6:	f7ff fa3d 	bl	8001d24 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e037      	b.n	8002928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028b8:	4b1d      	ldr	r3, [pc, #116]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x46a>
 80028c4:	e02f      	b.n	8002926 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c6:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <HAL_RCC_OscConfig+0x4fc>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7ff fa2a 	bl	8001d24 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d4:	f7ff fa26 	bl	8001d24 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e020      	b.n	8002928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e6:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x498>
 80028f2:	e018      	b.n	8002926 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e013      	b.n	8002928 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_RCC_OscConfig+0x4f4>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	429a      	cmp	r2, r3
 8002912:	d106      	bne.n	8002922 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291e:	429a      	cmp	r2, r3
 8002920:	d001      	beq.n	8002926 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40021000 	.word	0x40021000
 8002934:	40007000 	.word	0x40007000
 8002938:	42420060 	.word	0x42420060

0800293c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0d0      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002950:	4b6a      	ldr	r3, [pc, #424]	; (8002afc <HAL_RCC_ClockConfig+0x1c0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d910      	bls.n	8002980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295e:	4b67      	ldr	r3, [pc, #412]	; (8002afc <HAL_RCC_ClockConfig+0x1c0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f023 0207 	bic.w	r2, r3, #7
 8002966:	4965      	ldr	r1, [pc, #404]	; (8002afc <HAL_RCC_ClockConfig+0x1c0>)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	4313      	orrs	r3, r2
 800296c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800296e:	4b63      	ldr	r3, [pc, #396]	; (8002afc <HAL_RCC_ClockConfig+0x1c0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d001      	beq.n	8002980 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0b8      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d020      	beq.n	80029ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002998:	4b59      	ldr	r3, [pc, #356]	; (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4a58      	ldr	r2, [pc, #352]	; (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029b0:	4b53      	ldr	r3, [pc, #332]	; (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	4a52      	ldr	r2, [pc, #328]	; (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029bc:	4b50      	ldr	r3, [pc, #320]	; (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	494d      	ldr	r1, [pc, #308]	; (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d040      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d107      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e2:	4b47      	ldr	r3, [pc, #284]	; (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d115      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e07f      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d107      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fa:	4b41      	ldr	r3, [pc, #260]	; (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e073      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0a:	4b3d      	ldr	r3, [pc, #244]	; (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e06b      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a1a:	4b39      	ldr	r3, [pc, #228]	; (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f023 0203 	bic.w	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	4936      	ldr	r1, [pc, #216]	; (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a2c:	f7ff f97a 	bl	8001d24 <HAL_GetTick>
 8002a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a32:	e00a      	b.n	8002a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a34:	f7ff f976 	bl	8001d24 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e053      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4a:	4b2d      	ldr	r3, [pc, #180]	; (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 020c 	and.w	r2, r3, #12
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d1eb      	bne.n	8002a34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a5c:	4b27      	ldr	r3, [pc, #156]	; (8002afc <HAL_RCC_ClockConfig+0x1c0>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d210      	bcs.n	8002a8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6a:	4b24      	ldr	r3, [pc, #144]	; (8002afc <HAL_RCC_ClockConfig+0x1c0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f023 0207 	bic.w	r2, r3, #7
 8002a72:	4922      	ldr	r1, [pc, #136]	; (8002afc <HAL_RCC_ClockConfig+0x1c0>)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	4b20      	ldr	r3, [pc, #128]	; (8002afc <HAL_RCC_ClockConfig+0x1c0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e032      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a98:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4916      	ldr	r1, [pc, #88]	; (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d009      	beq.n	8002aca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ab6:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	490e      	ldr	r1, [pc, #56]	; (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aca:	f000 f821 	bl	8002b10 <HAL_RCC_GetSysClockFreq>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	091b      	lsrs	r3, r3, #4
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	490a      	ldr	r1, [pc, #40]	; (8002b04 <HAL_RCC_ClockConfig+0x1c8>)
 8002adc:	5ccb      	ldrb	r3, [r1, r3]
 8002ade:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae2:	4a09      	ldr	r2, [pc, #36]	; (8002b08 <HAL_RCC_ClockConfig+0x1cc>)
 8002ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ae6:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <HAL_RCC_ClockConfig+0x1d0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff f8d8 	bl	8001ca0 <HAL_InitTick>

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40022000 	.word	0x40022000
 8002b00:	40021000 	.word	0x40021000
 8002b04:	08004978 	.word	0x08004978
 8002b08:	20000064 	.word	0x20000064
 8002b0c:	20000068 	.word	0x20000068

08002b10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	2300      	movs	r3, #0
 8002b24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 030c 	and.w	r3, r3, #12
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d002      	beq.n	8002b40 <HAL_RCC_GetSysClockFreq+0x30>
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d003      	beq.n	8002b46 <HAL_RCC_GetSysClockFreq+0x36>
 8002b3e:	e027      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b40:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b42:	613b      	str	r3, [r7, #16]
      break;
 8002b44:	e027      	b.n	8002b96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	0c9b      	lsrs	r3, r3, #18
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	4a17      	ldr	r2, [pc, #92]	; (8002bac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b50:	5cd3      	ldrb	r3, [r2, r3]
 8002b52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d010      	beq.n	8002b80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b5e:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	0c5b      	lsrs	r3, r3, #17
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	4a11      	ldr	r2, [pc, #68]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b6a:	5cd3      	ldrb	r3, [r2, r3]
 8002b6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a0d      	ldr	r2, [pc, #52]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b72:	fb02 f203 	mul.w	r2, r2, r3
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	e004      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a0c      	ldr	r2, [pc, #48]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b84:	fb02 f303 	mul.w	r3, r2, r3
 8002b88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	613b      	str	r3, [r7, #16]
      break;
 8002b8e:	e002      	b.n	8002b96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b92:	613b      	str	r3, [r7, #16]
      break;
 8002b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b96:	693b      	ldr	r3, [r7, #16]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	371c      	adds	r7, #28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	007a1200 	.word	0x007a1200
 8002bac:	08004990 	.word	0x08004990
 8002bb0:	080049a0 	.word	0x080049a0
 8002bb4:	003d0900 	.word	0x003d0900

08002bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bbc:	4b02      	ldr	r3, [pc, #8]	; (8002bc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr
 8002bc8:	20000064 	.word	0x20000064

08002bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bd0:	f7ff fff2 	bl	8002bb8 <HAL_RCC_GetHCLKFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	0a1b      	lsrs	r3, r3, #8
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	4903      	ldr	r1, [pc, #12]	; (8002bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	08004988 	.word	0x08004988

08002bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bf8:	f7ff ffde 	bl	8002bb8 <HAL_RCC_GetHCLKFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	0adb      	lsrs	r3, r3, #11
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	4903      	ldr	r1, [pc, #12]	; (8002c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40021000 	.word	0x40021000
 8002c18:	08004988 	.word	0x08004988

08002c1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c24:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <RCC_Delay+0x34>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <RCC_Delay+0x38>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	0a5b      	lsrs	r3, r3, #9
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	fb02 f303 	mul.w	r3, r2, r3
 8002c36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c38:	bf00      	nop
  }
  while (Delay --);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1e5a      	subs	r2, r3, #1
 8002c3e:	60fa      	str	r2, [r7, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f9      	bne.n	8002c38 <RCC_Delay+0x1c>
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	20000064 	.word	0x20000064
 8002c54:	10624dd3 	.word	0x10624dd3

08002c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e041      	b.n	8002cee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7fe fddc 	bl	800183c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3304      	adds	r3, #4
 8002c94:	4619      	mov	r1, r3
 8002c96:	4610      	mov	r0, r2
 8002c98:	f000 fa56 	bl	8003148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d001      	beq.n	8002d10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e035      	b.n	8002d7c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a16      	ldr	r2, [pc, #88]	; (8002d88 <HAL_TIM_Base_Start_IT+0x90>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d009      	beq.n	8002d46 <HAL_TIM_Base_Start_IT+0x4e>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3a:	d004      	beq.n	8002d46 <HAL_TIM_Base_Start_IT+0x4e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a12      	ldr	r2, [pc, #72]	; (8002d8c <HAL_TIM_Base_Start_IT+0x94>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d111      	bne.n	8002d6a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2b06      	cmp	r3, #6
 8002d56:	d010      	beq.n	8002d7a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d68:	e007      	b.n	8002d7a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0201 	orr.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40012c00 	.word	0x40012c00
 8002d8c:	40000400 	.word	0x40000400

08002d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d020      	beq.n	8002df4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01b      	beq.n	8002df4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0202 	mvn.w	r2, #2
 8002dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f998 	bl	8003110 <HAL_TIM_IC_CaptureCallback>
 8002de0:	e005      	b.n	8002dee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f98b 	bl	80030fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f99a 	bl	8003122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d020      	beq.n	8002e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01b      	beq.n	8002e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0204 	mvn.w	r2, #4
 8002e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2202      	movs	r2, #2
 8002e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f972 	bl	8003110 <HAL_TIM_IC_CaptureCallback>
 8002e2c:	e005      	b.n	8002e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f965 	bl	80030fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f974 	bl	8003122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d020      	beq.n	8002e8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d01b      	beq.n	8002e8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f06f 0208 	mvn.w	r2, #8
 8002e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2204      	movs	r2, #4
 8002e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f94c 	bl	8003110 <HAL_TIM_IC_CaptureCallback>
 8002e78:	e005      	b.n	8002e86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f93f 	bl	80030fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f94e 	bl	8003122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f003 0310 	and.w	r3, r3, #16
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d020      	beq.n	8002ed8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01b      	beq.n	8002ed8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f06f 0210 	mvn.w	r2, #16
 8002ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2208      	movs	r2, #8
 8002eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f926 	bl	8003110 <HAL_TIM_IC_CaptureCallback>
 8002ec4:	e005      	b.n	8002ed2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f919 	bl	80030fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f928 	bl	8003122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00c      	beq.n	8002efc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d007      	beq.n	8002efc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0201 	mvn.w	r2, #1
 8002ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fe fa92 	bl	8001420 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00c      	beq.n	8002f20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d007      	beq.n	8002f20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fa6f 	bl	80033fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00c      	beq.n	8002f44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d007      	beq.n	8002f44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f8f8 	bl	8003134 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f003 0320 	and.w	r3, r3, #32
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00c      	beq.n	8002f68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d007      	beq.n	8002f68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0220 	mvn.w	r2, #32
 8002f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fa42 	bl	80033ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f68:	bf00      	nop
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_TIM_ConfigClockSource+0x1c>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e0b4      	b.n	80030f6 <HAL_TIM_ConfigClockSource+0x186>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fc4:	d03e      	beq.n	8003044 <HAL_TIM_ConfigClockSource+0xd4>
 8002fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fca:	f200 8087 	bhi.w	80030dc <HAL_TIM_ConfigClockSource+0x16c>
 8002fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd2:	f000 8086 	beq.w	80030e2 <HAL_TIM_ConfigClockSource+0x172>
 8002fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fda:	d87f      	bhi.n	80030dc <HAL_TIM_ConfigClockSource+0x16c>
 8002fdc:	2b70      	cmp	r3, #112	; 0x70
 8002fde:	d01a      	beq.n	8003016 <HAL_TIM_ConfigClockSource+0xa6>
 8002fe0:	2b70      	cmp	r3, #112	; 0x70
 8002fe2:	d87b      	bhi.n	80030dc <HAL_TIM_ConfigClockSource+0x16c>
 8002fe4:	2b60      	cmp	r3, #96	; 0x60
 8002fe6:	d050      	beq.n	800308a <HAL_TIM_ConfigClockSource+0x11a>
 8002fe8:	2b60      	cmp	r3, #96	; 0x60
 8002fea:	d877      	bhi.n	80030dc <HAL_TIM_ConfigClockSource+0x16c>
 8002fec:	2b50      	cmp	r3, #80	; 0x50
 8002fee:	d03c      	beq.n	800306a <HAL_TIM_ConfigClockSource+0xfa>
 8002ff0:	2b50      	cmp	r3, #80	; 0x50
 8002ff2:	d873      	bhi.n	80030dc <HAL_TIM_ConfigClockSource+0x16c>
 8002ff4:	2b40      	cmp	r3, #64	; 0x40
 8002ff6:	d058      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0x13a>
 8002ff8:	2b40      	cmp	r3, #64	; 0x40
 8002ffa:	d86f      	bhi.n	80030dc <HAL_TIM_ConfigClockSource+0x16c>
 8002ffc:	2b30      	cmp	r3, #48	; 0x30
 8002ffe:	d064      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0x15a>
 8003000:	2b30      	cmp	r3, #48	; 0x30
 8003002:	d86b      	bhi.n	80030dc <HAL_TIM_ConfigClockSource+0x16c>
 8003004:	2b20      	cmp	r3, #32
 8003006:	d060      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0x15a>
 8003008:	2b20      	cmp	r3, #32
 800300a:	d867      	bhi.n	80030dc <HAL_TIM_ConfigClockSource+0x16c>
 800300c:	2b00      	cmp	r3, #0
 800300e:	d05c      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0x15a>
 8003010:	2b10      	cmp	r3, #16
 8003012:	d05a      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0x15a>
 8003014:	e062      	b.n	80030dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6818      	ldr	r0, [r3, #0]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	6899      	ldr	r1, [r3, #8]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f000 f96a 	bl	80032fe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003038:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	609a      	str	r2, [r3, #8]
      break;
 8003042:	e04f      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6818      	ldr	r0, [r3, #0]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	6899      	ldr	r1, [r3, #8]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f000 f953 	bl	80032fe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003066:	609a      	str	r2, [r3, #8]
      break;
 8003068:	e03c      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6818      	ldr	r0, [r3, #0]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	6859      	ldr	r1, [r3, #4]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	461a      	mov	r2, r3
 8003078:	f000 f8ca 	bl	8003210 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2150      	movs	r1, #80	; 0x50
 8003082:	4618      	mov	r0, r3
 8003084:	f000 f921 	bl	80032ca <TIM_ITRx_SetConfig>
      break;
 8003088:	e02c      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	6859      	ldr	r1, [r3, #4]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	461a      	mov	r2, r3
 8003098:	f000 f8e8 	bl	800326c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2160      	movs	r1, #96	; 0x60
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 f911 	bl	80032ca <TIM_ITRx_SetConfig>
      break;
 80030a8:	e01c      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6859      	ldr	r1, [r3, #4]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	461a      	mov	r2, r3
 80030b8:	f000 f8aa 	bl	8003210 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2140      	movs	r1, #64	; 0x40
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 f901 	bl	80032ca <TIM_ITRx_SetConfig>
      break;
 80030c8:	e00c      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4619      	mov	r1, r3
 80030d4:	4610      	mov	r0, r2
 80030d6:	f000 f8f8 	bl	80032ca <TIM_ITRx_SetConfig>
      break;
 80030da:	e003      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
      break;
 80030e0:	e000      	b.n	80030e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	bc80      	pop	{r7}
 8003120:	4770      	bx	lr

08003122 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr

08003134 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr
	...

08003148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a2b      	ldr	r2, [pc, #172]	; (8003208 <TIM_Base_SetConfig+0xc0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d007      	beq.n	8003170 <TIM_Base_SetConfig+0x28>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003166:	d003      	beq.n	8003170 <TIM_Base_SetConfig+0x28>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a28      	ldr	r2, [pc, #160]	; (800320c <TIM_Base_SetConfig+0xc4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d108      	bne.n	8003182 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a20      	ldr	r2, [pc, #128]	; (8003208 <TIM_Base_SetConfig+0xc0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d007      	beq.n	800319a <TIM_Base_SetConfig+0x52>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003190:	d003      	beq.n	800319a <TIM_Base_SetConfig+0x52>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a1d      	ldr	r2, [pc, #116]	; (800320c <TIM_Base_SetConfig+0xc4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d108      	bne.n	80031ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a0d      	ldr	r2, [pc, #52]	; (8003208 <TIM_Base_SetConfig+0xc0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d103      	bne.n	80031e0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f023 0201 	bic.w	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	611a      	str	r2, [r3, #16]
  }
}
 80031fe:	bf00      	nop
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr
 8003208:	40012c00 	.word	0x40012c00
 800320c:	40000400 	.word	0x40000400

08003210 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	f023 0201 	bic.w	r2, r3, #1
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800323a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f023 030a 	bic.w	r3, r3, #10
 800324c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	621a      	str	r2, [r3, #32]
}
 8003262:	bf00      	nop
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	f023 0210 	bic.w	r2, r3, #16
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	031b      	lsls	r3, r3, #12
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	621a      	str	r2, [r3, #32]
}
 80032c0:	bf00      	nop
 80032c2:	371c      	adds	r7, #28
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr

080032ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b085      	sub	sp, #20
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f043 0307 	orr.w	r3, r3, #7
 80032ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	609a      	str	r2, [r3, #8]
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr

080032fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032fe:	b480      	push	{r7}
 8003300:	b087      	sub	sp, #28
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	607a      	str	r2, [r7, #4]
 800330a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003318:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	021a      	lsls	r2, r3, #8
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	431a      	orrs	r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	4313      	orrs	r3, r2
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	609a      	str	r2, [r3, #8]
}
 8003332:	bf00      	nop
 8003334:	371c      	adds	r7, #28
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr

0800333c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003350:	2302      	movs	r3, #2
 8003352:	e041      	b.n	80033d8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a14      	ldr	r2, [pc, #80]	; (80033e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d009      	beq.n	80033ac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a0:	d004      	beq.n	80033ac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a10      	ldr	r2, [pc, #64]	; (80033e8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d10c      	bne.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40012c00 	.word	0x40012c00
 80033e8:	40000400 	.word	0x40000400

080033ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr

080033fe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr

08003410 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e042      	b.n	80034a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fe fa24 	bl	8001884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2224      	movs	r2, #36	; 0x24
 8003440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003452:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fd63 	bl	8003f20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003468:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003478:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003488:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08a      	sub	sp, #40	; 0x28
 80034b4:	af02      	add	r7, sp, #8
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	4613      	mov	r3, r2
 80034be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d175      	bne.n	80035bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <HAL_UART_Transmit+0x2c>
 80034d6:	88fb      	ldrh	r3, [r7, #6]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e06e      	b.n	80035be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2221      	movs	r2, #33	; 0x21
 80034ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ee:	f7fe fc19 	bl	8001d24 <HAL_GetTick>
 80034f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	88fa      	ldrh	r2, [r7, #6]
 80034f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	88fa      	ldrh	r2, [r7, #6]
 80034fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003508:	d108      	bne.n	800351c <HAL_UART_Transmit+0x6c>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d104      	bne.n	800351c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	61bb      	str	r3, [r7, #24]
 800351a:	e003      	b.n	8003524 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003520:	2300      	movs	r3, #0
 8003522:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003524:	e02e      	b.n	8003584 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2200      	movs	r2, #0
 800352e:	2180      	movs	r1, #128	; 0x80
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 fb01 	bl	8003b38 <UART_WaitOnFlagUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e03a      	b.n	80035be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10b      	bne.n	8003566 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800355c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	3302      	adds	r3, #2
 8003562:	61bb      	str	r3, [r7, #24]
 8003564:	e007      	b.n	8003576 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	781a      	ldrb	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	3301      	adds	r3, #1
 8003574:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1cb      	bne.n	8003526 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2200      	movs	r2, #0
 8003596:	2140      	movs	r1, #64	; 0x40
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 facd 	bl	8003b38 <UART_WaitOnFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e006      	b.n	80035be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	e000      	b.n	80035be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80035bc:	2302      	movs	r3, #2
  }
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3720      	adds	r7, #32
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b0ba      	sub	sp, #232	; 0xe8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003606:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10f      	bne.n	800362e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800360e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003612:	f003 0320 	and.w	r3, r3, #32
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <HAL_UART_IRQHandler+0x66>
 800361a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fbbc 	bl	8003da4 <UART_Receive_IT>
      return;
 800362c:	e25b      	b.n	8003ae6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800362e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 80de 	beq.w	80037f4 <HAL_UART_IRQHandler+0x22c>
 8003638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d106      	bne.n	8003652 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003648:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 80d1 	beq.w	80037f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00b      	beq.n	8003676 <HAL_UART_IRQHandler+0xae>
 800365e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003666:	2b00      	cmp	r3, #0
 8003668:	d005      	beq.n	8003676 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	f043 0201 	orr.w	r2, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00b      	beq.n	800369a <HAL_UART_IRQHandler+0xd2>
 8003682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	f043 0202 	orr.w	r2, r3, #2
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800369a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <HAL_UART_IRQHandler+0xf6>
 80036a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	f043 0204 	orr.w	r2, r3, #4
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d011      	beq.n	80036ee <HAL_UART_IRQHandler+0x126>
 80036ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d105      	bne.n	80036e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	f043 0208 	orr.w	r2, r3, #8
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 81f2 	beq.w	8003adc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <HAL_UART_IRQHandler+0x14e>
 8003704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fb47 	bl	8003da4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003720:	2b00      	cmp	r3, #0
 8003722:	bf14      	ite	ne
 8003724:	2301      	movne	r3, #1
 8003726:	2300      	moveq	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d103      	bne.n	8003742 <HAL_UART_IRQHandler+0x17a>
 800373a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800373e:	2b00      	cmp	r3, #0
 8003740:	d04f      	beq.n	80037e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fa51 	bl	8003bea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	d041      	beq.n	80037da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3314      	adds	r3, #20
 800375c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003760:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003764:	e853 3f00 	ldrex	r3, [r3]
 8003768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800376c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003774:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3314      	adds	r3, #20
 800377e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003782:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003786:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800378e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003792:	e841 2300 	strex	r3, r2, [r1]
 8003796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800379a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1d9      	bne.n	8003756 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d013      	beq.n	80037d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ae:	4a7e      	ldr	r2, [pc, #504]	; (80039a8 <HAL_UART_IRQHandler+0x3e0>)
 80037b0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe fc06 	bl	8001fc8 <HAL_DMA_Abort_IT>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d016      	beq.n	80037f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037cc:	4610      	mov	r0, r2
 80037ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d0:	e00e      	b.n	80037f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f99c 	bl	8003b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d8:	e00a      	b.n	80037f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f998 	bl	8003b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e0:	e006      	b.n	80037f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f994 	bl	8003b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80037ee:	e175      	b.n	8003adc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f0:	bf00      	nop
    return;
 80037f2:	e173      	b.n	8003adc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	f040 814f 	bne.w	8003a9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 8148 	beq.w	8003a9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800380c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003810:	f003 0310 	and.w	r3, r3, #16
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 8141 	beq.w	8003a9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800381a:	2300      	movs	r3, #0
 800381c:	60bb      	str	r3, [r7, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	60bb      	str	r3, [r7, #8]
 800382e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 80b6 	beq.w	80039ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800384c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 8145 	beq.w	8003ae0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800385a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800385e:	429a      	cmp	r2, r3
 8003860:	f080 813e 	bcs.w	8003ae0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800386a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	2b20      	cmp	r3, #32
 8003874:	f000 8088 	beq.w	8003988 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	330c      	adds	r3, #12
 800387e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003882:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003886:	e853 3f00 	ldrex	r3, [r3]
 800388a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800388e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003892:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003896:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	330c      	adds	r3, #12
 80038a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80038a4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80038b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038b4:	e841 2300 	strex	r3, r2, [r1]
 80038b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80038bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1d9      	bne.n	8003878 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3314      	adds	r3, #20
 80038ca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ce:	e853 3f00 	ldrex	r3, [r3]
 80038d2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80038d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038d6:	f023 0301 	bic.w	r3, r3, #1
 80038da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3314      	adds	r3, #20
 80038e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038e8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038ec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038f4:	e841 2300 	strex	r3, r2, [r1]
 80038f8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1e1      	bne.n	80038c4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3314      	adds	r3, #20
 8003906:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003908:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800390a:	e853 3f00 	ldrex	r3, [r3]
 800390e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003916:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3314      	adds	r3, #20
 8003920:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003924:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003926:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003928:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800392a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800392c:	e841 2300 	strex	r3, r2, [r1]
 8003930:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003932:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1e3      	bne.n	8003900 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	330c      	adds	r3, #12
 800394c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003950:	e853 3f00 	ldrex	r3, [r3]
 8003954:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003958:	f023 0310 	bic.w	r3, r3, #16
 800395c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	330c      	adds	r3, #12
 8003966:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800396a:	65ba      	str	r2, [r7, #88]	; 0x58
 800396c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003970:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003972:	e841 2300 	strex	r3, r2, [r1]
 8003976:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1e3      	bne.n	8003946 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe fae5 	bl	8001f52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003996:	b29b      	uxth	r3, r3
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	b29b      	uxth	r3, r3
 800399c:	4619      	mov	r1, r3
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f8bf 	bl	8003b22 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039a4:	e09c      	b.n	8003ae0 <HAL_UART_IRQHandler+0x518>
 80039a6:	bf00      	nop
 80039a8:	08003caf 	.word	0x08003caf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 808e 	beq.w	8003ae4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80039c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 8089 	beq.w	8003ae4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	330c      	adds	r3, #12
 80039d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039dc:	e853 3f00 	ldrex	r3, [r3]
 80039e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	330c      	adds	r3, #12
 80039f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80039f6:	647a      	str	r2, [r7, #68]	; 0x44
 80039f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039fe:	e841 2300 	strex	r3, r2, [r1]
 8003a02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1e3      	bne.n	80039d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3314      	adds	r3, #20
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	e853 3f00 	ldrex	r3, [r3]
 8003a18:	623b      	str	r3, [r7, #32]
   return(result);
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	f023 0301 	bic.w	r3, r3, #1
 8003a20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3314      	adds	r3, #20
 8003a2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a2e:	633a      	str	r2, [r7, #48]	; 0x30
 8003a30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a36:	e841 2300 	strex	r3, r2, [r1]
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1e3      	bne.n	8003a0a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	330c      	adds	r3, #12
 8003a56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	e853 3f00 	ldrex	r3, [r3]
 8003a5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0310 	bic.w	r3, r3, #16
 8003a66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	330c      	adds	r3, #12
 8003a70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a74:	61fa      	str	r2, [r7, #28]
 8003a76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	69b9      	ldr	r1, [r7, #24]
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	e841 2300 	strex	r3, r2, [r1]
 8003a80:	617b      	str	r3, [r7, #20]
   return(result);
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e3      	bne.n	8003a50 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a92:	4619      	mov	r1, r3
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f844 	bl	8003b22 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a9a:	e023      	b.n	8003ae4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d009      	beq.n	8003abc <HAL_UART_IRQHandler+0x4f4>
 8003aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f90e 	bl	8003cd6 <UART_Transmit_IT>
    return;
 8003aba:	e014      	b.n	8003ae6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00e      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x51e>
 8003ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f94d 	bl	8003d74 <UART_EndTransmit_IT>
    return;
 8003ada:	e004      	b.n	8003ae6 <HAL_UART_IRQHandler+0x51e>
    return;
 8003adc:	bf00      	nop
 8003ade:	e002      	b.n	8003ae6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003ae0:	bf00      	nop
 8003ae2:	e000      	b.n	8003ae6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003ae4:	bf00      	nop
  }
}
 8003ae6:	37e8      	adds	r7, #232	; 0xe8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	4770      	bx	lr

08003afe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr

08003b10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr

08003b22 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr

08003b38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	4613      	mov	r3, r2
 8003b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b48:	e03b      	b.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d037      	beq.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b52:	f7fe f8e7 	bl	8001d24 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	6a3a      	ldr	r2, [r7, #32]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d302      	bcc.n	8003b68 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e03a      	b.n	8003be2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d023      	beq.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b80      	cmp	r3, #128	; 0x80
 8003b7e:	d020      	beq.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b40      	cmp	r3, #64	; 0x40
 8003b84:	d01d      	beq.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d116      	bne.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 f81d 	bl	8003bea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2208      	movs	r2, #8
 8003bb4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e00f      	b.n	8003be2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	bf0c      	ite	eq
 8003bd2:	2301      	moveq	r3, #1
 8003bd4:	2300      	movne	r3, #0
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	461a      	mov	r2, r3
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d0b4      	beq.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b095      	sub	sp, #84	; 0x54
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	330c      	adds	r3, #12
 8003bf8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bfc:	e853 3f00 	ldrex	r3, [r3]
 8003c00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	330c      	adds	r3, #12
 8003c10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c12:	643a      	str	r2, [r7, #64]	; 0x40
 8003c14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1e5      	bne.n	8003bf2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3314      	adds	r3, #20
 8003c2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	e853 3f00 	ldrex	r3, [r3]
 8003c34:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f023 0301 	bic.w	r3, r3, #1
 8003c3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3314      	adds	r3, #20
 8003c44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c4e:	e841 2300 	strex	r3, r2, [r1]
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e5      	bne.n	8003c26 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d119      	bne.n	8003c96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	330c      	adds	r3, #12
 8003c68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	e853 3f00 	ldrex	r3, [r3]
 8003c70:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f023 0310 	bic.w	r3, r3, #16
 8003c78:	647b      	str	r3, [r7, #68]	; 0x44
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c82:	61ba      	str	r2, [r7, #24]
 8003c84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c86:	6979      	ldr	r1, [r7, #20]
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	e841 2300 	strex	r3, r2, [r1]
 8003c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1e5      	bne.n	8003c62 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ca4:	bf00      	nop
 8003ca6:	3754      	adds	r7, #84	; 0x54
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr

08003cae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f7ff ff21 	bl	8003b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b085      	sub	sp, #20
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b21      	cmp	r3, #33	; 0x21
 8003ce8:	d13e      	bne.n	8003d68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf2:	d114      	bne.n	8003d1e <UART_Transmit_IT+0x48>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d110      	bne.n	8003d1e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	1c9a      	adds	r2, r3, #2
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	621a      	str	r2, [r3, #32]
 8003d1c:	e008      	b.n	8003d30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	1c59      	adds	r1, r3, #1
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6211      	str	r1, [r2, #32]
 8003d28:	781a      	ldrb	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10f      	bne.n	8003d64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	e000      	b.n	8003d6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d68:	2302      	movs	r3, #2
  }
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr

08003d74 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d8a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff fea9 	bl	8003aec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b08c      	sub	sp, #48	; 0x30
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b22      	cmp	r3, #34	; 0x22
 8003db6:	f040 80ae 	bne.w	8003f16 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc2:	d117      	bne.n	8003df4 <UART_Receive_IT+0x50>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d113      	bne.n	8003df4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dec:	1c9a      	adds	r2, r3, #2
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	629a      	str	r2, [r3, #40]	; 0x28
 8003df2:	e026      	b.n	8003e42 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e06:	d007      	beq.n	8003e18 <UART_Receive_IT+0x74>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10a      	bne.n	8003e26 <UART_Receive_IT+0x82>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d106      	bne.n	8003e26 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e22:	701a      	strb	r2, [r3, #0]
 8003e24:	e008      	b.n	8003e38 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e36:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d15d      	bne.n	8003f12 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0220 	bic.w	r2, r2, #32
 8003e64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695a      	ldr	r2, [r3, #20]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0201 	bic.w	r2, r2, #1
 8003e84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d135      	bne.n	8003f08 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	330c      	adds	r3, #12
 8003ea8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	e853 3f00 	ldrex	r3, [r3]
 8003eb0:	613b      	str	r3, [r7, #16]
   return(result);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f023 0310 	bic.w	r3, r3, #16
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	330c      	adds	r3, #12
 8003ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec2:	623a      	str	r2, [r7, #32]
 8003ec4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec6:	69f9      	ldr	r1, [r7, #28]
 8003ec8:	6a3a      	ldr	r2, [r7, #32]
 8003eca:	e841 2300 	strex	r3, r2, [r1]
 8003ece:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1e5      	bne.n	8003ea2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0310 	and.w	r3, r3, #16
 8003ee0:	2b10      	cmp	r3, #16
 8003ee2:	d10a      	bne.n	8003efa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003efe:	4619      	mov	r1, r3
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff fe0e 	bl	8003b22 <HAL_UARTEx_RxEventCallback>
 8003f06:	e002      	b.n	8003f0e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff fdf8 	bl	8003afe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e002      	b.n	8003f18 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	e000      	b.n	8003f18 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003f16:	2302      	movs	r3, #2
  }
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3730      	adds	r7, #48	; 0x30
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f5a:	f023 030c 	bic.w	r3, r3, #12
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6812      	ldr	r2, [r2, #0]
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	430b      	orrs	r3, r1
 8003f66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699a      	ldr	r2, [r3, #24]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a2c      	ldr	r2, [pc, #176]	; (8004034 <UART_SetConfig+0x114>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d103      	bne.n	8003f90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f88:	f7fe fe34 	bl	8002bf4 <HAL_RCC_GetPCLK2Freq>
 8003f8c:	60f8      	str	r0, [r7, #12]
 8003f8e:	e002      	b.n	8003f96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f90:	f7fe fe1c 	bl	8002bcc <HAL_RCC_GetPCLK1Freq>
 8003f94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009a      	lsls	r2, r3, #2
 8003fa0:	441a      	add	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fac:	4a22      	ldr	r2, [pc, #136]	; (8004038 <UART_SetConfig+0x118>)
 8003fae:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	0119      	lsls	r1, r3, #4
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009a      	lsls	r2, r3, #2
 8003fc0:	441a      	add	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fcc:	4b1a      	ldr	r3, [pc, #104]	; (8004038 <UART_SetConfig+0x118>)
 8003fce:	fba3 0302 	umull	r0, r3, r3, r2
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	2064      	movs	r0, #100	; 0x64
 8003fd6:	fb00 f303 	mul.w	r3, r0, r3
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	3332      	adds	r3, #50	; 0x32
 8003fe0:	4a15      	ldr	r2, [pc, #84]	; (8004038 <UART_SetConfig+0x118>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fec:	4419      	add	r1, r3
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009a      	lsls	r2, r3, #2
 8003ff8:	441a      	add	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	fbb2 f2f3 	udiv	r2, r2, r3
 8004004:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <UART_SetConfig+0x118>)
 8004006:	fba3 0302 	umull	r0, r3, r3, r2
 800400a:	095b      	lsrs	r3, r3, #5
 800400c:	2064      	movs	r0, #100	; 0x64
 800400e:	fb00 f303 	mul.w	r3, r0, r3
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	3332      	adds	r3, #50	; 0x32
 8004018:	4a07      	ldr	r2, [pc, #28]	; (8004038 <UART_SetConfig+0x118>)
 800401a:	fba2 2303 	umull	r2, r3, r2, r3
 800401e:	095b      	lsrs	r3, r3, #5
 8004020:	f003 020f 	and.w	r2, r3, #15
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	440a      	add	r2, r1
 800402a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800402c:	bf00      	nop
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40013800 	.word	0x40013800
 8004038:	51eb851f 	.word	0x51eb851f

0800403c <__errno>:
 800403c:	4b01      	ldr	r3, [pc, #4]	; (8004044 <__errno+0x8>)
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	20000070 	.word	0x20000070

08004048 <__libc_init_array>:
 8004048:	b570      	push	{r4, r5, r6, lr}
 800404a:	2600      	movs	r6, #0
 800404c:	4d0c      	ldr	r5, [pc, #48]	; (8004080 <__libc_init_array+0x38>)
 800404e:	4c0d      	ldr	r4, [pc, #52]	; (8004084 <__libc_init_array+0x3c>)
 8004050:	1b64      	subs	r4, r4, r5
 8004052:	10a4      	asrs	r4, r4, #2
 8004054:	42a6      	cmp	r6, r4
 8004056:	d109      	bne.n	800406c <__libc_init_array+0x24>
 8004058:	f000 fc6c 	bl	8004934 <_init>
 800405c:	2600      	movs	r6, #0
 800405e:	4d0a      	ldr	r5, [pc, #40]	; (8004088 <__libc_init_array+0x40>)
 8004060:	4c0a      	ldr	r4, [pc, #40]	; (800408c <__libc_init_array+0x44>)
 8004062:	1b64      	subs	r4, r4, r5
 8004064:	10a4      	asrs	r4, r4, #2
 8004066:	42a6      	cmp	r6, r4
 8004068:	d105      	bne.n	8004076 <__libc_init_array+0x2e>
 800406a:	bd70      	pop	{r4, r5, r6, pc}
 800406c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004070:	4798      	blx	r3
 8004072:	3601      	adds	r6, #1
 8004074:	e7ee      	b.n	8004054 <__libc_init_array+0xc>
 8004076:	f855 3b04 	ldr.w	r3, [r5], #4
 800407a:	4798      	blx	r3
 800407c:	3601      	adds	r6, #1
 800407e:	e7f2      	b.n	8004066 <__libc_init_array+0x1e>
 8004080:	080049d8 	.word	0x080049d8
 8004084:	080049d8 	.word	0x080049d8
 8004088:	080049d8 	.word	0x080049d8
 800408c:	080049dc 	.word	0x080049dc

08004090 <malloc>:
 8004090:	4b02      	ldr	r3, [pc, #8]	; (800409c <malloc+0xc>)
 8004092:	4601      	mov	r1, r0
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	f000 b85f 	b.w	8004158 <_malloc_r>
 800409a:	bf00      	nop
 800409c:	20000070 	.word	0x20000070

080040a0 <free>:
 80040a0:	4b02      	ldr	r3, [pc, #8]	; (80040ac <free+0xc>)
 80040a2:	4601      	mov	r1, r0
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	f000 b80b 	b.w	80040c0 <_free_r>
 80040aa:	bf00      	nop
 80040ac:	20000070 	.word	0x20000070

080040b0 <memset>:
 80040b0:	4603      	mov	r3, r0
 80040b2:	4402      	add	r2, r0
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d100      	bne.n	80040ba <memset+0xa>
 80040b8:	4770      	bx	lr
 80040ba:	f803 1b01 	strb.w	r1, [r3], #1
 80040be:	e7f9      	b.n	80040b4 <memset+0x4>

080040c0 <_free_r>:
 80040c0:	b538      	push	{r3, r4, r5, lr}
 80040c2:	4605      	mov	r5, r0
 80040c4:	2900      	cmp	r1, #0
 80040c6:	d043      	beq.n	8004150 <_free_r+0x90>
 80040c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040cc:	1f0c      	subs	r4, r1, #4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	bfb8      	it	lt
 80040d2:	18e4      	addlt	r4, r4, r3
 80040d4:	f000 f8ca 	bl	800426c <__malloc_lock>
 80040d8:	4a1e      	ldr	r2, [pc, #120]	; (8004154 <_free_r+0x94>)
 80040da:	6813      	ldr	r3, [r2, #0]
 80040dc:	4610      	mov	r0, r2
 80040de:	b933      	cbnz	r3, 80040ee <_free_r+0x2e>
 80040e0:	6063      	str	r3, [r4, #4]
 80040e2:	6014      	str	r4, [r2, #0]
 80040e4:	4628      	mov	r0, r5
 80040e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040ea:	f000 b8c5 	b.w	8004278 <__malloc_unlock>
 80040ee:	42a3      	cmp	r3, r4
 80040f0:	d90a      	bls.n	8004108 <_free_r+0x48>
 80040f2:	6821      	ldr	r1, [r4, #0]
 80040f4:	1862      	adds	r2, r4, r1
 80040f6:	4293      	cmp	r3, r2
 80040f8:	bf01      	itttt	eq
 80040fa:	681a      	ldreq	r2, [r3, #0]
 80040fc:	685b      	ldreq	r3, [r3, #4]
 80040fe:	1852      	addeq	r2, r2, r1
 8004100:	6022      	streq	r2, [r4, #0]
 8004102:	6063      	str	r3, [r4, #4]
 8004104:	6004      	str	r4, [r0, #0]
 8004106:	e7ed      	b.n	80040e4 <_free_r+0x24>
 8004108:	461a      	mov	r2, r3
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	b10b      	cbz	r3, 8004112 <_free_r+0x52>
 800410e:	42a3      	cmp	r3, r4
 8004110:	d9fa      	bls.n	8004108 <_free_r+0x48>
 8004112:	6811      	ldr	r1, [r2, #0]
 8004114:	1850      	adds	r0, r2, r1
 8004116:	42a0      	cmp	r0, r4
 8004118:	d10b      	bne.n	8004132 <_free_r+0x72>
 800411a:	6820      	ldr	r0, [r4, #0]
 800411c:	4401      	add	r1, r0
 800411e:	1850      	adds	r0, r2, r1
 8004120:	4283      	cmp	r3, r0
 8004122:	6011      	str	r1, [r2, #0]
 8004124:	d1de      	bne.n	80040e4 <_free_r+0x24>
 8004126:	6818      	ldr	r0, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	4401      	add	r1, r0
 800412c:	6011      	str	r1, [r2, #0]
 800412e:	6053      	str	r3, [r2, #4]
 8004130:	e7d8      	b.n	80040e4 <_free_r+0x24>
 8004132:	d902      	bls.n	800413a <_free_r+0x7a>
 8004134:	230c      	movs	r3, #12
 8004136:	602b      	str	r3, [r5, #0]
 8004138:	e7d4      	b.n	80040e4 <_free_r+0x24>
 800413a:	6820      	ldr	r0, [r4, #0]
 800413c:	1821      	adds	r1, r4, r0
 800413e:	428b      	cmp	r3, r1
 8004140:	bf01      	itttt	eq
 8004142:	6819      	ldreq	r1, [r3, #0]
 8004144:	685b      	ldreq	r3, [r3, #4]
 8004146:	1809      	addeq	r1, r1, r0
 8004148:	6021      	streq	r1, [r4, #0]
 800414a:	6063      	str	r3, [r4, #4]
 800414c:	6054      	str	r4, [r2, #4]
 800414e:	e7c9      	b.n	80040e4 <_free_r+0x24>
 8004150:	bd38      	pop	{r3, r4, r5, pc}
 8004152:	bf00      	nop
 8004154:	2000016c 	.word	0x2000016c

08004158 <_malloc_r>:
 8004158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415a:	1ccd      	adds	r5, r1, #3
 800415c:	f025 0503 	bic.w	r5, r5, #3
 8004160:	3508      	adds	r5, #8
 8004162:	2d0c      	cmp	r5, #12
 8004164:	bf38      	it	cc
 8004166:	250c      	movcc	r5, #12
 8004168:	2d00      	cmp	r5, #0
 800416a:	4606      	mov	r6, r0
 800416c:	db01      	blt.n	8004172 <_malloc_r+0x1a>
 800416e:	42a9      	cmp	r1, r5
 8004170:	d903      	bls.n	800417a <_malloc_r+0x22>
 8004172:	230c      	movs	r3, #12
 8004174:	6033      	str	r3, [r6, #0]
 8004176:	2000      	movs	r0, #0
 8004178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800417a:	f000 f877 	bl	800426c <__malloc_lock>
 800417e:	4921      	ldr	r1, [pc, #132]	; (8004204 <_malloc_r+0xac>)
 8004180:	680a      	ldr	r2, [r1, #0]
 8004182:	4614      	mov	r4, r2
 8004184:	b99c      	cbnz	r4, 80041ae <_malloc_r+0x56>
 8004186:	4f20      	ldr	r7, [pc, #128]	; (8004208 <_malloc_r+0xb0>)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	b923      	cbnz	r3, 8004196 <_malloc_r+0x3e>
 800418c:	4621      	mov	r1, r4
 800418e:	4630      	mov	r0, r6
 8004190:	f000 f83c 	bl	800420c <_sbrk_r>
 8004194:	6038      	str	r0, [r7, #0]
 8004196:	4629      	mov	r1, r5
 8004198:	4630      	mov	r0, r6
 800419a:	f000 f837 	bl	800420c <_sbrk_r>
 800419e:	1c43      	adds	r3, r0, #1
 80041a0:	d123      	bne.n	80041ea <_malloc_r+0x92>
 80041a2:	230c      	movs	r3, #12
 80041a4:	4630      	mov	r0, r6
 80041a6:	6033      	str	r3, [r6, #0]
 80041a8:	f000 f866 	bl	8004278 <__malloc_unlock>
 80041ac:	e7e3      	b.n	8004176 <_malloc_r+0x1e>
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	1b5b      	subs	r3, r3, r5
 80041b2:	d417      	bmi.n	80041e4 <_malloc_r+0x8c>
 80041b4:	2b0b      	cmp	r3, #11
 80041b6:	d903      	bls.n	80041c0 <_malloc_r+0x68>
 80041b8:	6023      	str	r3, [r4, #0]
 80041ba:	441c      	add	r4, r3
 80041bc:	6025      	str	r5, [r4, #0]
 80041be:	e004      	b.n	80041ca <_malloc_r+0x72>
 80041c0:	6863      	ldr	r3, [r4, #4]
 80041c2:	42a2      	cmp	r2, r4
 80041c4:	bf0c      	ite	eq
 80041c6:	600b      	streq	r3, [r1, #0]
 80041c8:	6053      	strne	r3, [r2, #4]
 80041ca:	4630      	mov	r0, r6
 80041cc:	f000 f854 	bl	8004278 <__malloc_unlock>
 80041d0:	f104 000b 	add.w	r0, r4, #11
 80041d4:	1d23      	adds	r3, r4, #4
 80041d6:	f020 0007 	bic.w	r0, r0, #7
 80041da:	1ac2      	subs	r2, r0, r3
 80041dc:	d0cc      	beq.n	8004178 <_malloc_r+0x20>
 80041de:	1a1b      	subs	r3, r3, r0
 80041e0:	50a3      	str	r3, [r4, r2]
 80041e2:	e7c9      	b.n	8004178 <_malloc_r+0x20>
 80041e4:	4622      	mov	r2, r4
 80041e6:	6864      	ldr	r4, [r4, #4]
 80041e8:	e7cc      	b.n	8004184 <_malloc_r+0x2c>
 80041ea:	1cc4      	adds	r4, r0, #3
 80041ec:	f024 0403 	bic.w	r4, r4, #3
 80041f0:	42a0      	cmp	r0, r4
 80041f2:	d0e3      	beq.n	80041bc <_malloc_r+0x64>
 80041f4:	1a21      	subs	r1, r4, r0
 80041f6:	4630      	mov	r0, r6
 80041f8:	f000 f808 	bl	800420c <_sbrk_r>
 80041fc:	3001      	adds	r0, #1
 80041fe:	d1dd      	bne.n	80041bc <_malloc_r+0x64>
 8004200:	e7cf      	b.n	80041a2 <_malloc_r+0x4a>
 8004202:	bf00      	nop
 8004204:	2000016c 	.word	0x2000016c
 8004208:	20000170 	.word	0x20000170

0800420c <_sbrk_r>:
 800420c:	b538      	push	{r3, r4, r5, lr}
 800420e:	2300      	movs	r3, #0
 8004210:	4d05      	ldr	r5, [pc, #20]	; (8004228 <_sbrk_r+0x1c>)
 8004212:	4604      	mov	r4, r0
 8004214:	4608      	mov	r0, r1
 8004216:	602b      	str	r3, [r5, #0]
 8004218:	f7fd fbc4 	bl	80019a4 <_sbrk>
 800421c:	1c43      	adds	r3, r0, #1
 800421e:	d102      	bne.n	8004226 <_sbrk_r+0x1a>
 8004220:	682b      	ldr	r3, [r5, #0]
 8004222:	b103      	cbz	r3, 8004226 <_sbrk_r+0x1a>
 8004224:	6023      	str	r3, [r4, #0]
 8004226:	bd38      	pop	{r3, r4, r5, pc}
 8004228:	20000244 	.word	0x20000244

0800422c <siprintf>:
 800422c:	b40e      	push	{r1, r2, r3}
 800422e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004232:	b500      	push	{lr}
 8004234:	b09c      	sub	sp, #112	; 0x70
 8004236:	ab1d      	add	r3, sp, #116	; 0x74
 8004238:	9002      	str	r0, [sp, #8]
 800423a:	9006      	str	r0, [sp, #24]
 800423c:	9107      	str	r1, [sp, #28]
 800423e:	9104      	str	r1, [sp, #16]
 8004240:	4808      	ldr	r0, [pc, #32]	; (8004264 <siprintf+0x38>)
 8004242:	4909      	ldr	r1, [pc, #36]	; (8004268 <siprintf+0x3c>)
 8004244:	f853 2b04 	ldr.w	r2, [r3], #4
 8004248:	9105      	str	r1, [sp, #20]
 800424a:	6800      	ldr	r0, [r0, #0]
 800424c:	a902      	add	r1, sp, #8
 800424e:	9301      	str	r3, [sp, #4]
 8004250:	f000 f874 	bl	800433c <_svfiprintf_r>
 8004254:	2200      	movs	r2, #0
 8004256:	9b02      	ldr	r3, [sp, #8]
 8004258:	701a      	strb	r2, [r3, #0]
 800425a:	b01c      	add	sp, #112	; 0x70
 800425c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004260:	b003      	add	sp, #12
 8004262:	4770      	bx	lr
 8004264:	20000070 	.word	0x20000070
 8004268:	ffff0208 	.word	0xffff0208

0800426c <__malloc_lock>:
 800426c:	4801      	ldr	r0, [pc, #4]	; (8004274 <__malloc_lock+0x8>)
 800426e:	f000 bafb 	b.w	8004868 <__retarget_lock_acquire_recursive>
 8004272:	bf00      	nop
 8004274:	2000024c 	.word	0x2000024c

08004278 <__malloc_unlock>:
 8004278:	4801      	ldr	r0, [pc, #4]	; (8004280 <__malloc_unlock+0x8>)
 800427a:	f000 baf6 	b.w	800486a <__retarget_lock_release_recursive>
 800427e:	bf00      	nop
 8004280:	2000024c 	.word	0x2000024c

08004284 <__ssputs_r>:
 8004284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004288:	688e      	ldr	r6, [r1, #8]
 800428a:	4682      	mov	sl, r0
 800428c:	429e      	cmp	r6, r3
 800428e:	460c      	mov	r4, r1
 8004290:	4690      	mov	r8, r2
 8004292:	461f      	mov	r7, r3
 8004294:	d838      	bhi.n	8004308 <__ssputs_r+0x84>
 8004296:	898a      	ldrh	r2, [r1, #12]
 8004298:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800429c:	d032      	beq.n	8004304 <__ssputs_r+0x80>
 800429e:	6825      	ldr	r5, [r4, #0]
 80042a0:	6909      	ldr	r1, [r1, #16]
 80042a2:	3301      	adds	r3, #1
 80042a4:	eba5 0901 	sub.w	r9, r5, r1
 80042a8:	6965      	ldr	r5, [r4, #20]
 80042aa:	444b      	add	r3, r9
 80042ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042b4:	106d      	asrs	r5, r5, #1
 80042b6:	429d      	cmp	r5, r3
 80042b8:	bf38      	it	cc
 80042ba:	461d      	movcc	r5, r3
 80042bc:	0553      	lsls	r3, r2, #21
 80042be:	d531      	bpl.n	8004324 <__ssputs_r+0xa0>
 80042c0:	4629      	mov	r1, r5
 80042c2:	f7ff ff49 	bl	8004158 <_malloc_r>
 80042c6:	4606      	mov	r6, r0
 80042c8:	b950      	cbnz	r0, 80042e0 <__ssputs_r+0x5c>
 80042ca:	230c      	movs	r3, #12
 80042cc:	f04f 30ff 	mov.w	r0, #4294967295
 80042d0:	f8ca 3000 	str.w	r3, [sl]
 80042d4:	89a3      	ldrh	r3, [r4, #12]
 80042d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042da:	81a3      	strh	r3, [r4, #12]
 80042dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e0:	464a      	mov	r2, r9
 80042e2:	6921      	ldr	r1, [r4, #16]
 80042e4:	f000 fad0 	bl	8004888 <memcpy>
 80042e8:	89a3      	ldrh	r3, [r4, #12]
 80042ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f2:	81a3      	strh	r3, [r4, #12]
 80042f4:	6126      	str	r6, [r4, #16]
 80042f6:	444e      	add	r6, r9
 80042f8:	6026      	str	r6, [r4, #0]
 80042fa:	463e      	mov	r6, r7
 80042fc:	6165      	str	r5, [r4, #20]
 80042fe:	eba5 0509 	sub.w	r5, r5, r9
 8004302:	60a5      	str	r5, [r4, #8]
 8004304:	42be      	cmp	r6, r7
 8004306:	d900      	bls.n	800430a <__ssputs_r+0x86>
 8004308:	463e      	mov	r6, r7
 800430a:	4632      	mov	r2, r6
 800430c:	4641      	mov	r1, r8
 800430e:	6820      	ldr	r0, [r4, #0]
 8004310:	f000 fac8 	bl	80048a4 <memmove>
 8004314:	68a3      	ldr	r3, [r4, #8]
 8004316:	6822      	ldr	r2, [r4, #0]
 8004318:	1b9b      	subs	r3, r3, r6
 800431a:	4432      	add	r2, r6
 800431c:	2000      	movs	r0, #0
 800431e:	60a3      	str	r3, [r4, #8]
 8004320:	6022      	str	r2, [r4, #0]
 8004322:	e7db      	b.n	80042dc <__ssputs_r+0x58>
 8004324:	462a      	mov	r2, r5
 8004326:	f000 fad7 	bl	80048d8 <_realloc_r>
 800432a:	4606      	mov	r6, r0
 800432c:	2800      	cmp	r0, #0
 800432e:	d1e1      	bne.n	80042f4 <__ssputs_r+0x70>
 8004330:	4650      	mov	r0, sl
 8004332:	6921      	ldr	r1, [r4, #16]
 8004334:	f7ff fec4 	bl	80040c0 <_free_r>
 8004338:	e7c7      	b.n	80042ca <__ssputs_r+0x46>
	...

0800433c <_svfiprintf_r>:
 800433c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004340:	4698      	mov	r8, r3
 8004342:	898b      	ldrh	r3, [r1, #12]
 8004344:	4607      	mov	r7, r0
 8004346:	061b      	lsls	r3, r3, #24
 8004348:	460d      	mov	r5, r1
 800434a:	4614      	mov	r4, r2
 800434c:	b09d      	sub	sp, #116	; 0x74
 800434e:	d50e      	bpl.n	800436e <_svfiprintf_r+0x32>
 8004350:	690b      	ldr	r3, [r1, #16]
 8004352:	b963      	cbnz	r3, 800436e <_svfiprintf_r+0x32>
 8004354:	2140      	movs	r1, #64	; 0x40
 8004356:	f7ff feff 	bl	8004158 <_malloc_r>
 800435a:	6028      	str	r0, [r5, #0]
 800435c:	6128      	str	r0, [r5, #16]
 800435e:	b920      	cbnz	r0, 800436a <_svfiprintf_r+0x2e>
 8004360:	230c      	movs	r3, #12
 8004362:	603b      	str	r3, [r7, #0]
 8004364:	f04f 30ff 	mov.w	r0, #4294967295
 8004368:	e0d1      	b.n	800450e <_svfiprintf_r+0x1d2>
 800436a:	2340      	movs	r3, #64	; 0x40
 800436c:	616b      	str	r3, [r5, #20]
 800436e:	2300      	movs	r3, #0
 8004370:	9309      	str	r3, [sp, #36]	; 0x24
 8004372:	2320      	movs	r3, #32
 8004374:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004378:	2330      	movs	r3, #48	; 0x30
 800437a:	f04f 0901 	mov.w	r9, #1
 800437e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004382:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004528 <_svfiprintf_r+0x1ec>
 8004386:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800438a:	4623      	mov	r3, r4
 800438c:	469a      	mov	sl, r3
 800438e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004392:	b10a      	cbz	r2, 8004398 <_svfiprintf_r+0x5c>
 8004394:	2a25      	cmp	r2, #37	; 0x25
 8004396:	d1f9      	bne.n	800438c <_svfiprintf_r+0x50>
 8004398:	ebba 0b04 	subs.w	fp, sl, r4
 800439c:	d00b      	beq.n	80043b6 <_svfiprintf_r+0x7a>
 800439e:	465b      	mov	r3, fp
 80043a0:	4622      	mov	r2, r4
 80043a2:	4629      	mov	r1, r5
 80043a4:	4638      	mov	r0, r7
 80043a6:	f7ff ff6d 	bl	8004284 <__ssputs_r>
 80043aa:	3001      	adds	r0, #1
 80043ac:	f000 80aa 	beq.w	8004504 <_svfiprintf_r+0x1c8>
 80043b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043b2:	445a      	add	r2, fp
 80043b4:	9209      	str	r2, [sp, #36]	; 0x24
 80043b6:	f89a 3000 	ldrb.w	r3, [sl]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 80a2 	beq.w	8004504 <_svfiprintf_r+0x1c8>
 80043c0:	2300      	movs	r3, #0
 80043c2:	f04f 32ff 	mov.w	r2, #4294967295
 80043c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043ca:	f10a 0a01 	add.w	sl, sl, #1
 80043ce:	9304      	str	r3, [sp, #16]
 80043d0:	9307      	str	r3, [sp, #28]
 80043d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043d6:	931a      	str	r3, [sp, #104]	; 0x68
 80043d8:	4654      	mov	r4, sl
 80043da:	2205      	movs	r2, #5
 80043dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043e0:	4851      	ldr	r0, [pc, #324]	; (8004528 <_svfiprintf_r+0x1ec>)
 80043e2:	f000 fa43 	bl	800486c <memchr>
 80043e6:	9a04      	ldr	r2, [sp, #16]
 80043e8:	b9d8      	cbnz	r0, 8004422 <_svfiprintf_r+0xe6>
 80043ea:	06d0      	lsls	r0, r2, #27
 80043ec:	bf44      	itt	mi
 80043ee:	2320      	movmi	r3, #32
 80043f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043f4:	0711      	lsls	r1, r2, #28
 80043f6:	bf44      	itt	mi
 80043f8:	232b      	movmi	r3, #43	; 0x2b
 80043fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004402:	2b2a      	cmp	r3, #42	; 0x2a
 8004404:	d015      	beq.n	8004432 <_svfiprintf_r+0xf6>
 8004406:	4654      	mov	r4, sl
 8004408:	2000      	movs	r0, #0
 800440a:	f04f 0c0a 	mov.w	ip, #10
 800440e:	9a07      	ldr	r2, [sp, #28]
 8004410:	4621      	mov	r1, r4
 8004412:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004416:	3b30      	subs	r3, #48	; 0x30
 8004418:	2b09      	cmp	r3, #9
 800441a:	d94e      	bls.n	80044ba <_svfiprintf_r+0x17e>
 800441c:	b1b0      	cbz	r0, 800444c <_svfiprintf_r+0x110>
 800441e:	9207      	str	r2, [sp, #28]
 8004420:	e014      	b.n	800444c <_svfiprintf_r+0x110>
 8004422:	eba0 0308 	sub.w	r3, r0, r8
 8004426:	fa09 f303 	lsl.w	r3, r9, r3
 800442a:	4313      	orrs	r3, r2
 800442c:	46a2      	mov	sl, r4
 800442e:	9304      	str	r3, [sp, #16]
 8004430:	e7d2      	b.n	80043d8 <_svfiprintf_r+0x9c>
 8004432:	9b03      	ldr	r3, [sp, #12]
 8004434:	1d19      	adds	r1, r3, #4
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	9103      	str	r1, [sp, #12]
 800443a:	2b00      	cmp	r3, #0
 800443c:	bfbb      	ittet	lt
 800443e:	425b      	neglt	r3, r3
 8004440:	f042 0202 	orrlt.w	r2, r2, #2
 8004444:	9307      	strge	r3, [sp, #28]
 8004446:	9307      	strlt	r3, [sp, #28]
 8004448:	bfb8      	it	lt
 800444a:	9204      	strlt	r2, [sp, #16]
 800444c:	7823      	ldrb	r3, [r4, #0]
 800444e:	2b2e      	cmp	r3, #46	; 0x2e
 8004450:	d10c      	bne.n	800446c <_svfiprintf_r+0x130>
 8004452:	7863      	ldrb	r3, [r4, #1]
 8004454:	2b2a      	cmp	r3, #42	; 0x2a
 8004456:	d135      	bne.n	80044c4 <_svfiprintf_r+0x188>
 8004458:	9b03      	ldr	r3, [sp, #12]
 800445a:	3402      	adds	r4, #2
 800445c:	1d1a      	adds	r2, r3, #4
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	9203      	str	r2, [sp, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	bfb8      	it	lt
 8004466:	f04f 33ff 	movlt.w	r3, #4294967295
 800446a:	9305      	str	r3, [sp, #20]
 800446c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004538 <_svfiprintf_r+0x1fc>
 8004470:	2203      	movs	r2, #3
 8004472:	4650      	mov	r0, sl
 8004474:	7821      	ldrb	r1, [r4, #0]
 8004476:	f000 f9f9 	bl	800486c <memchr>
 800447a:	b140      	cbz	r0, 800448e <_svfiprintf_r+0x152>
 800447c:	2340      	movs	r3, #64	; 0x40
 800447e:	eba0 000a 	sub.w	r0, r0, sl
 8004482:	fa03 f000 	lsl.w	r0, r3, r0
 8004486:	9b04      	ldr	r3, [sp, #16]
 8004488:	3401      	adds	r4, #1
 800448a:	4303      	orrs	r3, r0
 800448c:	9304      	str	r3, [sp, #16]
 800448e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004492:	2206      	movs	r2, #6
 8004494:	4825      	ldr	r0, [pc, #148]	; (800452c <_svfiprintf_r+0x1f0>)
 8004496:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800449a:	f000 f9e7 	bl	800486c <memchr>
 800449e:	2800      	cmp	r0, #0
 80044a0:	d038      	beq.n	8004514 <_svfiprintf_r+0x1d8>
 80044a2:	4b23      	ldr	r3, [pc, #140]	; (8004530 <_svfiprintf_r+0x1f4>)
 80044a4:	bb1b      	cbnz	r3, 80044ee <_svfiprintf_r+0x1b2>
 80044a6:	9b03      	ldr	r3, [sp, #12]
 80044a8:	3307      	adds	r3, #7
 80044aa:	f023 0307 	bic.w	r3, r3, #7
 80044ae:	3308      	adds	r3, #8
 80044b0:	9303      	str	r3, [sp, #12]
 80044b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044b4:	4433      	add	r3, r6
 80044b6:	9309      	str	r3, [sp, #36]	; 0x24
 80044b8:	e767      	b.n	800438a <_svfiprintf_r+0x4e>
 80044ba:	460c      	mov	r4, r1
 80044bc:	2001      	movs	r0, #1
 80044be:	fb0c 3202 	mla	r2, ip, r2, r3
 80044c2:	e7a5      	b.n	8004410 <_svfiprintf_r+0xd4>
 80044c4:	2300      	movs	r3, #0
 80044c6:	f04f 0c0a 	mov.w	ip, #10
 80044ca:	4619      	mov	r1, r3
 80044cc:	3401      	adds	r4, #1
 80044ce:	9305      	str	r3, [sp, #20]
 80044d0:	4620      	mov	r0, r4
 80044d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044d6:	3a30      	subs	r2, #48	; 0x30
 80044d8:	2a09      	cmp	r2, #9
 80044da:	d903      	bls.n	80044e4 <_svfiprintf_r+0x1a8>
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0c5      	beq.n	800446c <_svfiprintf_r+0x130>
 80044e0:	9105      	str	r1, [sp, #20]
 80044e2:	e7c3      	b.n	800446c <_svfiprintf_r+0x130>
 80044e4:	4604      	mov	r4, r0
 80044e6:	2301      	movs	r3, #1
 80044e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80044ec:	e7f0      	b.n	80044d0 <_svfiprintf_r+0x194>
 80044ee:	ab03      	add	r3, sp, #12
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	462a      	mov	r2, r5
 80044f4:	4638      	mov	r0, r7
 80044f6:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <_svfiprintf_r+0x1f8>)
 80044f8:	a904      	add	r1, sp, #16
 80044fa:	f3af 8000 	nop.w
 80044fe:	1c42      	adds	r2, r0, #1
 8004500:	4606      	mov	r6, r0
 8004502:	d1d6      	bne.n	80044b2 <_svfiprintf_r+0x176>
 8004504:	89ab      	ldrh	r3, [r5, #12]
 8004506:	065b      	lsls	r3, r3, #25
 8004508:	f53f af2c 	bmi.w	8004364 <_svfiprintf_r+0x28>
 800450c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800450e:	b01d      	add	sp, #116	; 0x74
 8004510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004514:	ab03      	add	r3, sp, #12
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	462a      	mov	r2, r5
 800451a:	4638      	mov	r0, r7
 800451c:	4b05      	ldr	r3, [pc, #20]	; (8004534 <_svfiprintf_r+0x1f8>)
 800451e:	a904      	add	r1, sp, #16
 8004520:	f000 f87c 	bl	800461c <_printf_i>
 8004524:	e7eb      	b.n	80044fe <_svfiprintf_r+0x1c2>
 8004526:	bf00      	nop
 8004528:	080049a2 	.word	0x080049a2
 800452c:	080049ac 	.word	0x080049ac
 8004530:	00000000 	.word	0x00000000
 8004534:	08004285 	.word	0x08004285
 8004538:	080049a8 	.word	0x080049a8

0800453c <_printf_common>:
 800453c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004540:	4616      	mov	r6, r2
 8004542:	4699      	mov	r9, r3
 8004544:	688a      	ldr	r2, [r1, #8]
 8004546:	690b      	ldr	r3, [r1, #16]
 8004548:	4607      	mov	r7, r0
 800454a:	4293      	cmp	r3, r2
 800454c:	bfb8      	it	lt
 800454e:	4613      	movlt	r3, r2
 8004550:	6033      	str	r3, [r6, #0]
 8004552:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004556:	460c      	mov	r4, r1
 8004558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800455c:	b10a      	cbz	r2, 8004562 <_printf_common+0x26>
 800455e:	3301      	adds	r3, #1
 8004560:	6033      	str	r3, [r6, #0]
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	0699      	lsls	r1, r3, #26
 8004566:	bf42      	ittt	mi
 8004568:	6833      	ldrmi	r3, [r6, #0]
 800456a:	3302      	addmi	r3, #2
 800456c:	6033      	strmi	r3, [r6, #0]
 800456e:	6825      	ldr	r5, [r4, #0]
 8004570:	f015 0506 	ands.w	r5, r5, #6
 8004574:	d106      	bne.n	8004584 <_printf_common+0x48>
 8004576:	f104 0a19 	add.w	sl, r4, #25
 800457a:	68e3      	ldr	r3, [r4, #12]
 800457c:	6832      	ldr	r2, [r6, #0]
 800457e:	1a9b      	subs	r3, r3, r2
 8004580:	42ab      	cmp	r3, r5
 8004582:	dc28      	bgt.n	80045d6 <_printf_common+0x9a>
 8004584:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004588:	1e13      	subs	r3, r2, #0
 800458a:	6822      	ldr	r2, [r4, #0]
 800458c:	bf18      	it	ne
 800458e:	2301      	movne	r3, #1
 8004590:	0692      	lsls	r2, r2, #26
 8004592:	d42d      	bmi.n	80045f0 <_printf_common+0xb4>
 8004594:	4649      	mov	r1, r9
 8004596:	4638      	mov	r0, r7
 8004598:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800459c:	47c0      	blx	r8
 800459e:	3001      	adds	r0, #1
 80045a0:	d020      	beq.n	80045e4 <_printf_common+0xa8>
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	68e5      	ldr	r5, [r4, #12]
 80045a6:	f003 0306 	and.w	r3, r3, #6
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	bf18      	it	ne
 80045ae:	2500      	movne	r5, #0
 80045b0:	6832      	ldr	r2, [r6, #0]
 80045b2:	f04f 0600 	mov.w	r6, #0
 80045b6:	68a3      	ldr	r3, [r4, #8]
 80045b8:	bf08      	it	eq
 80045ba:	1aad      	subeq	r5, r5, r2
 80045bc:	6922      	ldr	r2, [r4, #16]
 80045be:	bf08      	it	eq
 80045c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045c4:	4293      	cmp	r3, r2
 80045c6:	bfc4      	itt	gt
 80045c8:	1a9b      	subgt	r3, r3, r2
 80045ca:	18ed      	addgt	r5, r5, r3
 80045cc:	341a      	adds	r4, #26
 80045ce:	42b5      	cmp	r5, r6
 80045d0:	d11a      	bne.n	8004608 <_printf_common+0xcc>
 80045d2:	2000      	movs	r0, #0
 80045d4:	e008      	b.n	80045e8 <_printf_common+0xac>
 80045d6:	2301      	movs	r3, #1
 80045d8:	4652      	mov	r2, sl
 80045da:	4649      	mov	r1, r9
 80045dc:	4638      	mov	r0, r7
 80045de:	47c0      	blx	r8
 80045e0:	3001      	adds	r0, #1
 80045e2:	d103      	bne.n	80045ec <_printf_common+0xb0>
 80045e4:	f04f 30ff 	mov.w	r0, #4294967295
 80045e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ec:	3501      	adds	r5, #1
 80045ee:	e7c4      	b.n	800457a <_printf_common+0x3e>
 80045f0:	2030      	movs	r0, #48	; 0x30
 80045f2:	18e1      	adds	r1, r4, r3
 80045f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045fe:	4422      	add	r2, r4
 8004600:	3302      	adds	r3, #2
 8004602:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004606:	e7c5      	b.n	8004594 <_printf_common+0x58>
 8004608:	2301      	movs	r3, #1
 800460a:	4622      	mov	r2, r4
 800460c:	4649      	mov	r1, r9
 800460e:	4638      	mov	r0, r7
 8004610:	47c0      	blx	r8
 8004612:	3001      	adds	r0, #1
 8004614:	d0e6      	beq.n	80045e4 <_printf_common+0xa8>
 8004616:	3601      	adds	r6, #1
 8004618:	e7d9      	b.n	80045ce <_printf_common+0x92>
	...

0800461c <_printf_i>:
 800461c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004620:	460c      	mov	r4, r1
 8004622:	7e27      	ldrb	r7, [r4, #24]
 8004624:	4691      	mov	r9, r2
 8004626:	2f78      	cmp	r7, #120	; 0x78
 8004628:	4680      	mov	r8, r0
 800462a:	469a      	mov	sl, r3
 800462c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800462e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004632:	d807      	bhi.n	8004644 <_printf_i+0x28>
 8004634:	2f62      	cmp	r7, #98	; 0x62
 8004636:	d80a      	bhi.n	800464e <_printf_i+0x32>
 8004638:	2f00      	cmp	r7, #0
 800463a:	f000 80d9 	beq.w	80047f0 <_printf_i+0x1d4>
 800463e:	2f58      	cmp	r7, #88	; 0x58
 8004640:	f000 80a4 	beq.w	800478c <_printf_i+0x170>
 8004644:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004648:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800464c:	e03a      	b.n	80046c4 <_printf_i+0xa8>
 800464e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004652:	2b15      	cmp	r3, #21
 8004654:	d8f6      	bhi.n	8004644 <_printf_i+0x28>
 8004656:	a001      	add	r0, pc, #4	; (adr r0, 800465c <_printf_i+0x40>)
 8004658:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800465c:	080046b5 	.word	0x080046b5
 8004660:	080046c9 	.word	0x080046c9
 8004664:	08004645 	.word	0x08004645
 8004668:	08004645 	.word	0x08004645
 800466c:	08004645 	.word	0x08004645
 8004670:	08004645 	.word	0x08004645
 8004674:	080046c9 	.word	0x080046c9
 8004678:	08004645 	.word	0x08004645
 800467c:	08004645 	.word	0x08004645
 8004680:	08004645 	.word	0x08004645
 8004684:	08004645 	.word	0x08004645
 8004688:	080047d7 	.word	0x080047d7
 800468c:	080046f9 	.word	0x080046f9
 8004690:	080047b9 	.word	0x080047b9
 8004694:	08004645 	.word	0x08004645
 8004698:	08004645 	.word	0x08004645
 800469c:	080047f9 	.word	0x080047f9
 80046a0:	08004645 	.word	0x08004645
 80046a4:	080046f9 	.word	0x080046f9
 80046a8:	08004645 	.word	0x08004645
 80046ac:	08004645 	.word	0x08004645
 80046b0:	080047c1 	.word	0x080047c1
 80046b4:	680b      	ldr	r3, [r1, #0]
 80046b6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046ba:	1d1a      	adds	r2, r3, #4
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	600a      	str	r2, [r1, #0]
 80046c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0a4      	b.n	8004812 <_printf_i+0x1f6>
 80046c8:	6825      	ldr	r5, [r4, #0]
 80046ca:	6808      	ldr	r0, [r1, #0]
 80046cc:	062e      	lsls	r6, r5, #24
 80046ce:	f100 0304 	add.w	r3, r0, #4
 80046d2:	d50a      	bpl.n	80046ea <_printf_i+0xce>
 80046d4:	6805      	ldr	r5, [r0, #0]
 80046d6:	600b      	str	r3, [r1, #0]
 80046d8:	2d00      	cmp	r5, #0
 80046da:	da03      	bge.n	80046e4 <_printf_i+0xc8>
 80046dc:	232d      	movs	r3, #45	; 0x2d
 80046de:	426d      	negs	r5, r5
 80046e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046e4:	230a      	movs	r3, #10
 80046e6:	485e      	ldr	r0, [pc, #376]	; (8004860 <_printf_i+0x244>)
 80046e8:	e019      	b.n	800471e <_printf_i+0x102>
 80046ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80046ee:	6805      	ldr	r5, [r0, #0]
 80046f0:	600b      	str	r3, [r1, #0]
 80046f2:	bf18      	it	ne
 80046f4:	b22d      	sxthne	r5, r5
 80046f6:	e7ef      	b.n	80046d8 <_printf_i+0xbc>
 80046f8:	680b      	ldr	r3, [r1, #0]
 80046fa:	6825      	ldr	r5, [r4, #0]
 80046fc:	1d18      	adds	r0, r3, #4
 80046fe:	6008      	str	r0, [r1, #0]
 8004700:	0628      	lsls	r0, r5, #24
 8004702:	d501      	bpl.n	8004708 <_printf_i+0xec>
 8004704:	681d      	ldr	r5, [r3, #0]
 8004706:	e002      	b.n	800470e <_printf_i+0xf2>
 8004708:	0669      	lsls	r1, r5, #25
 800470a:	d5fb      	bpl.n	8004704 <_printf_i+0xe8>
 800470c:	881d      	ldrh	r5, [r3, #0]
 800470e:	2f6f      	cmp	r7, #111	; 0x6f
 8004710:	bf0c      	ite	eq
 8004712:	2308      	moveq	r3, #8
 8004714:	230a      	movne	r3, #10
 8004716:	4852      	ldr	r0, [pc, #328]	; (8004860 <_printf_i+0x244>)
 8004718:	2100      	movs	r1, #0
 800471a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800471e:	6866      	ldr	r6, [r4, #4]
 8004720:	2e00      	cmp	r6, #0
 8004722:	bfa8      	it	ge
 8004724:	6821      	ldrge	r1, [r4, #0]
 8004726:	60a6      	str	r6, [r4, #8]
 8004728:	bfa4      	itt	ge
 800472a:	f021 0104 	bicge.w	r1, r1, #4
 800472e:	6021      	strge	r1, [r4, #0]
 8004730:	b90d      	cbnz	r5, 8004736 <_printf_i+0x11a>
 8004732:	2e00      	cmp	r6, #0
 8004734:	d04d      	beq.n	80047d2 <_printf_i+0x1b6>
 8004736:	4616      	mov	r6, r2
 8004738:	fbb5 f1f3 	udiv	r1, r5, r3
 800473c:	fb03 5711 	mls	r7, r3, r1, r5
 8004740:	5dc7      	ldrb	r7, [r0, r7]
 8004742:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004746:	462f      	mov	r7, r5
 8004748:	42bb      	cmp	r3, r7
 800474a:	460d      	mov	r5, r1
 800474c:	d9f4      	bls.n	8004738 <_printf_i+0x11c>
 800474e:	2b08      	cmp	r3, #8
 8004750:	d10b      	bne.n	800476a <_printf_i+0x14e>
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	07df      	lsls	r7, r3, #31
 8004756:	d508      	bpl.n	800476a <_printf_i+0x14e>
 8004758:	6923      	ldr	r3, [r4, #16]
 800475a:	6861      	ldr	r1, [r4, #4]
 800475c:	4299      	cmp	r1, r3
 800475e:	bfde      	ittt	le
 8004760:	2330      	movle	r3, #48	; 0x30
 8004762:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004766:	f106 36ff 	addle.w	r6, r6, #4294967295
 800476a:	1b92      	subs	r2, r2, r6
 800476c:	6122      	str	r2, [r4, #16]
 800476e:	464b      	mov	r3, r9
 8004770:	4621      	mov	r1, r4
 8004772:	4640      	mov	r0, r8
 8004774:	f8cd a000 	str.w	sl, [sp]
 8004778:	aa03      	add	r2, sp, #12
 800477a:	f7ff fedf 	bl	800453c <_printf_common>
 800477e:	3001      	adds	r0, #1
 8004780:	d14c      	bne.n	800481c <_printf_i+0x200>
 8004782:	f04f 30ff 	mov.w	r0, #4294967295
 8004786:	b004      	add	sp, #16
 8004788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800478c:	4834      	ldr	r0, [pc, #208]	; (8004860 <_printf_i+0x244>)
 800478e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004792:	680e      	ldr	r6, [r1, #0]
 8004794:	6823      	ldr	r3, [r4, #0]
 8004796:	f856 5b04 	ldr.w	r5, [r6], #4
 800479a:	061f      	lsls	r7, r3, #24
 800479c:	600e      	str	r6, [r1, #0]
 800479e:	d514      	bpl.n	80047ca <_printf_i+0x1ae>
 80047a0:	07d9      	lsls	r1, r3, #31
 80047a2:	bf44      	itt	mi
 80047a4:	f043 0320 	orrmi.w	r3, r3, #32
 80047a8:	6023      	strmi	r3, [r4, #0]
 80047aa:	b91d      	cbnz	r5, 80047b4 <_printf_i+0x198>
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	f023 0320 	bic.w	r3, r3, #32
 80047b2:	6023      	str	r3, [r4, #0]
 80047b4:	2310      	movs	r3, #16
 80047b6:	e7af      	b.n	8004718 <_printf_i+0xfc>
 80047b8:	6823      	ldr	r3, [r4, #0]
 80047ba:	f043 0320 	orr.w	r3, r3, #32
 80047be:	6023      	str	r3, [r4, #0]
 80047c0:	2378      	movs	r3, #120	; 0x78
 80047c2:	4828      	ldr	r0, [pc, #160]	; (8004864 <_printf_i+0x248>)
 80047c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047c8:	e7e3      	b.n	8004792 <_printf_i+0x176>
 80047ca:	065e      	lsls	r6, r3, #25
 80047cc:	bf48      	it	mi
 80047ce:	b2ad      	uxthmi	r5, r5
 80047d0:	e7e6      	b.n	80047a0 <_printf_i+0x184>
 80047d2:	4616      	mov	r6, r2
 80047d4:	e7bb      	b.n	800474e <_printf_i+0x132>
 80047d6:	680b      	ldr	r3, [r1, #0]
 80047d8:	6826      	ldr	r6, [r4, #0]
 80047da:	1d1d      	adds	r5, r3, #4
 80047dc:	6960      	ldr	r0, [r4, #20]
 80047de:	600d      	str	r5, [r1, #0]
 80047e0:	0635      	lsls	r5, r6, #24
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	d501      	bpl.n	80047ea <_printf_i+0x1ce>
 80047e6:	6018      	str	r0, [r3, #0]
 80047e8:	e002      	b.n	80047f0 <_printf_i+0x1d4>
 80047ea:	0671      	lsls	r1, r6, #25
 80047ec:	d5fb      	bpl.n	80047e6 <_printf_i+0x1ca>
 80047ee:	8018      	strh	r0, [r3, #0]
 80047f0:	2300      	movs	r3, #0
 80047f2:	4616      	mov	r6, r2
 80047f4:	6123      	str	r3, [r4, #16]
 80047f6:	e7ba      	b.n	800476e <_printf_i+0x152>
 80047f8:	680b      	ldr	r3, [r1, #0]
 80047fa:	1d1a      	adds	r2, r3, #4
 80047fc:	600a      	str	r2, [r1, #0]
 80047fe:	681e      	ldr	r6, [r3, #0]
 8004800:	2100      	movs	r1, #0
 8004802:	4630      	mov	r0, r6
 8004804:	6862      	ldr	r2, [r4, #4]
 8004806:	f000 f831 	bl	800486c <memchr>
 800480a:	b108      	cbz	r0, 8004810 <_printf_i+0x1f4>
 800480c:	1b80      	subs	r0, r0, r6
 800480e:	6060      	str	r0, [r4, #4]
 8004810:	6863      	ldr	r3, [r4, #4]
 8004812:	6123      	str	r3, [r4, #16]
 8004814:	2300      	movs	r3, #0
 8004816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800481a:	e7a8      	b.n	800476e <_printf_i+0x152>
 800481c:	4632      	mov	r2, r6
 800481e:	4649      	mov	r1, r9
 8004820:	4640      	mov	r0, r8
 8004822:	6923      	ldr	r3, [r4, #16]
 8004824:	47d0      	blx	sl
 8004826:	3001      	adds	r0, #1
 8004828:	d0ab      	beq.n	8004782 <_printf_i+0x166>
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	079b      	lsls	r3, r3, #30
 800482e:	d413      	bmi.n	8004858 <_printf_i+0x23c>
 8004830:	68e0      	ldr	r0, [r4, #12]
 8004832:	9b03      	ldr	r3, [sp, #12]
 8004834:	4298      	cmp	r0, r3
 8004836:	bfb8      	it	lt
 8004838:	4618      	movlt	r0, r3
 800483a:	e7a4      	b.n	8004786 <_printf_i+0x16a>
 800483c:	2301      	movs	r3, #1
 800483e:	4632      	mov	r2, r6
 8004840:	4649      	mov	r1, r9
 8004842:	4640      	mov	r0, r8
 8004844:	47d0      	blx	sl
 8004846:	3001      	adds	r0, #1
 8004848:	d09b      	beq.n	8004782 <_printf_i+0x166>
 800484a:	3501      	adds	r5, #1
 800484c:	68e3      	ldr	r3, [r4, #12]
 800484e:	9903      	ldr	r1, [sp, #12]
 8004850:	1a5b      	subs	r3, r3, r1
 8004852:	42ab      	cmp	r3, r5
 8004854:	dcf2      	bgt.n	800483c <_printf_i+0x220>
 8004856:	e7eb      	b.n	8004830 <_printf_i+0x214>
 8004858:	2500      	movs	r5, #0
 800485a:	f104 0619 	add.w	r6, r4, #25
 800485e:	e7f5      	b.n	800484c <_printf_i+0x230>
 8004860:	080049b3 	.word	0x080049b3
 8004864:	080049c4 	.word	0x080049c4

08004868 <__retarget_lock_acquire_recursive>:
 8004868:	4770      	bx	lr

0800486a <__retarget_lock_release_recursive>:
 800486a:	4770      	bx	lr

0800486c <memchr>:
 800486c:	4603      	mov	r3, r0
 800486e:	b510      	push	{r4, lr}
 8004870:	b2c9      	uxtb	r1, r1
 8004872:	4402      	add	r2, r0
 8004874:	4293      	cmp	r3, r2
 8004876:	4618      	mov	r0, r3
 8004878:	d101      	bne.n	800487e <memchr+0x12>
 800487a:	2000      	movs	r0, #0
 800487c:	e003      	b.n	8004886 <memchr+0x1a>
 800487e:	7804      	ldrb	r4, [r0, #0]
 8004880:	3301      	adds	r3, #1
 8004882:	428c      	cmp	r4, r1
 8004884:	d1f6      	bne.n	8004874 <memchr+0x8>
 8004886:	bd10      	pop	{r4, pc}

08004888 <memcpy>:
 8004888:	440a      	add	r2, r1
 800488a:	4291      	cmp	r1, r2
 800488c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004890:	d100      	bne.n	8004894 <memcpy+0xc>
 8004892:	4770      	bx	lr
 8004894:	b510      	push	{r4, lr}
 8004896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800489a:	4291      	cmp	r1, r2
 800489c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048a0:	d1f9      	bne.n	8004896 <memcpy+0xe>
 80048a2:	bd10      	pop	{r4, pc}

080048a4 <memmove>:
 80048a4:	4288      	cmp	r0, r1
 80048a6:	b510      	push	{r4, lr}
 80048a8:	eb01 0402 	add.w	r4, r1, r2
 80048ac:	d902      	bls.n	80048b4 <memmove+0x10>
 80048ae:	4284      	cmp	r4, r0
 80048b0:	4623      	mov	r3, r4
 80048b2:	d807      	bhi.n	80048c4 <memmove+0x20>
 80048b4:	1e43      	subs	r3, r0, #1
 80048b6:	42a1      	cmp	r1, r4
 80048b8:	d008      	beq.n	80048cc <memmove+0x28>
 80048ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048c2:	e7f8      	b.n	80048b6 <memmove+0x12>
 80048c4:	4601      	mov	r1, r0
 80048c6:	4402      	add	r2, r0
 80048c8:	428a      	cmp	r2, r1
 80048ca:	d100      	bne.n	80048ce <memmove+0x2a>
 80048cc:	bd10      	pop	{r4, pc}
 80048ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048d6:	e7f7      	b.n	80048c8 <memmove+0x24>

080048d8 <_realloc_r>:
 80048d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048da:	4607      	mov	r7, r0
 80048dc:	4614      	mov	r4, r2
 80048de:	460e      	mov	r6, r1
 80048e0:	b921      	cbnz	r1, 80048ec <_realloc_r+0x14>
 80048e2:	4611      	mov	r1, r2
 80048e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048e8:	f7ff bc36 	b.w	8004158 <_malloc_r>
 80048ec:	b922      	cbnz	r2, 80048f8 <_realloc_r+0x20>
 80048ee:	f7ff fbe7 	bl	80040c0 <_free_r>
 80048f2:	4625      	mov	r5, r4
 80048f4:	4628      	mov	r0, r5
 80048f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048f8:	f000 f814 	bl	8004924 <_malloc_usable_size_r>
 80048fc:	42a0      	cmp	r0, r4
 80048fe:	d20f      	bcs.n	8004920 <_realloc_r+0x48>
 8004900:	4621      	mov	r1, r4
 8004902:	4638      	mov	r0, r7
 8004904:	f7ff fc28 	bl	8004158 <_malloc_r>
 8004908:	4605      	mov	r5, r0
 800490a:	2800      	cmp	r0, #0
 800490c:	d0f2      	beq.n	80048f4 <_realloc_r+0x1c>
 800490e:	4631      	mov	r1, r6
 8004910:	4622      	mov	r2, r4
 8004912:	f7ff ffb9 	bl	8004888 <memcpy>
 8004916:	4631      	mov	r1, r6
 8004918:	4638      	mov	r0, r7
 800491a:	f7ff fbd1 	bl	80040c0 <_free_r>
 800491e:	e7e9      	b.n	80048f4 <_realloc_r+0x1c>
 8004920:	4635      	mov	r5, r6
 8004922:	e7e7      	b.n	80048f4 <_realloc_r+0x1c>

08004924 <_malloc_usable_size_r>:
 8004924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004928:	1f18      	subs	r0, r3, #4
 800492a:	2b00      	cmp	r3, #0
 800492c:	bfbc      	itt	lt
 800492e:	580b      	ldrlt	r3, [r1, r0]
 8004930:	18c0      	addlt	r0, r0, r3
 8004932:	4770      	bx	lr

08004934 <_init>:
 8004934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004936:	bf00      	nop
 8004938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493a:	bc08      	pop	{r3}
 800493c:	469e      	mov	lr, r3
 800493e:	4770      	bx	lr

08004940 <_fini>:
 8004940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004942:	bf00      	nop
 8004944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004946:	bc08      	pop	{r3}
 8004948:	469e      	mov	lr, r3
 800494a:	4770      	bx	lr
